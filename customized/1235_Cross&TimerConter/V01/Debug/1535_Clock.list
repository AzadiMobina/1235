
1535_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a054  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a164  0800a164  0000b164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a4  0800a1a4  0000c074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1a4  0800a1a4  0000c074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1a4  0800a1a4  0000c074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a4  0800a1a4  0000b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1a8  0800a1a8  0000b1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800a1ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000074  0800a220  0000c074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800a220  0000c3bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5be  00000000  00000000  0000c09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fd  00000000  00000000  0001a65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  0001d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b45  00000000  00000000  0001dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c9  00000000  00000000  0001ea2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147f5  00000000  00000000  000373f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9e3  00000000  00000000  0004bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d85ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  000d8614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000dc698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a14c 	.word	0x0800a14c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800a14c 	.word	0x0800a14c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <Haamin_Remote>:
uint8_t valueNumber = 0;
uint8_t valueFeedback = 0;
uint8_t muteFlag = 1;

void Haamin_Remote(uint16_t action, uint8_t workMode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	80fb      	strh	r3, [r7, #6]
 80010bc:	4613      	mov	r3, r2
 80010be:	717b      	strb	r3, [r7, #5]
    
    if(workMode == MODE_NORMAL)
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	2b52      	cmp	r3, #82	@ 0x52
 80010c4:	f040 819a 	bne.w	80013fc <Haamin_Remote+0x34c>
    {
        if(action == INFO)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	f240 1255 	movw	r2, #341	@ 0x155
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10e      	bne.n	80010f0 <Haamin_Remote+0x40>
        {
            work_Mode = TIME_SETTING;
 80010d2:	4ba3      	ldr	r3, [pc, #652]	@ (8001360 <Haamin_Remote+0x2b0>)
 80010d4:	2254      	movs	r2, #84	@ 0x54
 80010d6:	701a      	strb	r2, [r3, #0]
            time_Mode = SET_HOUR;
 80010d8:	4ba2      	ldr	r3, [pc, #648]	@ (8001364 <Haamin_Remote+0x2b4>)
 80010da:	2248      	movs	r2, #72	@ 0x48
 80010dc:	701a      	strb	r2, [r3, #0]
            timeValue = time_Hour;
 80010de:	4ba2      	ldr	r3, [pc, #648]	@ (8001368 <Haamin_Remote+0x2b8>)
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	4ba2      	ldr	r3, [pc, #648]	@ (800136c <Haamin_Remote+0x2bc>)
 80010e4:	701a      	strb	r2, [r3, #0]
            time_Minute_t = time_Minute;
 80010e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001370 <Haamin_Remote+0x2c0>)
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	4ba2      	ldr	r3, [pc, #648]	@ (8001374 <Haamin_Remote+0x2c4>)
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e132      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == MUTE)
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	f240 1219 	movw	r2, #281	@ 0x119
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10b      	bne.n	8001112 <Haamin_Remote+0x62>
        {
            if(muteFlag)
 80010fa:	4b9f      	ldr	r3, [pc, #636]	@ (8001378 <Haamin_Remote+0x2c8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <Haamin_Remote+0x5a>
                muteFlag = 0;
 8001102:	4b9d      	ldr	r3, [pc, #628]	@ (8001378 <Haamin_Remote+0x2c8>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e125      	b.n	8001356 <Haamin_Remote+0x2a6>
            else
                muteFlag = 1;
 800110a:	4b9b      	ldr	r3, [pc, #620]	@ (8001378 <Haamin_Remote+0x2c8>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e121      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == ON_OFF)
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	f240 1259 	movw	r2, #345	@ 0x159
 8001118:	4293      	cmp	r3, r2
 800111a:	d103      	bne.n	8001124 <Haamin_Remote+0x74>
        {
            work_Mode = MODE_OFF;
 800111c:	4b90      	ldr	r3, [pc, #576]	@ (8001360 <Haamin_Remote+0x2b0>)
 800111e:	2246      	movs	r2, #70	@ 0x46
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e118      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == MENU_KEY)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f240 1245 	movw	r2, #325	@ 0x145
 800112a:	4293      	cmp	r3, r2
 800112c:	d103      	bne.n	8001136 <Haamin_Remote+0x86>
        {
            work_Mode = MENU;
 800112e:	4b8c      	ldr	r3, [pc, #560]	@ (8001360 <Haamin_Remote+0x2b0>)
 8001130:	226d      	movs	r2, #109	@ 0x6d
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e10f      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == PgDn)
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 800113c:	d11f      	bne.n	800117e <Haamin_Remote+0xce>
        {
            if(tmpShow == 0)
 800113e:	4b8f      	ldr	r3, [pc, #572]	@ (800137c <Haamin_Remote+0x2cc>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10f      	bne.n	8001166 <Haamin_Remote+0xb6>
            {
                tmpShow = 1;
 8001146:	4b8d      	ldr	r3, [pc, #564]	@ (800137c <Haamin_Remote+0x2cc>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
                time_TmpShow = 0;
 800114c:	4b8c      	ldr	r3, [pc, #560]	@ (8001380 <Haamin_Remote+0x2d0>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8001152:	2032      	movs	r0, #50	@ 0x32
 8001154:	f001 fcf6 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8001158:	2032      	movs	r0, #50	@ 0x32
 800115a:	f005 fccb 	bl	8006af4 <HAL_Delay>
                Buzz(50);
 800115e:	2032      	movs	r0, #50	@ 0x32
 8001160:	f001 fcf0 	bl	8002b44 <Buzz>
 8001164:	e0f7      	b.n	8001356 <Haamin_Remote+0x2a6>
            }
            else 
            {
                if(time_TmpShow < 5)
 8001166:	4b86      	ldr	r3, [pc, #536]	@ (8001380 <Haamin_Remote+0x2d0>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b04      	cmp	r3, #4
 800116c:	d803      	bhi.n	8001176 <Haamin_Remote+0xc6>
                    tmpShow = 0;
 800116e:	4b83      	ldr	r3, [pc, #524]	@ (800137c <Haamin_Remote+0x2cc>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e0ef      	b.n	8001356 <Haamin_Remote+0x2a6>
                else
                    time_TmpShow = 0;
 8001176:	4b82      	ldr	r3, [pc, #520]	@ (8001380 <Haamin_Remote+0x2d0>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e0eb      	b.n	8001356 <Haamin_Remote+0x2a6>
            }
        }
        else if(action == AM_PM)
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	f240 1215 	movw	r2, #277	@ 0x115
 8001184:	4293      	cmp	r3, r2
 8001186:	d10e      	bne.n	80011a6 <Haamin_Remote+0xf6>
        {
            if(PM_Mode)
 8001188:	4b7e      	ldr	r3, [pc, #504]	@ (8001384 <Haamin_Remote+0x2d4>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <Haamin_Remote+0xe8>
                PM_Mode = 0;
 8001190:	4b7c      	ldr	r3, [pc, #496]	@ (8001384 <Haamin_Remote+0x2d4>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	e002      	b.n	800119e <Haamin_Remote+0xee>
            else 
                PM_Mode = 1;
 8001198:	4b7a      	ldr	r3, [pc, #488]	@ (8001384 <Haamin_Remote+0x2d4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 800119e:	2064      	movs	r0, #100	@ 0x64
 80011a0:	f001 fcd0 	bl	8002b44 <Buzz>
 80011a4:	e0d7      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == INCREASE)  
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80011ac:	d117      	bne.n	80011de <Haamin_Remote+0x12e>
        {
            if(position_Level == 7)
 80011ae:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d109      	bne.n	80011ca <Haamin_Remote+0x11a>
            {
                position_Level = 7;
 80011b6:	4b74      	ldr	r3, [pc, #464]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80011bc:	2032      	movs	r0, #50	@ 0x32
 80011be:	f001 fcc1 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80011c2:	2032      	movs	r0, #50	@ 0x32
 80011c4:	f005 fc96 	bl	8006af4 <HAL_Delay>
 80011c8:	e005      	b.n	80011d6 <Haamin_Remote+0x126>
            }
            else 
                position_Level--;
 80011ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011d4:	701a      	strb	r2, [r3, #0]
            Buzz(50);
 80011d6:	2032      	movs	r0, #50	@ 0x32
 80011d8:	f001 fcb4 	bl	8002b44 <Buzz>
 80011dc:	e0bb      	b.n	8001356 <Haamin_Remote+0x2a6>

        }
        else if(action == DECREASE)
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80011e4:	d117      	bne.n	8001216 <Haamin_Remote+0x166>
        {
            
            if(position_Level > 20)
 80011e6:	4b68      	ldr	r3, [pc, #416]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b14      	cmp	r3, #20
 80011ec:	d909      	bls.n	8001202 <Haamin_Remote+0x152>
            {
                position_Level = 20;
 80011ee:	4b66      	ldr	r3, [pc, #408]	@ (8001388 <Haamin_Remote+0x2d8>)
 80011f0:	2214      	movs	r2, #20
 80011f2:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80011f4:	2032      	movs	r0, #50	@ 0x32
 80011f6:	f001 fca5 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80011fa:	2032      	movs	r0, #50	@ 0x32
 80011fc:	f005 fc7a 	bl	8006af4 <HAL_Delay>
 8001200:	e005      	b.n	800120e <Haamin_Remote+0x15e>
            }
            else 
                position_Level++;
 8001202:	4b61      	ldr	r3, [pc, #388]	@ (8001388 <Haamin_Remote+0x2d8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b5f      	ldr	r3, [pc, #380]	@ (8001388 <Haamin_Remote+0x2d8>)
 800120c:	701a      	strb	r2, [r3, #0]
            Buzz(50);
 800120e:	2032      	movs	r0, #50	@ 0x32
 8001210:	f001 fc98 	bl	8002b44 <Buzz>
 8001214:	e09f      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == UP_TIMER_KEY)
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	f240 1213 	movw	r2, #275	@ 0x113
 800121c:	4293      	cmp	r3, r2
 800121e:	d10f      	bne.n	8001240 <Haamin_Remote+0x190>
        {
            work_Mode = UP_TIMER;
 8001220:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <Haamin_Remote+0x2b0>)
 8001222:	2275      	movs	r2, #117	@ 0x75
 8001224:	701a      	strb	r2, [r3, #0]
            timer_Mode = MAIN_FUNCTION;
 8001226:	4b59      	ldr	r3, [pc, #356]	@ (800138c <Haamin_Remote+0x2dc>)
 8001228:	2266      	movs	r2, #102	@ 0x66
 800122a:	701a      	strb	r2, [r3, #0]
            upTime_Minute = 0;
 800122c:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <Haamin_Remote+0x2e0>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
            upTime_Second = 0;
 8001232:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <Haamin_Remote+0x2e4>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
            timer_TimeStarting = 11;
 8001238:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <Haamin_Remote+0x2e8>)
 800123a:	220b      	movs	r2, #11
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	e08a      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == DN_TIMER_KEY)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	f240 1217 	movw	r2, #279	@ 0x117
 8001246:	4293      	cmp	r3, r2
 8001248:	d111      	bne.n	800126e <Haamin_Remote+0x1be>
        {
            work_Mode = DN_TIMER;
 800124a:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <Haamin_Remote+0x2b0>)
 800124c:	2264      	movs	r2, #100	@ 0x64
 800124e:	701a      	strb	r2, [r3, #0]
            timer_Mode = MAIN_FUNCTION;
 8001250:	4b4e      	ldr	r3, [pc, #312]	@ (800138c <Haamin_Remote+0x2dc>)
 8001252:	2266      	movs	r2, #102	@ 0x66
 8001254:	701a      	strb	r2, [r3, #0]
            dnTime_Minute = dnTime_Minute_Defult;
 8001256:	4b51      	ldr	r3, [pc, #324]	@ (800139c <Haamin_Remote+0x2ec>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <Haamin_Remote+0x2f0>)
 800125e:	601a      	str	r2, [r3, #0]
            dnTime_Second = 0;
 8001260:	4b50      	ldr	r3, [pc, #320]	@ (80013a4 <Haamin_Remote+0x2f4>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
            timer_TimeStarting = 11;
 8001266:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <Haamin_Remote+0x2e8>)
 8001268:	220b      	movs	r2, #11
 800126a:	701a      	strb	r2, [r3, #0]
 800126c:	e073      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == TABATA_KEY)
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8001274:	d118      	bne.n	80012a8 <Haamin_Remote+0x1f8>
        {
            work_Mode = TABATA;
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <Haamin_Remote+0x2b0>)
 8001278:	2274      	movs	r2, #116	@ 0x74
 800127a:	701a      	strb	r2, [r3, #0]
            cross_Mode = MAIN_FUNCTION;
 800127c:	4b4a      	ldr	r3, [pc, #296]	@ (80013a8 <Haamin_Remote+0x2f8>)
 800127e:	2266      	movs	r2, #102	@ 0x66
 8001280:	701a      	strb	r2, [r3, #0]
            tabata_Round = tabata_Round_Def;
 8001282:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <Haamin_Remote+0x2fc>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <Haamin_Remote+0x300>)
 8001288:	701a      	strb	r2, [r3, #0]
            tabata_Act = tabata_Act_Def;
 800128a:	4b4a      	ldr	r3, [pc, #296]	@ (80013b4 <Haamin_Remote+0x304>)
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <Haamin_Remote+0x308>)
 8001290:	701a      	strb	r2, [r3, #0]
            tabata_Rest = tabata_Rest_Def;
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <Haamin_Remote+0x30c>)
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <Haamin_Remote+0x310>)
 8001298:	701a      	strb	r2, [r3, #0]
            cross_SrUpEn = 1;
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <Haamin_Remote+0x314>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
            cross_TimeStarting = 11; 
 80012a0:	4b49      	ldr	r3, [pc, #292]	@ (80013c8 <Haamin_Remote+0x318>)
 80012a2:	220b      	movs	r2, #11
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e056      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == EMOM_KEY)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	f5b3 7fa4 	cmp.w	r3, #328	@ 0x148
 80012ae:	d114      	bne.n	80012da <Haamin_Remote+0x22a>
        {
            work_Mode = EMOM;
 80012b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001360 <Haamin_Remote+0x2b0>)
 80012b2:	2265      	movs	r2, #101	@ 0x65
 80012b4:	701a      	strb	r2, [r3, #0]
            cross_Mode = MAIN_FUNCTION;
 80012b6:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <Haamin_Remote+0x2f8>)
 80012b8:	2266      	movs	r2, #102	@ 0x66
 80012ba:	701a      	strb	r2, [r3, #0]
            emom_Round = emom_Round;
 80012bc:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <Haamin_Remote+0x31c>)
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	4b42      	ldr	r3, [pc, #264]	@ (80013cc <Haamin_Remote+0x31c>)
 80012c2:	701a      	strb	r2, [r3, #0]
            emom_Time = emom_Time_Def;
 80012c4:	4b42      	ldr	r3, [pc, #264]	@ (80013d0 <Haamin_Remote+0x320>)
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <Haamin_Remote+0x324>)
 80012ca:	701a      	strb	r2, [r3, #0]
            cross_SrUpEn = 1;
 80012cc:	4b3d      	ldr	r3, [pc, #244]	@ (80013c4 <Haamin_Remote+0x314>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
            cross_TimeStarting = 11;
 80012d2:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <Haamin_Remote+0x318>)
 80012d4:	220b      	movs	r2, #11
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e03d      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == AMRAP_KEY)
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80012e0:	d116      	bne.n	8001310 <Haamin_Remote+0x260>
        {
            work_Mode = AMRAP;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <Haamin_Remote+0x2b0>)
 80012e4:	2261      	movs	r2, #97	@ 0x61
 80012e6:	701a      	strb	r2, [r3, #0]
            cross_Mode = MAIN_FUNCTION;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <Haamin_Remote+0x2f8>)
 80012ea:	2266      	movs	r2, #102	@ 0x66
 80012ec:	701a      	strb	r2, [r3, #0]
            amrap_Minute = amrap_Minute_Def;
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <Haamin_Remote+0x328>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <Haamin_Remote+0x32c>)
 80012f6:	601a      	str	r2, [r3, #0]
            amrap_Second = amrap_Second_Def;
 80012f8:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <Haamin_Remote+0x330>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <Haamin_Remote+0x334>)
 8001300:	601a      	str	r2, [r3, #0]
            cross_SrUpEn = 1;
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <Haamin_Remote+0x314>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
            cross_TimeStarting = 11;
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <Haamin_Remote+0x318>)
 800130a:	220b      	movs	r2, #11
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e022      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == MIX_KEY)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f240 120b 	movw	r2, #267	@ 0x10b
 8001316:	4293      	cmp	r3, r2
 8001318:	d109      	bne.n	800132e <Haamin_Remote+0x27e>
        {
            work_Mode = SET_MIX;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <Haamin_Remote+0x2b0>)
 800131c:	2278      	movs	r2, #120	@ 0x78
 800131e:	701a      	strb	r2, [r3, #0]
            cross_Mode = SETTING;
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <Haamin_Remote+0x2f8>)
 8001322:	2273      	movs	r2, #115	@ 0x73
 8001324:	701a      	strb	r2, [r3, #0]
            mix_Step = PART_1;
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <Haamin_Remote+0x338>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e013      	b.n	8001356 <Haamin_Remote+0x2a6>
        }
        else if(action == TIMER_COUNTER_KEY)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f240 1207 	movw	r2, #263	@ 0x107
 8001334:	4293      	cmp	r3, r2
 8001336:	d10e      	bne.n	8001356 <Haamin_Remote+0x2a6>
        {
            work_Mode = TIMER_COUNTER;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <Haamin_Remote+0x2b0>)
 800133a:	2263      	movs	r2, #99	@ 0x63
 800133c:	701a      	strb	r2, [r3, #0]
            timer_Run = 0;
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <Haamin_Remote+0x33c>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
            timer_Second = 0;
 8001344:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <Haamin_Remote+0x340>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
            timer_mili_Second = 0;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <Haamin_Remote+0x344>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
            counter_Value = 0;
 8001350:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <Haamin_Remote+0x348>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
        }
        Buzz(100);
 8001356:	2064      	movs	r0, #100	@ 0x64
 8001358:	f001 fbf4 	bl	8002b44 <Buzz>
        {
            timer_Run = 0;
            Buzz(100);
        }
    }
}
 800135c:	f001 bb71 	b.w	8002a42 <Haamin_Remote+0x1992>
 8001360:	20000001 	.word	0x20000001
 8001364:	20000002 	.word	0x20000002
 8001368:	200001ac 	.word	0x200001ac
 800136c:	200001b3 	.word	0x200001b3
 8001370:	200001ad 	.word	0x200001ad
 8001374:	200001b2 	.word	0x200001b2
 8001378:	20000000 	.word	0x20000000
 800137c:	20000004 	.word	0x20000004
 8001380:	200001b6 	.word	0x200001b6
 8001384:	200001b9 	.word	0x200001b9
 8001388:	20000003 	.word	0x20000003
 800138c:	200001ec 	.word	0x200001ec
 8001390:	200001de 	.word	0x200001de
 8001394:	200001dd 	.word	0x200001dd
 8001398:	200001eb 	.word	0x200001eb
 800139c:	20000015 	.word	0x20000015
 80013a0:	200001e4 	.word	0x200001e4
 80013a4:	200001e0 	.word	0x200001e0
 80013a8:	200001d8 	.word	0x200001d8
 80013ac:	20000008 	.word	0x20000008
 80013b0:	200001bb 	.word	0x200001bb
 80013b4:	20000007 	.word	0x20000007
 80013b8:	200001ba 	.word	0x200001ba
 80013bc:	20000009 	.word	0x20000009
 80013c0:	200001bc 	.word	0x200001bc
 80013c4:	200001db 	.word	0x200001db
 80013c8:	200001d7 	.word	0x200001d7
 80013cc:	200001bf 	.word	0x200001bf
 80013d0:	2000000b 	.word	0x2000000b
 80013d4:	200001c0 	.word	0x200001c0
 80013d8:	2000000d 	.word	0x2000000d
 80013dc:	200001c8 	.word	0x200001c8
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	200001c4 	.word	0x200001c4
 80013e8:	200001ce 	.word	0x200001ce
 80013ec:	200001ee 	.word	0x200001ee
 80013f0:	200001e8 	.word	0x200001e8
 80013f4:	200001e9 	.word	0x200001e9
 80013f8:	200001ea 	.word	0x200001ea
    else if(workMode == MODE_OFF)
 80013fc:	797b      	ldrb	r3, [r7, #5]
 80013fe:	2b46      	cmp	r3, #70	@ 0x46
 8001400:	d10c      	bne.n	800141c <Haamin_Remote+0x36c>
        if(action == ON_OFF)
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	f240 1259 	movw	r2, #345	@ 0x159
 8001408:	4293      	cmp	r3, r2
 800140a:	d102      	bne.n	8001412 <Haamin_Remote+0x362>
            work_Mode = MODE_NORMAL;
 800140c:	4b94      	ldr	r3, [pc, #592]	@ (8001660 <Haamin_Remote+0x5b0>)
 800140e:	2252      	movs	r2, #82	@ 0x52
 8001410:	701a      	strb	r2, [r3, #0]
        Buzz(100);
 8001412:	2064      	movs	r0, #100	@ 0x64
 8001414:	f001 fb96 	bl	8002b44 <Buzz>
}
 8001418:	f001 bb13 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if(workMode == TIME_SETTING)
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	2b54      	cmp	r3, #84	@ 0x54
 8001420:	f040 80d4 	bne.w	80015cc <Haamin_Remote+0x51c>
        if(action == INCREASE)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800142a:	d121      	bne.n	8001470 <Haamin_Remote+0x3c0>
            if(time_Mode == SET_HOUR)
 800142c:	4b8d      	ldr	r3, [pc, #564]	@ (8001664 <Haamin_Remote+0x5b4>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b48      	cmp	r3, #72	@ 0x48
 8001432:	d10e      	bne.n	8001452 <Haamin_Remote+0x3a2>
                if(++timeValue > 23)
 8001434:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b8a      	ldr	r3, [pc, #552]	@ (8001668 <Haamin_Remote+0x5b8>)
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b17      	cmp	r3, #23
 8001446:	f240 80bc 	bls.w	80015c2 <Haamin_Remote+0x512>
                timeValue = 0;
 800144a:	4b87      	ldr	r3, [pc, #540]	@ (8001668 <Haamin_Remote+0x5b8>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e0b7      	b.n	80015c2 <Haamin_Remote+0x512>
                if(++timeValue > 59)
 8001452:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b83      	ldr	r3, [pc, #524]	@ (8001668 <Haamin_Remote+0x5b8>)
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b3b      	cmp	r3, #59	@ 0x3b
 8001464:	f240 80ad 	bls.w	80015c2 <Haamin_Remote+0x512>
                timeValue = 0;
 8001468:	4b7f      	ldr	r3, [pc, #508]	@ (8001668 <Haamin_Remote+0x5b8>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e0a8      	b.n	80015c2 <Haamin_Remote+0x512>
        else if(action == DECREASE)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8001476:	d121      	bne.n	80014bc <Haamin_Remote+0x40c>
            if(time_Mode == SET_HOUR)
 8001478:	4b7a      	ldr	r3, [pc, #488]	@ (8001664 <Haamin_Remote+0x5b4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b48      	cmp	r3, #72	@ 0x48
 800147e:	d10e      	bne.n	800149e <Haamin_Remote+0x3ee>
                if(timeValue == 0)
 8001480:	4b79      	ldr	r3, [pc, #484]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <Haamin_Remote+0x3e0>
                timeValue = 23;
 8001488:	4b77      	ldr	r3, [pc, #476]	@ (8001668 <Haamin_Remote+0x5b8>)
 800148a:	2217      	movs	r2, #23
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e098      	b.n	80015c2 <Haamin_Remote+0x512>
                timeValue--;
 8001490:	4b75      	ldr	r3, [pc, #468]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b73      	ldr	r3, [pc, #460]	@ (8001668 <Haamin_Remote+0x5b8>)
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e091      	b.n	80015c2 <Haamin_Remote+0x512>
                if(timeValue == 0)
 800149e:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <Haamin_Remote+0x3fe>
                timeValue = 59;
 80014a6:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014a8:	223b      	movs	r2, #59	@ 0x3b
 80014aa:	701a      	strb	r2, [r3, #0]
 80014ac:	e089      	b.n	80015c2 <Haamin_Remote+0x512>
                timeValue--;
 80014ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e082      	b.n	80015c2 <Haamin_Remote+0x512>
        else if(action == EXIT_KEY)
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f240 1205 	movw	r2, #261	@ 0x105
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d103      	bne.n	80014ce <Haamin_Remote+0x41e>
            work_Mode = MODE_NORMAL;
 80014c6:	4b66      	ldr	r3, [pc, #408]	@ (8001660 <Haamin_Remote+0x5b0>)
 80014c8:	2252      	movs	r2, #82	@ 0x52
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e079      	b.n	80015c2 <Haamin_Remote+0x512>
        else if(action == OK_KEY)
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 80014d4:	d133      	bne.n	800153e <Haamin_Remote+0x48e>
            if(time_Mode == SET_HOUR)
 80014d6:	4b63      	ldr	r3, [pc, #396]	@ (8001664 <Haamin_Remote+0x5b4>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b48      	cmp	r3, #72	@ 0x48
 80014dc:	d10b      	bne.n	80014f6 <Haamin_Remote+0x446>
                time_Hour_t = timeValue;
 80014de:	4b62      	ldr	r3, [pc, #392]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014e0:	781a      	ldrb	r2, [r3, #0]
 80014e2:	4b62      	ldr	r3, [pc, #392]	@ (800166c <Haamin_Remote+0x5bc>)
 80014e4:	701a      	strb	r2, [r3, #0]
                time_Mode = SET_MIN;
 80014e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <Haamin_Remote+0x5b4>)
 80014e8:	224d      	movs	r2, #77	@ 0x4d
 80014ea:	701a      	strb	r2, [r3, #0]
                timeValue = time_Minute;
 80014ec:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <Haamin_Remote+0x5c0>)
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <Haamin_Remote+0x5b8>)
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e065      	b.n	80015c2 <Haamin_Remote+0x512>
            else if(time_Mode == SET_MIN)
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <Haamin_Remote+0x5b4>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b4d      	cmp	r3, #77	@ 0x4d
 80014fc:	d161      	bne.n	80015c2 <Haamin_Remote+0x512>
                time_Minute_t = timeValue;
 80014fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001668 <Haamin_Remote+0x5b8>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b5c      	ldr	r3, [pc, #368]	@ (8001674 <Haamin_Remote+0x5c4>)
 8001504:	701a      	strb	r2, [r3, #0]
                time_Minute = time_Minute_t;
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <Haamin_Remote+0x5c4>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b59      	ldr	r3, [pc, #356]	@ (8001670 <Haamin_Remote+0x5c0>)
 800150c:	701a      	strb	r2, [r3, #0]
                time_Hour = time_Hour_t;
 800150e:	4b57      	ldr	r3, [pc, #348]	@ (800166c <Haamin_Remote+0x5bc>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b59      	ldr	r3, [pc, #356]	@ (8001678 <Haamin_Remote+0x5c8>)
 8001514:	701a      	strb	r2, [r3, #0]
                time_Second = 0;
 8001516:	4b59      	ldr	r3, [pc, #356]	@ (800167c <Haamin_Remote+0x5cc>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 800151c:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <Haamin_Remote+0x5b0>)
 800151e:	2252      	movs	r2, #82	@ 0x52
 8001520:	701a      	strb	r2, [r3, #0]
                time_Mode = SET_HOUR;
 8001522:	4b50      	ldr	r3, [pc, #320]	@ (8001664 <Haamin_Remote+0x5b4>)
 8001524:	2248      	movs	r2, #72	@ 0x48
 8001526:	701a      	strb	r2, [r3, #0]
                DS3231_WriteTime(&hi2c2, time_Hour,time_Minute,0);
 8001528:	4b53      	ldr	r3, [pc, #332]	@ (8001678 <Haamin_Remote+0x5c8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4b50      	ldr	r3, [pc, #320]	@ (8001670 <Haamin_Remote+0x5c0>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	2300      	movs	r3, #0
 8001536:	4852      	ldr	r0, [pc, #328]	@ (8001680 <Haamin_Remote+0x5d0>)
 8001538:	f002 fdfc 	bl	8004134 <DS3231_WriteTime>
 800153c:	e041      	b.n	80015c2 <Haamin_Remote+0x512>
        else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	f240 120f 	movw	r2, #271	@ 0x10f
 8001544:	4293      	cmp	r3, r2
 8001546:	d023      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 800154e:	d01f      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8001556:	d01b      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800155e:	d017      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8001566:	d013      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800156e:	d00f      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8001576:	d00b      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800157e:	d007      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001586:	d003      	beq.n	8001590 <Haamin_Remote+0x4e0>
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800158e:	d118      	bne.n	80015c2 <Haamin_Remote+0x512>
            valueFeedback = Haamin_NumberKey(action);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f001 fa78 	bl	8002a88 <Haamin_NumberKey>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <Haamin_Remote+0x5d4>)
 800159e:	701a      	strb	r2, [r3, #0]
            timeValue = ((valuSetting_tmp * 10) + valueFeedback);
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <Haamin_Remote+0x5d8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <Haamin_Remote+0x5d4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001668 <Haamin_Remote+0x5b8>)
 80015b8:	701a      	strb	r2, [r3, #0]
            valuSetting_tmp = valueFeedback;
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <Haamin_Remote+0x5d4>)
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <Haamin_Remote+0x5d8>)
 80015c0:	701a      	strb	r2, [r3, #0]
        Buzz(100);
 80015c2:	2064      	movs	r0, #100	@ 0x64
 80015c4:	f001 fabe 	bl	8002b44 <Buzz>
}
 80015c8:	f001 ba3b 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if (workMode == MENU)
 80015cc:	797b      	ldrb	r3, [r7, #5]
 80015ce:	2b6d      	cmp	r3, #109	@ 0x6d
 80015d0:	f040 815a 	bne.w	8001888 <Haamin_Remote+0x7d8>
        time_Out = 0;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <Haamin_Remote+0x5dc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
        if (action == INCREASE)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80015e0:	d111      	bne.n	8001606 <Haamin_Remote+0x556>
            if (++Condition > 6)
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <Haamin_Remote+0x5e0>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <Haamin_Remote+0x5e0>)
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <Haamin_Remote+0x5e0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <Haamin_Remote+0x54c>
                Condition = 1;
 80015f6:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <Haamin_Remote+0x5e0>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 80015fc:	2064      	movs	r0, #100	@ 0x64
 80015fe:	f001 faa1 	bl	8002b44 <Buzz>
}
 8001602:	f001 ba1e 	b.w	8002a42 <Haamin_Remote+0x1992>
        else if (action == DECREASE)
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800160c:	d112      	bne.n	8001634 <Haamin_Remote+0x584>
            if (Condition == 1)
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <Haamin_Remote+0x5e0>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d103      	bne.n	800161e <Haamin_Remote+0x56e>
                Condition = 6;
 8001616:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <Haamin_Remote+0x5e0>)
 8001618:	2206      	movs	r2, #6
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e005      	b.n	800162a <Haamin_Remote+0x57a>
                Condition--;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <Haamin_Remote+0x5e0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3b01      	subs	r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <Haamin_Remote+0x5e0>)
 8001628:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 800162a:	2064      	movs	r0, #100	@ 0x64
 800162c:	f001 fa8a 	bl	8002b44 <Buzz>
}
 8001630:	f001 ba07 	b.w	8002a42 <Haamin_Remote+0x1992>
        else if (action == MUTE)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f240 1219 	movw	r2, #281	@ 0x119
 800163a:	4293      	cmp	r3, r2
 800163c:	d12c      	bne.n	8001698 <Haamin_Remote+0x5e8>
            if (muteFlag)
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <Haamin_Remote+0x5e4>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <Haamin_Remote+0x59e>
                muteFlag = 0;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <Haamin_Remote+0x5e4>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e002      	b.n	8001654 <Haamin_Remote+0x5a4>
                muteFlag = 1;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <Haamin_Remote+0x5e4>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8001654:	2064      	movs	r0, #100	@ 0x64
 8001656:	f001 fa75 	bl	8002b44 <Buzz>
}
 800165a:	f001 b9f2 	b.w	8002a42 <Haamin_Remote+0x1992>
 800165e:	bf00      	nop
 8001660:	20000001 	.word	0x20000001
 8001664:	20000002 	.word	0x20000002
 8001668:	200001b3 	.word	0x200001b3
 800166c:	200001b1 	.word	0x200001b1
 8001670:	200001ad 	.word	0x200001ad
 8001674:	200001b2 	.word	0x200001b2
 8001678:	200001ac 	.word	0x200001ac
 800167c:	200001ae 	.word	0x200001ae
 8001680:	20000158 	.word	0x20000158
 8001684:	20000092 	.word	0x20000092
 8001688:	20000090 	.word	0x20000090
 800168c:	200001b0 	.word	0x200001b0
 8001690:	20000006 	.word	0x20000006
 8001694:	20000000 	.word	0x20000000
        else if (action == OK_KEY)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 800169e:	f040 809b 	bne.w	80017d8 <Haamin_Remote+0x728>
            switch (Condition)
 80016a2:	4ba4      	ldr	r3, [pc, #656]	@ (8001934 <Haamin_Remote+0x884>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	f200 808f 	bhi.w	80017cc <Haamin_Remote+0x71c>
 80016ae:	a201      	add	r2, pc, #4	@ (adr r2, 80016b4 <Haamin_Remote+0x604>)
 80016b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016f3 	.word	0x080016f3
 80016bc:	0800171d 	.word	0x0800171d
 80016c0:	08001755 	.word	0x08001755
 80016c4:	08001785 	.word	0x08001785
 80016c8:	080017b9 	.word	0x080017b9
                work_Mode = UP_TIMER;
 80016cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001938 <Haamin_Remote+0x888>)
 80016ce:	2275      	movs	r2, #117	@ 0x75
 80016d0:	701a      	strb	r2, [r3, #0]
                timer_Mode = MAIN_FUNCTION;
 80016d2:	4b9a      	ldr	r3, [pc, #616]	@ (800193c <Haamin_Remote+0x88c>)
 80016d4:	2266      	movs	r2, #102	@ 0x66
 80016d6:	701a      	strb	r2, [r3, #0]
                timer_SrUpEn = 1;
 80016d8:	4b99      	ldr	r3, [pc, #612]	@ (8001940 <Haamin_Remote+0x890>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
                upTime_Minute = 0;
 80016de:	4b99      	ldr	r3, [pc, #612]	@ (8001944 <Haamin_Remote+0x894>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
                upTime_Second = 0;
 80016e4:	4b98      	ldr	r3, [pc, #608]	@ (8001948 <Haamin_Remote+0x898>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 80016ea:	4b98      	ldr	r3, [pc, #608]	@ (800194c <Haamin_Remote+0x89c>)
 80016ec:	220b      	movs	r2, #11
 80016ee:	701a      	strb	r2, [r3, #0]
                break;
 80016f0:	e06d      	b.n	80017ce <Haamin_Remote+0x71e>
                work_Mode = DN_TIMER;
 80016f2:	4b91      	ldr	r3, [pc, #580]	@ (8001938 <Haamin_Remote+0x888>)
 80016f4:	2264      	movs	r2, #100	@ 0x64
 80016f6:	701a      	strb	r2, [r3, #0]
                timer_Mode = MAIN_FUNCTION;
 80016f8:	4b90      	ldr	r3, [pc, #576]	@ (800193c <Haamin_Remote+0x88c>)
 80016fa:	2266      	movs	r2, #102	@ 0x66
 80016fc:	701a      	strb	r2, [r3, #0]
                dnTime_Minute = dnTime_Minute_Defult;
 80016fe:	4b94      	ldr	r3, [pc, #592]	@ (8001950 <Haamin_Remote+0x8a0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b93      	ldr	r3, [pc, #588]	@ (8001954 <Haamin_Remote+0x8a4>)
 8001706:	601a      	str	r2, [r3, #0]
                dnTime_Second = 0;
 8001708:	4b93      	ldr	r3, [pc, #588]	@ (8001958 <Haamin_Remote+0x8a8>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
                timer_SrUpEn = 1;
 800170e:	4b8c      	ldr	r3, [pc, #560]	@ (8001940 <Haamin_Remote+0x890>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 8001714:	4b8d      	ldr	r3, [pc, #564]	@ (800194c <Haamin_Remote+0x89c>)
 8001716:	220b      	movs	r2, #11
 8001718:	701a      	strb	r2, [r3, #0]
                break;
 800171a:	e058      	b.n	80017ce <Haamin_Remote+0x71e>
                work_Mode = TABATA;
 800171c:	4b86      	ldr	r3, [pc, #536]	@ (8001938 <Haamin_Remote+0x888>)
 800171e:	2274      	movs	r2, #116	@ 0x74
 8001720:	701a      	strb	r2, [r3, #0]
                cross_Mode = MAIN_FUNCTION;
 8001722:	4b8e      	ldr	r3, [pc, #568]	@ (800195c <Haamin_Remote+0x8ac>)
 8001724:	2266      	movs	r2, #102	@ 0x66
 8001726:	701a      	strb	r2, [r3, #0]
                tabata_Round = tabata_Round_Def;
 8001728:	4b8d      	ldr	r3, [pc, #564]	@ (8001960 <Haamin_Remote+0x8b0>)
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	4b8d      	ldr	r3, [pc, #564]	@ (8001964 <Haamin_Remote+0x8b4>)
 800172e:	701a      	strb	r2, [r3, #0]
                tabata_Act = tabata_Act_Def;
 8001730:	4b8d      	ldr	r3, [pc, #564]	@ (8001968 <Haamin_Remote+0x8b8>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b8d      	ldr	r3, [pc, #564]	@ (800196c <Haamin_Remote+0x8bc>)
 8001736:	701a      	strb	r2, [r3, #0]
                tabata_Rest = tabata_Rest_Def;
 8001738:	4b8d      	ldr	r3, [pc, #564]	@ (8001970 <Haamin_Remote+0x8c0>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4b8d      	ldr	r3, [pc, #564]	@ (8001974 <Haamin_Remote+0x8c4>)
 800173e:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8001740:	4b8d      	ldr	r3, [pc, #564]	@ (8001978 <Haamin_Remote+0x8c8>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 1;
 8001746:	4b8d      	ldr	r3, [pc, #564]	@ (800197c <Haamin_Remote+0x8cc>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 800174c:	4b8c      	ldr	r3, [pc, #560]	@ (8001980 <Haamin_Remote+0x8d0>)
 800174e:	220b      	movs	r2, #11
 8001750:	701a      	strb	r2, [r3, #0]
                break;
 8001752:	e03c      	b.n	80017ce <Haamin_Remote+0x71e>
                work_Mode = EMOM;
 8001754:	4b78      	ldr	r3, [pc, #480]	@ (8001938 <Haamin_Remote+0x888>)
 8001756:	2265      	movs	r2, #101	@ 0x65
 8001758:	701a      	strb	r2, [r3, #0]
                cross_Mode = MAIN_FUNCTION;
 800175a:	4b80      	ldr	r3, [pc, #512]	@ (800195c <Haamin_Remote+0x8ac>)
 800175c:	2266      	movs	r2, #102	@ 0x66
 800175e:	701a      	strb	r2, [r3, #0]
                emom_Round = emom_Round;
 8001760:	4b88      	ldr	r3, [pc, #544]	@ (8001984 <Haamin_Remote+0x8d4>)
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	4b87      	ldr	r3, [pc, #540]	@ (8001984 <Haamin_Remote+0x8d4>)
 8001766:	701a      	strb	r2, [r3, #0]
                emom_Time = emom_Time_Def;
 8001768:	4b87      	ldr	r3, [pc, #540]	@ (8001988 <Haamin_Remote+0x8d8>)
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	4b87      	ldr	r3, [pc, #540]	@ (800198c <Haamin_Remote+0x8dc>)
 800176e:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8001770:	4b81      	ldr	r3, [pc, #516]	@ (8001978 <Haamin_Remote+0x8c8>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 1;
 8001776:	4b81      	ldr	r3, [pc, #516]	@ (800197c <Haamin_Remote+0x8cc>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 800177c:	4b80      	ldr	r3, [pc, #512]	@ (8001980 <Haamin_Remote+0x8d0>)
 800177e:	220b      	movs	r2, #11
 8001780:	701a      	strb	r2, [r3, #0]
                break;
 8001782:	e024      	b.n	80017ce <Haamin_Remote+0x71e>
                work_Mode = AMRAP;
 8001784:	4b6c      	ldr	r3, [pc, #432]	@ (8001938 <Haamin_Remote+0x888>)
 8001786:	2261      	movs	r2, #97	@ 0x61
 8001788:	701a      	strb	r2, [r3, #0]
                cross_Mode = MAIN_FUNCTION;
 800178a:	4b74      	ldr	r3, [pc, #464]	@ (800195c <Haamin_Remote+0x8ac>)
 800178c:	2266      	movs	r2, #102	@ 0x66
 800178e:	701a      	strb	r2, [r3, #0]
                amrap_Minute = amrap_Minute_Def;
 8001790:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <Haamin_Remote+0x8e0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b7f      	ldr	r3, [pc, #508]	@ (8001994 <Haamin_Remote+0x8e4>)
 8001798:	601a      	str	r2, [r3, #0]
                amrap_Second = amrap_Second_Def;
 800179a:	4b7f      	ldr	r3, [pc, #508]	@ (8001998 <Haamin_Remote+0x8e8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b7e      	ldr	r3, [pc, #504]	@ (800199c <Haamin_Remote+0x8ec>)
 80017a2:	601a      	str	r2, [r3, #0]
                cross_SrUpEn = 1;
 80017a4:	4b75      	ldr	r3, [pc, #468]	@ (800197c <Haamin_Remote+0x8cc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <Haamin_Remote+0x8c8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <Haamin_Remote+0x8d0>)
 80017b2:	220b      	movs	r2, #11
 80017b4:	701a      	strb	r2, [r3, #0]
                break;
 80017b6:	e00a      	b.n	80017ce <Haamin_Remote+0x71e>
                work_Mode = SET_MIX;
 80017b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001938 <Haamin_Remote+0x888>)
 80017ba:	2278      	movs	r2, #120	@ 0x78
 80017bc:	701a      	strb	r2, [r3, #0]
                cross_Mode = SETTING;
 80017be:	4b67      	ldr	r3, [pc, #412]	@ (800195c <Haamin_Remote+0x8ac>)
 80017c0:	2273      	movs	r2, #115	@ 0x73
 80017c2:	701a      	strb	r2, [r3, #0]
                mix_Step = PART_1;
 80017c4:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <Haamin_Remote+0x8f0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
                break;
 80017ca:	e000      	b.n	80017ce <Haamin_Remote+0x71e>
                break;
 80017cc:	bf00      	nop
            Buzz(100);
 80017ce:	2064      	movs	r0, #100	@ 0x64
 80017d0:	f001 f9b8 	bl	8002b44 <Buzz>
}
 80017d4:	f001 b935 	b.w	8002a42 <Haamin_Remote+0x1992>
        else if (action == EXIT_KEY)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	f240 1205 	movw	r2, #261	@ 0x105
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10d      	bne.n	80017fe <Haamin_Remote+0x74e>
            work_Mode = MODE_NORMAL;
 80017e2:	4b55      	ldr	r3, [pc, #340]	@ (8001938 <Haamin_Remote+0x888>)
 80017e4:	2252      	movs	r2, #82	@ 0x52
 80017e6:	701a      	strb	r2, [r3, #0]
            Buzz(50);
 80017e8:	2032      	movs	r0, #50	@ 0x32
 80017ea:	f001 f9ab 	bl	8002b44 <Buzz>
            HAL_Delay(50);
 80017ee:	2032      	movs	r0, #50	@ 0x32
 80017f0:	f005 f980 	bl	8006af4 <HAL_Delay>
            Buzz(100);
 80017f4:	2064      	movs	r0, #100	@ 0x64
 80017f6:	f001 f9a5 	bl	8002b44 <Buzz>
}
 80017fa:	f001 b922 	b.w	8002a42 <Haamin_Remote+0x1992>
        else if ((action == KEY_0) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f240 120f 	movw	r2, #271	@ 0x10f
 8001804:	4293      	cmp	r3, r2
 8001806:	d024      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 800180e:	d020      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8001816:	d01c      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800181e:	d018      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8001826:	d014      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800182e:	d010      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8001836:	d00c      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800183e:	d008      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001846:	d004      	beq.n	8001852 <Haamin_Remote+0x7a2>
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800184e:	f041 80f8 	bne.w	8002a42 <Haamin_Remote+0x1992>
            Condition = Haamin_NumberKey(action);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4618      	mov	r0, r3
 8001856:	f001 f917 	bl	8002a88 <Haamin_NumberKey>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <Haamin_Remote+0x884>)
 8001860:	701a      	strb	r2, [r3, #0]
            if(Condition > 6)   Condition =6;
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <Haamin_Remote+0x884>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <Haamin_Remote+0x7c0>
 800186a:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <Haamin_Remote+0x884>)
 800186c:	2206      	movs	r2, #6
 800186e:	701a      	strb	r2, [r3, #0]
            if(Condition == 0)  Condition = 1;
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <Haamin_Remote+0x884>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <Haamin_Remote+0x7ce>
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <Haamin_Remote+0x884>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f001 f960 	bl	8002b44 <Buzz>
}
 8001884:	f001 b8dd 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if(workMode == UP_TIMER)
 8001888:	797b      	ldrb	r3, [r7, #5]
 800188a:	2b75      	cmp	r3, #117	@ 0x75
 800188c:	f040 8156 	bne.w	8001b3c <Haamin_Remote+0xa8c>
        if(timer_Mode == SETTING)
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <Haamin_Remote+0x88c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b73      	cmp	r3, #115	@ 0x73
 8001896:	f040 80de 	bne.w	8001a56 <Haamin_Remote+0x9a6>
            if(action == INCREASE)
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80018a0:	d10e      	bne.n	80018c0 <Haamin_Remote+0x810>
                if(++timer_Value > 99)
 80018a2:	4b40      	ldr	r3, [pc, #256]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b63      	cmp	r3, #99	@ 0x63
 80018b4:	f240 813d 	bls.w	8001b32 <Haamin_Remote+0xa82>
                    timer_Value = 0;
 80018b8:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e138      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == DECREASE)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80018c6:	d10e      	bne.n	80018e6 <Haamin_Remote+0x836>
                if(timer_Value == 0)
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <Haamin_Remote+0x828>
                    timer_Value = 99;
 80018d0:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018d2:	2263      	movs	r2, #99	@ 0x63
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e12c      	b.n	8001b32 <Haamin_Remote+0xa82>
                    timer_Value--;
 80018d8:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <Haamin_Remote+0x8f4>)
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	e125      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == MUTE)
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f240 1219 	movw	r2, #281	@ 0x119
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d10b      	bne.n	8001908 <Haamin_Remote+0x858>
                if(muteFlag)
 80018f0:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <Haamin_Remote+0x8f8>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <Haamin_Remote+0x850>
                    muteFlag = 0;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <Haamin_Remote+0x8f8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e118      	b.n	8001b32 <Haamin_Remote+0xa82>
                    muteFlag = 1;
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <Haamin_Remote+0x8f8>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e114      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if (action == OK_KEY)
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 800190e:	d14f      	bne.n	80019b0 <Haamin_Remote+0x900>
                upTime_Minute_Defult = timer_Value;
 8001910:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <Haamin_Remote+0x8f4>)
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <Haamin_Remote+0x8fc>)
 8001916:	701a      	strb	r2, [r3, #0]
                upTime_Minute = upTime_Minute_Defult;
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <Haamin_Remote+0x8fc>)
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <Haamin_Remote+0x894>)
 800191e:	701a      	strb	r2, [r3, #0]
                timer_SrUpEn = 1;
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <Haamin_Remote+0x890>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
                timer_Mode = MAIN_FUNCTION;
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <Haamin_Remote+0x88c>)
 8001928:	2266      	movs	r2, #102	@ 0x66
 800192a:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <Haamin_Remote+0x89c>)
 800192e:	220b      	movs	r2, #11
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e0fe      	b.n	8001b32 <Haamin_Remote+0xa82>
 8001934:	20000006 	.word	0x20000006
 8001938:	20000001 	.word	0x20000001
 800193c:	200001ec 	.word	0x200001ec
 8001940:	20000016 	.word	0x20000016
 8001944:	200001de 	.word	0x200001de
 8001948:	200001dd 	.word	0x200001dd
 800194c:	200001eb 	.word	0x200001eb
 8001950:	20000015 	.word	0x20000015
 8001954:	200001e4 	.word	0x200001e4
 8001958:	200001e0 	.word	0x200001e0
 800195c:	200001d8 	.word	0x200001d8
 8001960:	20000008 	.word	0x20000008
 8001964:	200001bb 	.word	0x200001bb
 8001968:	20000007 	.word	0x20000007
 800196c:	200001ba 	.word	0x200001ba
 8001970:	20000009 	.word	0x20000009
 8001974:	200001bc 	.word	0x200001bc
 8001978:	200001da 	.word	0x200001da
 800197c:	200001db 	.word	0x200001db
 8001980:	200001d7 	.word	0x200001d7
 8001984:	200001bf 	.word	0x200001bf
 8001988:	2000000b 	.word	0x2000000b
 800198c:	200001c0 	.word	0x200001c0
 8001990:	2000000d 	.word	0x2000000d
 8001994:	200001c8 	.word	0x200001c8
 8001998:	2000000c 	.word	0x2000000c
 800199c:	200001c4 	.word	0x200001c4
 80019a0:	200001ce 	.word	0x200001ce
 80019a4:	200001ef 	.word	0x200001ef
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000014 	.word	0x20000014
            else if (action == EXIT_KEY)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f240 1205 	movw	r2, #261	@ 0x105
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d109      	bne.n	80019ce <Haamin_Remote+0x91e>
                timer_Mode = MAIN_FUNCTION;
 80019ba:	4b93      	ldr	r3, [pc, #588]	@ (8001c08 <Haamin_Remote+0xb58>)
 80019bc:	2266      	movs	r2, #102	@ 0x66
 80019be:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f001 f8bf 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80019c6:	2032      	movs	r0, #50	@ 0x32
 80019c8:	f005 f894 	bl	8006af4 <HAL_Delay>
 80019cc:	e0b1      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	f240 120f 	movw	r2, #271	@ 0x10f
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d024      	beq.n	8001a22 <Haamin_Remote+0x972>
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 80019de:	d020      	beq.n	8001a22 <Haamin_Remote+0x972>
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80019e6:	d01c      	beq.n	8001a22 <Haamin_Remote+0x972>
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80019ee:	d018      	beq.n	8001a22 <Haamin_Remote+0x972>
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 80019f6:	d014      	beq.n	8001a22 <Haamin_Remote+0x972>
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80019fe:	d010      	beq.n	8001a22 <Haamin_Remote+0x972>
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8001a06:	d00c      	beq.n	8001a22 <Haamin_Remote+0x972>
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8001a0e:	d008      	beq.n	8001a22 <Haamin_Remote+0x972>
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001a16:	d004      	beq.n	8001a22 <Haamin_Remote+0x972>
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8001a1e:	f040 8088 	bne.w	8001b32 <Haamin_Remote+0xa82>
                valueFeedback = Haamin_NumberKey(action);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 f82f 	bl	8002a88 <Haamin_NumberKey>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b77      	ldr	r3, [pc, #476]	@ (8001c0c <Haamin_Remote+0xb5c>)
 8001a30:	701a      	strb	r2, [r3, #0]
                timer_Value = ((valuSetting_tmp * 10) + valueFeedback);
 8001a32:	4b77      	ldr	r3, [pc, #476]	@ (8001c10 <Haamin_Remote+0xb60>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b72      	ldr	r3, [pc, #456]	@ (8001c0c <Haamin_Remote+0xb5c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b72      	ldr	r3, [pc, #456]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001a4a:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback; 
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c0c <Haamin_Remote+0xb5c>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b6f      	ldr	r3, [pc, #444]	@ (8001c10 <Haamin_Remote+0xb60>)
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e06d      	b.n	8001b32 <Haamin_Remote+0xa82>
            if(action == MUTE)
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	f240 1219 	movw	r2, #281	@ 0x119
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10b      	bne.n	8001a78 <Haamin_Remote+0x9c8>
                if(muteFlag)
 8001a60:	4b6d      	ldr	r3, [pc, #436]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <Haamin_Remote+0x9c0>
                    muteFlag = 0;
 8001a68:	4b6b      	ldr	r3, [pc, #428]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e060      	b.n	8001b32 <Haamin_Remote+0xa82>
                    muteFlag = 1;
 8001a70:	4b69      	ldr	r3, [pc, #420]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	e05c      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == INFO)
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	f240 1255 	movw	r2, #341	@ 0x155
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <Haamin_Remote+0x9ee>
                timer_Mode = SETTING;
 8001a82:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <Haamin_Remote+0xb58>)
 8001a84:	2273      	movs	r2, #115	@ 0x73
 8001a86:	701a      	strb	r2, [r3, #0]
                timer_Value = upTime_Minute_Defult;
 8001a88:	4b64      	ldr	r3, [pc, #400]	@ (8001c1c <Haamin_Remote+0xb6c>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001a8e:	701a      	strb	r2, [r3, #0]
                upTime_Second = 0;
 8001a90:	4b63      	ldr	r3, [pc, #396]	@ (8001c20 <Haamin_Remote+0xb70>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001a96:	4b63      	ldr	r3, [pc, #396]	@ (8001c24 <Haamin_Remote+0xb74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e049      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == RESET_KEY)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001aa4:	d112      	bne.n	8001acc <Haamin_Remote+0xa1c>
                upTime_Minute = 0;
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <Haamin_Remote+0xb78>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
                upTime_Second = 0;
 8001aac:	4b5c      	ldr	r3, [pc, #368]	@ (8001c20 <Haamin_Remote+0xb70>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
                timer_SrUpEn = 1;
 8001ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c2c <Haamin_Remote+0xb7c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c24 <Haamin_Remote+0xb74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 8001abe:	4b5c      	ldr	r3, [pc, #368]	@ (8001c30 <Haamin_Remote+0xb80>)
 8001ac0:	220b      	movs	r2, #11
 8001ac2:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c34 <Haamin_Remote+0xb84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	e032      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == PLAY_KEY)
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8001ad2:	d106      	bne.n	8001ae2 <Haamin_Remote+0xa32>
                timer_StartUp = 0;
 8001ad4:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <Haamin_Remote+0xb84>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
                timer_Run = 1;
 8001ada:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <Haamin_Remote+0xb74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	e027      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == PUSE_KEY)
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8001ae8:	d106      	bne.n	8001af8 <Haamin_Remote+0xa48>
                timer_StartUp = 0;
 8001aea:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <Haamin_Remote+0xb84>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001af0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c24 <Haamin_Remote+0xb74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e01c      	b.n	8001b32 <Haamin_Remote+0xa82>
            else if(action == EXIT_KEY)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f240 1205 	movw	r2, #261	@ 0x105
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d117      	bne.n	8001b32 <Haamin_Remote+0xa82>
                timer_SrUpEn = 1;
 8001b02:	4b4a      	ldr	r3, [pc, #296]	@ (8001c2c <Haamin_Remote+0xb7c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 8001b08:	4b4a      	ldr	r3, [pc, #296]	@ (8001c34 <Haamin_Remote+0xb84>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001b0e:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <Haamin_Remote+0xb74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
                upTime_Minute = 0;
 8001b14:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <Haamin_Remote+0xb78>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
                upTime_Second = 0;
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <Haamin_Remote+0xb70>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 8001b20:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <Haamin_Remote+0xb88>)
 8001b22:	2252      	movs	r2, #82	@ 0x52
 8001b24:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8001b26:	2032      	movs	r0, #50	@ 0x32
 8001b28:	f001 f80c 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8001b2c:	2032      	movs	r0, #50	@ 0x32
 8001b2e:	f004 ffe1 	bl	8006af4 <HAL_Delay>
        Buzz(100);
 8001b32:	2064      	movs	r0, #100	@ 0x64
 8001b34:	f001 f806 	bl	8002b44 <Buzz>
}
 8001b38:	f000 bf83 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if(workMode == DN_TIMER) 
 8001b3c:	797b      	ldrb	r3, [r7, #5]
 8001b3e:	2b64      	cmp	r3, #100	@ 0x64
 8001b40:	f040 8139 	bne.w	8001db6 <Haamin_Remote+0xd06>
        if(timer_Mode == SETTING)
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <Haamin_Remote+0xb58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b73      	cmp	r3, #115	@ 0x73
 8001b4a:	f040 80bf 	bne.w	8001ccc <Haamin_Remote+0xc1c>
            if(action == INCREASE)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001b54:	d10e      	bne.n	8001b74 <Haamin_Remote+0xac4>
                if(++timer_Value > 99)
 8001b56:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b63      	cmp	r3, #99	@ 0x63
 8001b68:	f240 8120 	bls.w	8001dac <Haamin_Remote+0xcfc>
                    timer_Value = 0;
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e11b      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == DECREASE)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8001b7a:	d10e      	bne.n	8001b9a <Haamin_Remote+0xaea>
                if(timer_Value == 0)
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <Haamin_Remote+0xadc>
                    timer_Value = 99;
 8001b84:	4b23      	ldr	r3, [pc, #140]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b86:	2263      	movs	r2, #99	@ 0x63
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e10f      	b.n	8001dac <Haamin_Remote+0xcfc>
                    timer_Value--;
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e108      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == MUTE)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f240 1219 	movw	r2, #281	@ 0x119
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d10b      	bne.n	8001bbc <Haamin_Remote+0xb0c>
                if(muteFlag)
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <Haamin_Remote+0xb04>
                    muteFlag = 0;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e0fb      	b.n	8001dac <Haamin_Remote+0xcfc>
                    muteFlag = 1;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <Haamin_Remote+0xb68>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
 8001bba:	e0f7      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if (action == OK_KEY)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8001bc2:	d112      	bne.n	8001bea <Haamin_Remote+0xb3a>
                dnTime_Minute_Defult = timer_Value;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <Haamin_Remote+0xb64>)
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <Haamin_Remote+0xb8c>)
 8001bca:	701a      	strb	r2, [r3, #0]
                dnTime_Minute = dnTime_Minute_Defult;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <Haamin_Remote+0xb8c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <Haamin_Remote+0xb90>)
 8001bd4:	601a      	str	r2, [r3, #0]
                timer_SrUpEn = 1;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <Haamin_Remote+0xb7c>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
                timer_Mode = MAIN_FUNCTION;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <Haamin_Remote+0xb58>)
 8001bde:	2266      	movs	r2, #102	@ 0x66
 8001be0:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <Haamin_Remote+0xb80>)
 8001be4:	220b      	movs	r2, #11
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e0e0      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if (action == EXIT_KEY)
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	f240 1205 	movw	r2, #261	@ 0x105
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d127      	bne.n	8001c44 <Haamin_Remote+0xb94>
                timer_Mode = MAIN_FUNCTION;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	@ (8001c08 <Haamin_Remote+0xb58>)
 8001bf6:	2266      	movs	r2, #102	@ 0x66
 8001bf8:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8001bfa:	2032      	movs	r0, #50	@ 0x32
 8001bfc:	f000 ffa2 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8001c00:	2032      	movs	r0, #50	@ 0x32
 8001c02:	f004 ff77 	bl	8006af4 <HAL_Delay>
 8001c06:	e0d1      	b.n	8001dac <Haamin_Remote+0xcfc>
 8001c08:	200001ec 	.word	0x200001ec
 8001c0c:	20000092 	.word	0x20000092
 8001c10:	20000090 	.word	0x20000090
 8001c14:	200001ef 	.word	0x200001ef
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000014 	.word	0x20000014
 8001c20:	200001dd 	.word	0x200001dd
 8001c24:	200001ee 	.word	0x200001ee
 8001c28:	200001de 	.word	0x200001de
 8001c2c:	20000016 	.word	0x20000016
 8001c30:	200001eb 	.word	0x200001eb
 8001c34:	200001ed 	.word	0x200001ed
 8001c38:	20000001 	.word	0x20000001
 8001c3c:	20000015 	.word	0x20000015
 8001c40:	200001e4 	.word	0x200001e4
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	f240 120f 	movw	r2, #271	@ 0x10f
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d024      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 8001c54:	d020      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8001c5c:	d01c      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001c64:	d018      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8001c6c:	d014      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8001c74:	d010      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8001c7c:	d00c      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8001c84:	d008      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001c8c:	d004      	beq.n	8001c98 <Haamin_Remote+0xbe8>
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8001c94:	f040 808a 	bne.w	8001dac <Haamin_Remote+0xcfc>
                valueFeedback = Haamin_NumberKey(action);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fef4 	bl	8002a88 <Haamin_NumberKey>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <Haamin_Remote+0xe28>)
 8001ca6:	701a      	strb	r2, [r3, #0]
                timer_Value = ((valuSetting_tmp * 10) + valueFeedback);
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8001edc <Haamin_Remote+0xe2c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b88      	ldr	r3, [pc, #544]	@ (8001ed8 <Haamin_Remote+0xe28>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b88      	ldr	r3, [pc, #544]	@ (8001ee0 <Haamin_Remote+0xe30>)
 8001cc0:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback; 
 8001cc2:	4b85      	ldr	r3, [pc, #532]	@ (8001ed8 <Haamin_Remote+0xe28>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b85      	ldr	r3, [pc, #532]	@ (8001edc <Haamin_Remote+0xe2c>)
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e06f      	b.n	8001dac <Haamin_Remote+0xcfc>
            if(action == MUTE)
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	f240 1219 	movw	r2, #281	@ 0x119
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10b      	bne.n	8001cee <Haamin_Remote+0xc3e>
                if(muteFlag)
 8001cd6:	4b83      	ldr	r3, [pc, #524]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <Haamin_Remote+0xc36>
                    muteFlag = 0;
 8001cde:	4b81      	ldr	r3, [pc, #516]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e062      	b.n	8001dac <Haamin_Remote+0xcfc>
                    muteFlag = 1;
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e05e      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == INFO)
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f240 1255 	movw	r2, #341	@ 0x155
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d10d      	bne.n	8001d14 <Haamin_Remote+0xc64>
                timer_Mode = SETTING;
 8001cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ee8 <Haamin_Remote+0xe38>)
 8001cfa:	2273      	movs	r2, #115	@ 0x73
 8001cfc:	701a      	strb	r2, [r3, #0]
                timer_Value = dnTime_Minute_Defult;
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8001eec <Haamin_Remote+0xe3c>)
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b77      	ldr	r3, [pc, #476]	@ (8001ee0 <Haamin_Remote+0xe30>)
 8001d04:	701a      	strb	r2, [r3, #0]
                dnTime_Second = 0;
 8001d06:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <Haamin_Remote+0xe40>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
                timer_Run = 0;
 8001d0c:	4b79      	ldr	r3, [pc, #484]	@ (8001ef4 <Haamin_Remote+0xe44>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e04b      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == RESET_KEY)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d1a:	d114      	bne.n	8001d46 <Haamin_Remote+0xc96>
                dnTime_Minute = dnTime_Minute_Defult;
 8001d1c:	4b73      	ldr	r3, [pc, #460]	@ (8001eec <Haamin_Remote+0xe3c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b75      	ldr	r3, [pc, #468]	@ (8001ef8 <Haamin_Remote+0xe48>)
 8001d24:	601a      	str	r2, [r3, #0]
                dnTime_Second = 0;
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <Haamin_Remote+0xe40>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
                timer_Run = 0;
 8001d2c:	4b71      	ldr	r3, [pc, #452]	@ (8001ef4 <Haamin_Remote+0xe44>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
                timer_TimeStarting = 11;
 8001d32:	4b72      	ldr	r3, [pc, #456]	@ (8001efc <Haamin_Remote+0xe4c>)
 8001d34:	220b      	movs	r2, #11
 8001d36:	701a      	strb	r2, [r3, #0]
                timer_SrUpEn = 1;
 8001d38:	4b71      	ldr	r3, [pc, #452]	@ (8001f00 <Haamin_Remote+0xe50>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 8001d3e:	4b71      	ldr	r3, [pc, #452]	@ (8001f04 <Haamin_Remote+0xe54>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e032      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == PLAY_KEY)
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8001d4c:	d106      	bne.n	8001d5c <Haamin_Remote+0xcac>
                timer_StartUp = 0;
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f04 <Haamin_Remote+0xe54>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
                timer_Run = 1;
 8001d54:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <Haamin_Remote+0xe44>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e027      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == PUSE_KEY)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8001d62:	d106      	bne.n	8001d72 <Haamin_Remote+0xcc2>
                timer_StartUp = 0;
 8001d64:	4b67      	ldr	r3, [pc, #412]	@ (8001f04 <Haamin_Remote+0xe54>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001d6a:	4b62      	ldr	r3, [pc, #392]	@ (8001ef4 <Haamin_Remote+0xe44>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e01c      	b.n	8001dac <Haamin_Remote+0xcfc>
            else if(action == EXIT_KEY)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f240 1205 	movw	r2, #261	@ 0x105
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d117      	bne.n	8001dac <Haamin_Remote+0xcfc>
                timer_SrUpEn = 1;
 8001d7c:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <Haamin_Remote+0xe50>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 8001d82:	4b60      	ldr	r3, [pc, #384]	@ (8001f04 <Haamin_Remote+0xe54>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
                timer_Run = 0;
 8001d88:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef4 <Haamin_Remote+0xe44>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
                dnTime_Minute = 0;
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <Haamin_Remote+0xe48>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
                dnTime_Second = 0;
 8001d94:	4b56      	ldr	r3, [pc, #344]	@ (8001ef0 <Haamin_Remote+0xe40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <Haamin_Remote+0xe58>)
 8001d9c:	2252      	movs	r2, #82	@ 0x52
 8001d9e:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8001da0:	2032      	movs	r0, #50	@ 0x32
 8001da2:	f000 fecf 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8001da6:	2032      	movs	r0, #50	@ 0x32
 8001da8:	f004 fea4 	bl	8006af4 <HAL_Delay>
        Buzz(100);
 8001dac:	2064      	movs	r0, #100	@ 0x64
 8001dae:	f000 fec9 	bl	8002b44 <Buzz>
}
 8001db2:	f000 be46 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == TABATA)
 8001db6:	4b54      	ldr	r3, [pc, #336]	@ (8001f08 <Haamin_Remote+0xe58>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b74      	cmp	r3, #116	@ 0x74
 8001dbc:	f040 8173 	bne.w	80020a6 <Haamin_Remote+0xff6>
        if(cross_Mode == SETTING)
 8001dc0:	4b52      	ldr	r3, [pc, #328]	@ (8001f0c <Haamin_Remote+0xe5c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b73      	cmp	r3, #115	@ 0x73
 8001dc6:	f040 80f7 	bne.w	8001fb8 <Haamin_Remote+0xf08>
            if(action == INCREASE)
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001dd0:	d10e      	bne.n	8001df0 <Haamin_Remote+0xd40>
                if(++cross_Value > 99)
 8001dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b4d      	ldr	r3, [pc, #308]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	4b4c      	ldr	r3, [pc, #304]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b63      	cmp	r3, #99	@ 0x63
 8001de4:	f240 815a 	bls.w	800209c <Haamin_Remote+0xfec>
                    cross_Value = 0;
 8001de8:	4b49      	ldr	r3, [pc, #292]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e155      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == DECREASE)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8001df6:	d10e      	bne.n	8001e16 <Haamin_Remote+0xd66>
                if(cross_Value == 0)
 8001df8:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <Haamin_Remote+0xd58>
                    cross_Value = 99;
 8001e00:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e02:	2263      	movs	r2, #99	@ 0x63
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e149      	b.n	800209c <Haamin_Remote+0xfec>
                    cross_Value--;
 8001e08:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b3f      	ldr	r3, [pc, #252]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e142      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == MUTE)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f240 1219 	movw	r2, #281	@ 0x119
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d10b      	bne.n	8001e38 <Haamin_Remote+0xd88>
                if(muteFlag)
 8001e20:	4b30      	ldr	r3, [pc, #192]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <Haamin_Remote+0xd80>
                    muteFlag = 0;
 8001e28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e135      	b.n	800209c <Haamin_Remote+0xfec>
                    muteFlag = 1;
 8001e30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <Haamin_Remote+0xe34>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	e131      	b.n	800209c <Haamin_Remote+0xfec>
            else if (action == OK_KEY)
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8001e3e:	d13b      	bne.n	8001eb8 <Haamin_Remote+0xe08>
                if(tabata_Mode == ROUND)
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b72      	cmp	r3, #114	@ 0x72
 8001e46:	d10b      	bne.n	8001e60 <Haamin_Remote+0xdb0>
                    tabata_Round_Def = cross_Value;
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <Haamin_Remote+0xe68>)
 8001e4e:	701a      	strb	r2, [r3, #0]
                    cross_Value = tabata_Act_Def;
 8001e50:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <Haamin_Remote+0xe6c>)
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e56:	701a      	strb	r2, [r3, #0]
                    tabata_Mode = ACT;
 8001e58:	4b2e      	ldr	r3, [pc, #184]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001e5a:	2269      	movs	r2, #105	@ 0x69
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e11d      	b.n	800209c <Haamin_Remote+0xfec>
                else if(tabata_Mode == ACT)
 8001e60:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b69      	cmp	r3, #105	@ 0x69
 8001e66:	d10b      	bne.n	8001e80 <Haamin_Remote+0xdd0>
                    tabata_Act_Def = cross_Value;
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f1c <Haamin_Remote+0xe6c>)
 8001e6e:	701a      	strb	r2, [r3, #0]
                    cross_Value = tabata_Rest_Def;
 8001e70:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <Haamin_Remote+0xe70>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e76:	701a      	strb	r2, [r3, #0]
                    tabata_Mode = REST;
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001e7a:	2245      	movs	r2, #69	@ 0x45
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e10d      	b.n	800209c <Haamin_Remote+0xfec>
                else if(tabata_Mode == REST)
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b45      	cmp	r3, #69	@ 0x45
 8001e86:	f040 8109 	bne.w	800209c <Haamin_Remote+0xfec>
                    tabata_Rest_Def = cross_Value;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <Haamin_Remote+0xe60>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <Haamin_Remote+0xe70>)
 8001e90:	701a      	strb	r2, [r3, #0]
                    tabata_Round = tabata_Round_Def;
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <Haamin_Remote+0xe68>)
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <Haamin_Remote+0xe74>)
 8001e98:	701a      	strb	r2, [r3, #0]
                    tabata_Act = tabata_Act_Def;
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <Haamin_Remote+0xe6c>)
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <Haamin_Remote+0xe78>)
 8001ea0:	701a      	strb	r2, [r3, #0]
                    tabata_Rest = tabata_Rest_Def;
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <Haamin_Remote+0xe70>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <Haamin_Remote+0xe7c>)
 8001ea8:	701a      	strb	r2, [r3, #0]
                    tabata_Mode = ROUND;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001eac:	2272      	movs	r2, #114	@ 0x72
 8001eae:	701a      	strb	r2, [r3, #0]
                    cross_Mode = MAIN_FUNCTION;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <Haamin_Remote+0xe5c>)
 8001eb2:	2266      	movs	r2, #102	@ 0x66
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e0f1      	b.n	800209c <Haamin_Remote+0xfec>
            else if (action == EXIT_KEY)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f240 1205 	movw	r2, #261	@ 0x105
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d136      	bne.n	8001f30 <Haamin_Remote+0xe80>
                tabata_Mode = MAIN_FUNCTION;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <Haamin_Remote+0xe64>)
 8001ec4:	2266      	movs	r2, #102	@ 0x66
 8001ec6:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8001ec8:	2032      	movs	r0, #50	@ 0x32
 8001eca:	f000 fe3b 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8001ece:	2032      	movs	r0, #50	@ 0x32
 8001ed0:	f004 fe10 	bl	8006af4 <HAL_Delay>
 8001ed4:	e0e2      	b.n	800209c <Haamin_Remote+0xfec>
 8001ed6:	bf00      	nop
 8001ed8:	20000092 	.word	0x20000092
 8001edc:	20000090 	.word	0x20000090
 8001ee0:	200001ef 	.word	0x200001ef
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	200001ec 	.word	0x200001ec
 8001eec:	20000015 	.word	0x20000015
 8001ef0:	200001e0 	.word	0x200001e0
 8001ef4:	200001ee 	.word	0x200001ee
 8001ef8:	200001e4 	.word	0x200001e4
 8001efc:	200001eb 	.word	0x200001eb
 8001f00:	20000016 	.word	0x20000016
 8001f04:	200001ed 	.word	0x200001ed
 8001f08:	20000001 	.word	0x20000001
 8001f0c:	200001d8 	.word	0x200001d8
 8001f10:	200001dc 	.word	0x200001dc
 8001f14:	200001bd 	.word	0x200001bd
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000007 	.word	0x20000007
 8001f20:	20000009 	.word	0x20000009
 8001f24:	200001bb 	.word	0x200001bb
 8001f28:	200001ba 	.word	0x200001ba
 8001f2c:	200001bc 	.word	0x200001bc
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	f240 120f 	movw	r2, #271	@ 0x10f
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d024      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 8001f40:	d020      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8001f48:	d01c      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001f50:	d018      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8001f58:	d014      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8001f60:	d010      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8001f68:	d00c      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8001f70:	d008      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001f78:	d004      	beq.n	8001f84 <Haamin_Remote+0xed4>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8001f80:	f040 808c 	bne.w	800209c <Haamin_Remote+0xfec>
                valueFeedback = Haamin_NumberKey(action);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fd7e 	bl	8002a88 <Haamin_NumberKey>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b9e      	ldr	r3, [pc, #632]	@ (800220c <Haamin_Remote+0x115c>)
 8001f92:	701a      	strb	r2, [r3, #0]
                cross_Value = ((valuSetting_tmp * 10) + valueFeedback);
 8001f94:	4b9e      	ldr	r3, [pc, #632]	@ (8002210 <Haamin_Remote+0x1160>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b9a      	ldr	r3, [pc, #616]	@ (800220c <Haamin_Remote+0x115c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b9a      	ldr	r3, [pc, #616]	@ (8002214 <Haamin_Remote+0x1164>)
 8001fac:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback; 
 8001fae:	4b97      	ldr	r3, [pc, #604]	@ (800220c <Haamin_Remote+0x115c>)
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	4b97      	ldr	r3, [pc, #604]	@ (8002210 <Haamin_Remote+0x1160>)
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e071      	b.n	800209c <Haamin_Remote+0xfec>
        else if(cross_Mode == MAIN_FUNCTION)
 8001fb8:	4b97      	ldr	r3, [pc, #604]	@ (8002218 <Haamin_Remote+0x1168>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b66      	cmp	r3, #102	@ 0x66
 8001fbe:	d16d      	bne.n	800209c <Haamin_Remote+0xfec>
            if(action == MUTE)
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	f240 1219 	movw	r2, #281	@ 0x119
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <Haamin_Remote+0xf32>
                if(muteFlag)
 8001fca:	4b94      	ldr	r3, [pc, #592]	@ (800221c <Haamin_Remote+0x116c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <Haamin_Remote+0xf2a>
                    muteFlag = 0;
 8001fd2:	4b92      	ldr	r3, [pc, #584]	@ (800221c <Haamin_Remote+0x116c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e060      	b.n	800209c <Haamin_Remote+0xfec>
                    muteFlag = 1;
 8001fda:	4b90      	ldr	r3, [pc, #576]	@ (800221c <Haamin_Remote+0x116c>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e05c      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == INFO)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	f240 1255 	movw	r2, #341	@ 0x155
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10d      	bne.n	8002008 <Haamin_Remote+0xf58>
                cross_Mode = SETTING;
 8001fec:	4b8a      	ldr	r3, [pc, #552]	@ (8002218 <Haamin_Remote+0x1168>)
 8001fee:	2273      	movs	r2, #115	@ 0x73
 8001ff0:	701a      	strb	r2, [r3, #0]
                tabata_Mode = ROUND;
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	@ (8002220 <Haamin_Remote+0x1170>)
 8001ff4:	2272      	movs	r2, #114	@ 0x72
 8001ff6:	701a      	strb	r2, [r3, #0]
                cross_Value = tabata_Round_Def;
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8002224 <Haamin_Remote+0x1174>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b85      	ldr	r3, [pc, #532]	@ (8002214 <Haamin_Remote+0x1164>)
 8001ffe:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002000:	4b89      	ldr	r3, [pc, #548]	@ (8002228 <Haamin_Remote+0x1178>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e049      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == RESET_KEY)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800200e:	d118      	bne.n	8002042 <Haamin_Remote+0xf92>
                tabata_Round = tabata_Round_Def;
 8002010:	4b84      	ldr	r3, [pc, #528]	@ (8002224 <Haamin_Remote+0x1174>)
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	4b85      	ldr	r3, [pc, #532]	@ (800222c <Haamin_Remote+0x117c>)
 8002016:	701a      	strb	r2, [r3, #0]
                tabata_Act = tabata_Act_Def;
 8002018:	4b85      	ldr	r3, [pc, #532]	@ (8002230 <Haamin_Remote+0x1180>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b85      	ldr	r3, [pc, #532]	@ (8002234 <Haamin_Remote+0x1184>)
 800201e:	701a      	strb	r2, [r3, #0]
                tabata_Rest = tabata_Rest_Def;
 8002020:	4b85      	ldr	r3, [pc, #532]	@ (8002238 <Haamin_Remote+0x1188>)
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	4b85      	ldr	r3, [pc, #532]	@ (800223c <Haamin_Remote+0x118c>)
 8002026:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 1;
 8002028:	4b85      	ldr	r3, [pc, #532]	@ (8002240 <Haamin_Remote+0x1190>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 800202e:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <Haamin_Remote+0x1178>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 8002034:	4b83      	ldr	r3, [pc, #524]	@ (8002244 <Haamin_Remote+0x1194>)
 8002036:	220b      	movs	r2, #11
 8002038:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 800203a:	4b83      	ldr	r3, [pc, #524]	@ (8002248 <Haamin_Remote+0x1198>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e02c      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == PLAY_KEY)
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8002048:	d106      	bne.n	8002058 <Haamin_Remote+0xfa8>
                cross_StartUp = 0;
 800204a:	4b7f      	ldr	r3, [pc, #508]	@ (8002248 <Haamin_Remote+0x1198>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
                cross_Run = 1;
 8002050:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <Haamin_Remote+0x1178>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	e021      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == PUSE_KEY)
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 800205e:	d106      	bne.n	800206e <Haamin_Remote+0xfbe>
                cross_StartUp = 0;
 8002060:	4b79      	ldr	r3, [pc, #484]	@ (8002248 <Haamin_Remote+0x1198>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002066:	4b70      	ldr	r3, [pc, #448]	@ (8002228 <Haamin_Remote+0x1178>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e016      	b.n	800209c <Haamin_Remote+0xfec>
            else if(action == EXIT_KEY)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	f240 1205 	movw	r2, #261	@ 0x105
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <Haamin_Remote+0xfec>
                cross_SrUpEn = 1;
 8002078:	4b71      	ldr	r3, [pc, #452]	@ (8002240 <Haamin_Remote+0x1190>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 800207e:	4b72      	ldr	r3, [pc, #456]	@ (8002248 <Haamin_Remote+0x1198>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002084:	4b68      	ldr	r3, [pc, #416]	@ (8002228 <Haamin_Remote+0x1178>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 800208a:	4b70      	ldr	r3, [pc, #448]	@ (800224c <Haamin_Remote+0x119c>)
 800208c:	2252      	movs	r2, #82	@ 0x52
 800208e:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8002090:	2032      	movs	r0, #50	@ 0x32
 8002092:	f000 fd57 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8002096:	2032      	movs	r0, #50	@ 0x32
 8002098:	f004 fd2c 	bl	8006af4 <HAL_Delay>
        Buzz(100);
 800209c:	2064      	movs	r0, #100	@ 0x64
 800209e:	f000 fd51 	bl	8002b44 <Buzz>
}
 80020a2:	f000 bcce 	b.w	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == EMOM)
 80020a6:	4b69      	ldr	r3, [pc, #420]	@ (800224c <Haamin_Remote+0x119c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b65      	cmp	r3, #101	@ 0x65
 80020ac:	f040 8195 	bne.w	80023da <Haamin_Remote+0x132a>
        if(cross_Mode == MAIN_FUNCTION)
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <Haamin_Remote+0x1168>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b66      	cmp	r3, #102	@ 0x66
 80020b6:	d17d      	bne.n	80021b4 <Haamin_Remote+0x1104>
            if(action == MUTE)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f240 1219 	movw	r2, #281	@ 0x119
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10b      	bne.n	80020da <Haamin_Remote+0x102a>
                if(muteFlag)
 80020c2:	4b56      	ldr	r3, [pc, #344]	@ (800221c <Haamin_Remote+0x116c>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <Haamin_Remote+0x1022>
                    muteFlag = 0;
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <Haamin_Remote+0x116c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e06c      	b.n	80021ac <Haamin_Remote+0x10fc>
                    muteFlag = 1;
 80020d2:	4b52      	ldr	r3, [pc, #328]	@ (800221c <Haamin_Remote+0x116c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e068      	b.n	80021ac <Haamin_Remote+0x10fc>
            else if(action == INFO)
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f240 1255 	movw	r2, #341	@ 0x155
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10d      	bne.n	8002100 <Haamin_Remote+0x1050>
                cross_Mode = SETTING;
 80020e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <Haamin_Remote+0x1168>)
 80020e6:	2273      	movs	r2, #115	@ 0x73
 80020e8:	701a      	strb	r2, [r3, #0]
                emom_Mode = ROUND;
 80020ea:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <Haamin_Remote+0x11a0>)
 80020ec:	2272      	movs	r2, #114	@ 0x72
 80020ee:	701a      	strb	r2, [r3, #0]
                cross_Value = emom_Round_Def;
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <Haamin_Remote+0x11a4>)
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <Haamin_Remote+0x1164>)
 80020f6:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 80020f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <Haamin_Remote+0x1178>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e055      	b.n	80021ac <Haamin_Remote+0x10fc>
            else if(action == RESET_KEY)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002106:	d124      	bne.n	8002152 <Haamin_Remote+0x10a2>
                emom_Round = emom_Round_Def;
 8002108:	4b52      	ldr	r3, [pc, #328]	@ (8002254 <Haamin_Remote+0x11a4>)
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b52      	ldr	r3, [pc, #328]	@ (8002258 <Haamin_Remote+0x11a8>)
 800210e:	701a      	strb	r2, [r3, #0]
                emom_Act = emom_Act_Def;
 8002110:	4b52      	ldr	r3, [pc, #328]	@ (800225c <Haamin_Remote+0x11ac>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b52      	ldr	r3, [pc, #328]	@ (8002260 <Haamin_Remote+0x11b0>)
 8002116:	701a      	strb	r2, [r3, #0]
                emom_Time = emom_Time_Def;
 8002118:	4b52      	ldr	r3, [pc, #328]	@ (8002264 <Haamin_Remote+0x11b4>)
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	4b52      	ldr	r3, [pc, #328]	@ (8002268 <Haamin_Remote+0x11b8>)
 800211e:	701a      	strb	r2, [r3, #0]
                emom_Time_tmp = (emom_Time * 60);
 8002120:	4b51      	ldr	r3, [pc, #324]	@ (8002268 <Haamin_Remote+0x11b8>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b4f      	ldr	r3, [pc, #316]	@ (800226c <Haamin_Remote+0x11bc>)
 8002130:	701a      	strb	r2, [r3, #0]
                emom_Mode = 1;
 8002132:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <Haamin_Remote+0x11a0>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 1;
 8002138:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <Haamin_Remote+0x1190>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <Haamin_Remote+0x1178>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 8002144:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <Haamin_Remote+0x1194>)
 8002146:	220b      	movs	r2, #11
 8002148:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 800214a:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <Haamin_Remote+0x1198>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e02c      	b.n	80021ac <Haamin_Remote+0x10fc>
            else if(action == PLAY_KEY)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8002158:	d106      	bne.n	8002168 <Haamin_Remote+0x10b8>
                cross_StartUp = 0;
 800215a:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <Haamin_Remote+0x1198>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
                cross_Run = 1;
 8002160:	4b31      	ldr	r3, [pc, #196]	@ (8002228 <Haamin_Remote+0x1178>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e021      	b.n	80021ac <Haamin_Remote+0x10fc>
            else if(action == PUSE_KEY)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 800216e:	d106      	bne.n	800217e <Haamin_Remote+0x10ce>
                cross_StartUp = 0;
 8002170:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <Haamin_Remote+0x1198>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002176:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <Haamin_Remote+0x1178>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e016      	b.n	80021ac <Haamin_Remote+0x10fc>
            else if(action == EXIT_KEY)
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f240 1205 	movw	r2, #261	@ 0x105
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <Haamin_Remote+0x10fc>
                cross_SrUpEn = 1;
 8002188:	4b2d      	ldr	r3, [pc, #180]	@ (8002240 <Haamin_Remote+0x1190>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <Haamin_Remote+0x1198>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <Haamin_Remote+0x1178>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 800219a:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <Haamin_Remote+0x119c>)
 800219c:	2252      	movs	r2, #82	@ 0x52
 800219e:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80021a0:	2032      	movs	r0, #50	@ 0x32
 80021a2:	f000 fccf 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80021a6:	2032      	movs	r0, #50	@ 0x32
 80021a8:	f004 fca4 	bl	8006af4 <HAL_Delay>
            Buzz(100);
 80021ac:	2064      	movs	r0, #100	@ 0x64
 80021ae:	f000 fcc9 	bl	8002b44 <Buzz>
 80021b2:	e10e      	b.n	80023d2 <Haamin_Remote+0x1322>
        else if(cross_Mode == SETTING)
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <Haamin_Remote+0x1168>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b73      	cmp	r3, #115	@ 0x73
 80021ba:	f040 810a 	bne.w	80023d2 <Haamin_Remote+0x1322>
            if(action == INCREASE)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80021c4:	d10e      	bne.n	80021e4 <Haamin_Remote+0x1134>
                if(++cross_Value > 99)
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <Haamin_Remote+0x1164>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <Haamin_Remote+0x1164>)
 80021d0:	701a      	strb	r2, [r3, #0]
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <Haamin_Remote+0x1164>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b63      	cmp	r3, #99	@ 0x63
 80021d8:	f240 80fb 	bls.w	80023d2 <Haamin_Remote+0x1322>
                    cross_Value = 0;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <Haamin_Remote+0x1164>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e0f6      	b.n	80023d2 <Haamin_Remote+0x1322>
            else if(action == DECREASE)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80021ea:	d141      	bne.n	8002270 <Haamin_Remote+0x11c0>
                if(cross_Value == 0)
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <Haamin_Remote+0x1164>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <Haamin_Remote+0x114c>
                    cross_Value = 99;
 80021f4:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <Haamin_Remote+0x1164>)
 80021f6:	2263      	movs	r2, #99	@ 0x63
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e0ea      	b.n	80023d2 <Haamin_Remote+0x1322>
                    cross_Value--;
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <Haamin_Remote+0x1164>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b03      	ldr	r3, [pc, #12]	@ (8002214 <Haamin_Remote+0x1164>)
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e0e3      	b.n	80023d2 <Haamin_Remote+0x1322>
 800220a:	bf00      	nop
 800220c:	20000092 	.word	0x20000092
 8002210:	20000090 	.word	0x20000090
 8002214:	200001dc 	.word	0x200001dc
 8002218:	200001d8 	.word	0x200001d8
 800221c:	20000000 	.word	0x20000000
 8002220:	200001bd 	.word	0x200001bd
 8002224:	20000008 	.word	0x20000008
 8002228:	200001da 	.word	0x200001da
 800222c:	200001bb 	.word	0x200001bb
 8002230:	20000007 	.word	0x20000007
 8002234:	200001ba 	.word	0x200001ba
 8002238:	20000009 	.word	0x20000009
 800223c:	200001bc 	.word	0x200001bc
 8002240:	200001db 	.word	0x200001db
 8002244:	200001d7 	.word	0x200001d7
 8002248:	200001d9 	.word	0x200001d9
 800224c:	20000001 	.word	0x20000001
 8002250:	200001c3 	.word	0x200001c3
 8002254:	2000000a 	.word	0x2000000a
 8002258:	200001bf 	.word	0x200001bf
 800225c:	200001c1 	.word	0x200001c1
 8002260:	200001be 	.word	0x200001be
 8002264:	2000000b 	.word	0x2000000b
 8002268:	200001c0 	.word	0x200001c0
 800226c:	200001c2 	.word	0x200001c2
            else if(action == MUTE)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f240 1219 	movw	r2, #281	@ 0x119
 8002276:	4293      	cmp	r3, r2
 8002278:	d10b      	bne.n	8002292 <Haamin_Remote+0x11e2>
                if(muteFlag)
 800227a:	4ba0      	ldr	r3, [pc, #640]	@ (80024fc <Haamin_Remote+0x144c>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <Haamin_Remote+0x11da>
                    muteFlag = 0;
 8002282:	4b9e      	ldr	r3, [pc, #632]	@ (80024fc <Haamin_Remote+0x144c>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e0a3      	b.n	80023d2 <Haamin_Remote+0x1322>
                    muteFlag = 1;
 800228a:	4b9c      	ldr	r3, [pc, #624]	@ (80024fc <Haamin_Remote+0x144c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e09f      	b.n	80023d2 <Haamin_Remote+0x1322>
            else if (action == OK_KEY)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8002298:	d14a      	bne.n	8002330 <Haamin_Remote+0x1280>
                if(emom_Mode == ROUND)
 800229a:	4b99      	ldr	r3, [pc, #612]	@ (8002500 <Haamin_Remote+0x1450>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b72      	cmp	r3, #114	@ 0x72
 80022a0:	d10b      	bne.n	80022ba <Haamin_Remote+0x120a>
                    emom_Round_Def = cross_Value;
 80022a2:	4b98      	ldr	r3, [pc, #608]	@ (8002504 <Haamin_Remote+0x1454>)
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	4b98      	ldr	r3, [pc, #608]	@ (8002508 <Haamin_Remote+0x1458>)
 80022a8:	701a      	strb	r2, [r3, #0]
                    cross_Value = emom_Time_Def;
 80022aa:	4b98      	ldr	r3, [pc, #608]	@ (800250c <Haamin_Remote+0x145c>)
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	4b95      	ldr	r3, [pc, #596]	@ (8002504 <Haamin_Remote+0x1454>)
 80022b0:	701a      	strb	r2, [r3, #0]
                    emom_Mode = ACT;
 80022b2:	4b93      	ldr	r3, [pc, #588]	@ (8002500 <Haamin_Remote+0x1450>)
 80022b4:	2269      	movs	r2, #105	@ 0x69
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e08b      	b.n	80023d2 <Haamin_Remote+0x1322>
                else if(emom_Mode == ACT)
 80022ba:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <Haamin_Remote+0x1450>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b69      	cmp	r3, #105	@ 0x69
 80022c0:	f040 8087 	bne.w	80023d2 <Haamin_Remote+0x1322>
                    emom_Time_Def = cross_Value;
 80022c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002504 <Haamin_Remote+0x1454>)
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	4b90      	ldr	r3, [pc, #576]	@ (800250c <Haamin_Remote+0x145c>)
 80022ca:	701a      	strb	r2, [r3, #0]
                    emom_Round = emom_Round_Def;
 80022cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002508 <Haamin_Remote+0x1458>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002510 <Haamin_Remote+0x1460>)
 80022d2:	701a      	strb	r2, [r3, #0]
                    emom_Time = emom_Time_Def;
 80022d4:	4b8d      	ldr	r3, [pc, #564]	@ (800250c <Haamin_Remote+0x145c>)
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002514 <Haamin_Remote+0x1464>)
 80022da:	701a      	strb	r2, [r3, #0]
                    emom_Act = (emom_Time * 60) / emom_Round;
 80022dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002514 <Haamin_Remote+0x1464>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b88      	ldr	r3, [pc, #544]	@ (8002510 <Haamin_Remote+0x1460>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b88      	ldr	r3, [pc, #544]	@ (8002518 <Haamin_Remote+0x1468>)
 80022f8:	701a      	strb	r2, [r3, #0]
                    if(emom_Act > 99)
 80022fa:	4b87      	ldr	r3, [pc, #540]	@ (8002518 <Haamin_Remote+0x1468>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b63      	cmp	r3, #99	@ 0x63
 8002300:	d902      	bls.n	8002308 <Haamin_Remote+0x1258>
                        emom_Act = 99;
 8002302:	4b85      	ldr	r3, [pc, #532]	@ (8002518 <Haamin_Remote+0x1468>)
 8002304:	2263      	movs	r2, #99	@ 0x63
 8002306:	701a      	strb	r2, [r3, #0]
                    emom_Act_Def = emom_Act;
 8002308:	4b83      	ldr	r3, [pc, #524]	@ (8002518 <Haamin_Remote+0x1468>)
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b83      	ldr	r3, [pc, #524]	@ (800251c <Haamin_Remote+0x146c>)
 800230e:	701a      	strb	r2, [r3, #0]
                    emom_Time_tmp = (emom_Time * 60);
 8002310:	4b80      	ldr	r3, [pc, #512]	@ (8002514 <Haamin_Remote+0x1464>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	0112      	lsls	r2, r2, #4
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b80      	ldr	r3, [pc, #512]	@ (8002520 <Haamin_Remote+0x1470>)
 8002320:	701a      	strb	r2, [r3, #0]
                    cross_Mode = MAIN_FUNCTION;
 8002322:	4b80      	ldr	r3, [pc, #512]	@ (8002524 <Haamin_Remote+0x1474>)
 8002324:	2266      	movs	r2, #102	@ 0x66
 8002326:	701a      	strb	r2, [r3, #0]
                    emom_Mode = 1;
 8002328:	4b75      	ldr	r3, [pc, #468]	@ (8002500 <Haamin_Remote+0x1450>)
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e050      	b.n	80023d2 <Haamin_Remote+0x1322>
            else if (action == EXIT_KEY)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f240 1205 	movw	r2, #261	@ 0x105
 8002336:	4293      	cmp	r3, r2
 8002338:	d109      	bne.n	800234e <Haamin_Remote+0x129e>
                emom_Mode = MAIN_FUNCTION;
 800233a:	4b71      	ldr	r3, [pc, #452]	@ (8002500 <Haamin_Remote+0x1450>)
 800233c:	2266      	movs	r2, #102	@ 0x66
 800233e:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8002340:	2032      	movs	r0, #50	@ 0x32
 8002342:	f000 fbff 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 8002346:	2032      	movs	r0, #50	@ 0x32
 8002348:	f004 fbd4 	bl	8006af4 <HAL_Delay>
 800234c:	e041      	b.n	80023d2 <Haamin_Remote+0x1322>
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	f240 120f 	movw	r2, #271	@ 0x10f
 8002354:	4293      	cmp	r3, r2
 8002356:	d023      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 800235e:	d01f      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8002366:	d01b      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800236e:	d017      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8002376:	d013      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800237e:	d00f      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002386:	d00b      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800238e:	d007      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8002396:	d003      	beq.n	80023a0 <Haamin_Remote+0x12f0>
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800239e:	d118      	bne.n	80023d2 <Haamin_Remote+0x1322>
                valueFeedback = Haamin_NumberKey(action);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fb70 	bl	8002a88 <Haamin_NumberKey>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002528 <Haamin_Remote+0x1478>)
 80023ae:	701a      	strb	r2, [r3, #0]
                cross_Value = ((valuSetting_tmp * 10) + valueFeedback);
 80023b0:	4b5e      	ldr	r3, [pc, #376]	@ (800252c <Haamin_Remote+0x147c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b5a      	ldr	r3, [pc, #360]	@ (8002528 <Haamin_Remote+0x1478>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002504 <Haamin_Remote+0x1454>)
 80023c8:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback; 
 80023ca:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <Haamin_Remote+0x1478>)
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b57      	ldr	r3, [pc, #348]	@ (800252c <Haamin_Remote+0x147c>)
 80023d0:	701a      	strb	r2, [r3, #0]
        Buzz(100);
 80023d2:	2064      	movs	r0, #100	@ 0x64
 80023d4:	f000 fbb6 	bl	8002b44 <Buzz>
}
 80023d8:	e333      	b.n	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == AMRAP)
 80023da:	4b55      	ldr	r3, [pc, #340]	@ (8002530 <Haamin_Remote+0x1480>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b61      	cmp	r3, #97	@ 0x61
 80023e0:	f040 815e 	bne.w	80026a0 <Haamin_Remote+0x15f0>
        if(cross_Mode == MAIN_FUNCTION)
 80023e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <Haamin_Remote+0x1474>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b66      	cmp	r3, #102	@ 0x66
 80023ea:	d16e      	bne.n	80024ca <Haamin_Remote+0x141a>
            if(action == MUTE)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f240 1219 	movw	r2, #281	@ 0x119
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10b      	bne.n	800240e <Haamin_Remote+0x135e>
                if(muteFlag)
 80023f6:	4b41      	ldr	r3, [pc, #260]	@ (80024fc <Haamin_Remote+0x144c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <Haamin_Remote+0x1356>
                    muteFlag = 0;
 80023fe:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <Haamin_Remote+0x144c>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e05d      	b.n	80024c2 <Haamin_Remote+0x1412>
                    muteFlag = 1;
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <Haamin_Remote+0x144c>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e059      	b.n	80024c2 <Haamin_Remote+0x1412>
            else if(action == INFO)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	f240 1255 	movw	r2, #341	@ 0x155
 8002414:	4293      	cmp	r3, r2
 8002416:	d10d      	bne.n	8002434 <Haamin_Remote+0x1384>
                cross_Mode = SETTING;
 8002418:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <Haamin_Remote+0x1474>)
 800241a:	2273      	movs	r2, #115	@ 0x73
 800241c:	701a      	strb	r2, [r3, #0]
                amrap_Mode = SET_MIN;
 800241e:	4b45      	ldr	r3, [pc, #276]	@ (8002534 <Haamin_Remote+0x1484>)
 8002420:	224d      	movs	r2, #77	@ 0x4d
 8002422:	701a      	strb	r2, [r3, #0]
                cross_Value = amrap_Minute_Def;
 8002424:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <Haamin_Remote+0x1488>)
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <Haamin_Remote+0x1454>)
 800242a:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <Haamin_Remote+0x148c>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e046      	b.n	80024c2 <Haamin_Remote+0x1412>
            else if(action == RESET_KEY)
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800243a:	d115      	bne.n	8002468 <Haamin_Remote+0x13b8>
                amrap_Minute = amrap_Minute_Def;
 800243c:	4b3e      	ldr	r3, [pc, #248]	@ (8002538 <Haamin_Remote+0x1488>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <Haamin_Remote+0x1490>)
 8002444:	601a      	str	r2, [r3, #0]
                amrap_Second = amrap_Second;
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <Haamin_Remote+0x1494>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3e      	ldr	r2, [pc, #248]	@ (8002544 <Haamin_Remote+0x1494>)
 800244c:	6013      	str	r3, [r2, #0]
                cross_SrUpEn = 1;
 800244e:	4b3e      	ldr	r3, [pc, #248]	@ (8002548 <Haamin_Remote+0x1498>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002454:	4b39      	ldr	r3, [pc, #228]	@ (800253c <Haamin_Remote+0x148c>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
                cross_TimeStarting = 11;
 800245a:	4b3c      	ldr	r3, [pc, #240]	@ (800254c <Haamin_Remote+0x149c>)
 800245c:	220b      	movs	r2, #11
 800245e:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <Haamin_Remote+0x14a0>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e02c      	b.n	80024c2 <Haamin_Remote+0x1412>
            else if(action == PLAY_KEY)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 800246e:	d106      	bne.n	800247e <Haamin_Remote+0x13ce>
                cross_StartUp = 0;
 8002470:	4b37      	ldr	r3, [pc, #220]	@ (8002550 <Haamin_Remote+0x14a0>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
                cross_Run = 1;
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <Haamin_Remote+0x148c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e021      	b.n	80024c2 <Haamin_Remote+0x1412>
            else if(action == PUSE_KEY)
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8002484:	d106      	bne.n	8002494 <Haamin_Remote+0x13e4>
                cross_StartUp = 0;
 8002486:	4b32      	ldr	r3, [pc, #200]	@ (8002550 <Haamin_Remote+0x14a0>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <Haamin_Remote+0x148c>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e016      	b.n	80024c2 <Haamin_Remote+0x1412>
            else if(action == EXIT_KEY)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	f240 1205 	movw	r2, #261	@ 0x105
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <Haamin_Remote+0x1412>
                cross_SrUpEn = 1;
 800249e:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <Haamin_Remote+0x1498>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <Haamin_Remote+0x14a0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <Haamin_Remote+0x148c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <Haamin_Remote+0x1480>)
 80024b2:	2252      	movs	r2, #82	@ 0x52
 80024b4:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80024b6:	2032      	movs	r0, #50	@ 0x32
 80024b8:	f000 fb44 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80024bc:	2032      	movs	r0, #50	@ 0x32
 80024be:	f004 fb19 	bl	8006af4 <HAL_Delay>
            Buzz(100);
 80024c2:	2064      	movs	r0, #100	@ 0x64
 80024c4:	f000 fb3e 	bl	8002b44 <Buzz>
 80024c8:	e0e6      	b.n	8002698 <Haamin_Remote+0x15e8>
        else if(cross_Mode == SETTING)
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <Haamin_Remote+0x1474>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b73      	cmp	r3, #115	@ 0x73
 80024d0:	f040 80e2 	bne.w	8002698 <Haamin_Remote+0x15e8>
            if(action == INCREASE)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80024da:	d13b      	bne.n	8002554 <Haamin_Remote+0x14a4>
                if(++cross_Value > 99)
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <Haamin_Remote+0x1454>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <Haamin_Remote+0x1454>)
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <Haamin_Remote+0x1454>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b63      	cmp	r3, #99	@ 0x63
 80024ee:	f240 80d3 	bls.w	8002698 <Haamin_Remote+0x15e8>
                    cross_Value = 0;
 80024f2:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <Haamin_Remote+0x1454>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e0ce      	b.n	8002698 <Haamin_Remote+0x15e8>
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000
 8002500:	200001c3 	.word	0x200001c3
 8002504:	200001dc 	.word	0x200001dc
 8002508:	2000000a 	.word	0x2000000a
 800250c:	2000000b 	.word	0x2000000b
 8002510:	200001bf 	.word	0x200001bf
 8002514:	200001c0 	.word	0x200001c0
 8002518:	200001be 	.word	0x200001be
 800251c:	200001c1 	.word	0x200001c1
 8002520:	200001c2 	.word	0x200001c2
 8002524:	200001d8 	.word	0x200001d8
 8002528:	20000092 	.word	0x20000092
 800252c:	20000090 	.word	0x20000090
 8002530:	20000001 	.word	0x20000001
 8002534:	200001cd 	.word	0x200001cd
 8002538:	2000000d 	.word	0x2000000d
 800253c:	200001da 	.word	0x200001da
 8002540:	200001c8 	.word	0x200001c8
 8002544:	200001c4 	.word	0x200001c4
 8002548:	200001db 	.word	0x200001db
 800254c:	200001d7 	.word	0x200001d7
 8002550:	200001d9 	.word	0x200001d9
            else if(action == DECREASE)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800255a:	d10e      	bne.n	800257a <Haamin_Remote+0x14ca>
                if(cross_Value == 0)
 800255c:	4b9b      	ldr	r3, [pc, #620]	@ (80027cc <Haamin_Remote+0x171c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <Haamin_Remote+0x14bc>
                    cross_Value = 99;
 8002564:	4b99      	ldr	r3, [pc, #612]	@ (80027cc <Haamin_Remote+0x171c>)
 8002566:	2263      	movs	r2, #99	@ 0x63
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e095      	b.n	8002698 <Haamin_Remote+0x15e8>
                    cross_Value--;
 800256c:	4b97      	ldr	r3, [pc, #604]	@ (80027cc <Haamin_Remote+0x171c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	3b01      	subs	r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b95      	ldr	r3, [pc, #596]	@ (80027cc <Haamin_Remote+0x171c>)
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e08e      	b.n	8002698 <Haamin_Remote+0x15e8>
            else if(action == MUTE)
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	f240 1219 	movw	r2, #281	@ 0x119
 8002580:	4293      	cmp	r3, r2
 8002582:	d10b      	bne.n	800259c <Haamin_Remote+0x14ec>
                if(muteFlag)
 8002584:	4b92      	ldr	r3, [pc, #584]	@ (80027d0 <Haamin_Remote+0x1720>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <Haamin_Remote+0x14e4>
                    muteFlag = 0;
 800258c:	4b90      	ldr	r3, [pc, #576]	@ (80027d0 <Haamin_Remote+0x1720>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e081      	b.n	8002698 <Haamin_Remote+0x15e8>
                    muteFlag = 1;
 8002594:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <Haamin_Remote+0x1720>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e07d      	b.n	8002698 <Haamin_Remote+0x15e8>
            else if (action == OK_KEY)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 80025a2:	d128      	bne.n	80025f6 <Haamin_Remote+0x1546>
                if(amrap_Mode == SET_MIN)
 80025a4:	4b8b      	ldr	r3, [pc, #556]	@ (80027d4 <Haamin_Remote+0x1724>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b4d      	cmp	r3, #77	@ 0x4d
 80025aa:	d10b      	bne.n	80025c4 <Haamin_Remote+0x1514>
                    amrap_Minute_Def = cross_Value;
 80025ac:	4b87      	ldr	r3, [pc, #540]	@ (80027cc <Haamin_Remote+0x171c>)
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	4b89      	ldr	r3, [pc, #548]	@ (80027d8 <Haamin_Remote+0x1728>)
 80025b2:	701a      	strb	r2, [r3, #0]
                    cross_Value = amrap_Second_Def;
 80025b4:	4b89      	ldr	r3, [pc, #548]	@ (80027dc <Haamin_Remote+0x172c>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b84      	ldr	r3, [pc, #528]	@ (80027cc <Haamin_Remote+0x171c>)
 80025ba:	701a      	strb	r2, [r3, #0]
                    amrap_Mode = SET_SEC;
 80025bc:	4b85      	ldr	r3, [pc, #532]	@ (80027d4 <Haamin_Remote+0x1724>)
 80025be:	2253      	movs	r2, #83	@ 0x53
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e069      	b.n	8002698 <Haamin_Remote+0x15e8>
                else if(amrap_Mode == SET_SEC)
 80025c4:	4b83      	ldr	r3, [pc, #524]	@ (80027d4 <Haamin_Remote+0x1724>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b53      	cmp	r3, #83	@ 0x53
 80025ca:	d165      	bne.n	8002698 <Haamin_Remote+0x15e8>
                    amrap_Second_Def = cross_Value;
 80025cc:	4b7f      	ldr	r3, [pc, #508]	@ (80027cc <Haamin_Remote+0x171c>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b82      	ldr	r3, [pc, #520]	@ (80027dc <Haamin_Remote+0x172c>)
 80025d2:	701a      	strb	r2, [r3, #0]
                    amrap_Minute  = amrap_Minute_Def;
 80025d4:	4b80      	ldr	r3, [pc, #512]	@ (80027d8 <Haamin_Remote+0x1728>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b81      	ldr	r3, [pc, #516]	@ (80027e0 <Haamin_Remote+0x1730>)
 80025dc:	601a      	str	r2, [r3, #0]
                    amrap_Second = amrap_Second_Def;
 80025de:	4b7f      	ldr	r3, [pc, #508]	@ (80027dc <Haamin_Remote+0x172c>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b7f      	ldr	r3, [pc, #508]	@ (80027e4 <Haamin_Remote+0x1734>)
 80025e6:	601a      	str	r2, [r3, #0]
                    amrap_Mode = SET_MIN;
 80025e8:	4b7a      	ldr	r3, [pc, #488]	@ (80027d4 <Haamin_Remote+0x1724>)
 80025ea:	224d      	movs	r2, #77	@ 0x4d
 80025ec:	701a      	strb	r2, [r3, #0]
                    cross_Mode = MAIN_FUNCTION;
 80025ee:	4b7e      	ldr	r3, [pc, #504]	@ (80027e8 <Haamin_Remote+0x1738>)
 80025f0:	2266      	movs	r2, #102	@ 0x66
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e050      	b.n	8002698 <Haamin_Remote+0x15e8>
            else if (action == EXIT_KEY)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	f240 1205 	movw	r2, #261	@ 0x105
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d109      	bne.n	8002614 <Haamin_Remote+0x1564>
                amrap_Mode = MAIN_FUNCTION;
 8002600:	4b74      	ldr	r3, [pc, #464]	@ (80027d4 <Haamin_Remote+0x1724>)
 8002602:	2266      	movs	r2, #102	@ 0x66
 8002604:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8002606:	2032      	movs	r0, #50	@ 0x32
 8002608:	f000 fa9c 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 800260c:	2032      	movs	r0, #50	@ 0x32
 800260e:	f004 fa71 	bl	8006af4 <HAL_Delay>
 8002612:	e041      	b.n	8002698 <Haamin_Remote+0x15e8>
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f240 120f 	movw	r2, #271	@ 0x10f
 800261a:	4293      	cmp	r3, r2
 800261c:	d023      	beq.n	8002666 <Haamin_Remote+0x15b6>
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 8002624:	d01f      	beq.n	8002666 <Haamin_Remote+0x15b6>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 800262c:	d01b      	beq.n	8002666 <Haamin_Remote+0x15b6>
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002634:	d017      	beq.n	8002666 <Haamin_Remote+0x15b6>
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 800263c:	d013      	beq.n	8002666 <Haamin_Remote+0x15b6>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002644:	d00f      	beq.n	8002666 <Haamin_Remote+0x15b6>
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 800264c:	d00b      	beq.n	8002666 <Haamin_Remote+0x15b6>
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8002654:	d007      	beq.n	8002666 <Haamin_Remote+0x15b6>
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 800265c:	d003      	beq.n	8002666 <Haamin_Remote+0x15b6>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8002664:	d118      	bne.n	8002698 <Haamin_Remote+0x15e8>
                valueFeedback = Haamin_NumberKey(action);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa0d 	bl	8002a88 <Haamin_NumberKey>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4b5e      	ldr	r3, [pc, #376]	@ (80027ec <Haamin_Remote+0x173c>)
 8002674:	701a      	strb	r2, [r3, #0]
                cross_Value = ((valuSetting_tmp * 10) + valueFeedback);
 8002676:	4b5e      	ldr	r3, [pc, #376]	@ (80027f0 <Haamin_Remote+0x1740>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4413      	add	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <Haamin_Remote+0x173c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4413      	add	r3, r2
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b4f      	ldr	r3, [pc, #316]	@ (80027cc <Haamin_Remote+0x171c>)
 800268e:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback; 
 8002690:	4b56      	ldr	r3, [pc, #344]	@ (80027ec <Haamin_Remote+0x173c>)
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <Haamin_Remote+0x1740>)
 8002696:	701a      	strb	r2, [r3, #0]
        Buzz(100);
 8002698:	2064      	movs	r0, #100	@ 0x64
 800269a:	f000 fa53 	bl	8002b44 <Buzz>
}
 800269e:	e1d0      	b.n	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == SET_MIX)
 80026a0:	4b54      	ldr	r3, [pc, #336]	@ (80027f4 <Haamin_Remote+0x1744>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b78      	cmp	r3, #120	@ 0x78
 80026a6:	f040 8179 	bne.w	800299c <Haamin_Remote+0x18ec>
        if(cross_Mode == MAIN_FUNCTION)
 80026aa:	4b4f      	ldr	r3, [pc, #316]	@ (80027e8 <Haamin_Remote+0x1738>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b66      	cmp	r3, #102	@ 0x66
 80026b0:	d13a      	bne.n	8002728 <Haamin_Remote+0x1678>
            if(action == MUTE)
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	f240 1219 	movw	r2, #281	@ 0x119
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10b      	bne.n	80026d4 <Haamin_Remote+0x1624>
                if(muteFlag)
 80026bc:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <Haamin_Remote+0x1720>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <Haamin_Remote+0x161c>
                    muteFlag = 0;
 80026c4:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <Haamin_Remote+0x1720>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e029      	b.n	8002720 <Haamin_Remote+0x1670>
                    muteFlag = 1;
 80026cc:	4b40      	ldr	r3, [pc, #256]	@ (80027d0 <Haamin_Remote+0x1720>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e025      	b.n	8002720 <Haamin_Remote+0x1670>
            else if(action == INFO)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f240 1255 	movw	r2, #341	@ 0x155
 80026da:	4293      	cmp	r3, r2
 80026dc:	d109      	bne.n	80026f2 <Haamin_Remote+0x1642>
                cross_Mode = SETTING;
 80026de:	4b42      	ldr	r3, [pc, #264]	@ (80027e8 <Haamin_Remote+0x1738>)
 80026e0:	2273      	movs	r2, #115	@ 0x73
 80026e2:	701a      	strb	r2, [r3, #0]
                mix_Step = PART_1;
 80026e4:	4b44      	ldr	r3, [pc, #272]	@ (80027f8 <Haamin_Remote+0x1748>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
                cross_Value = 1;
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <Haamin_Remote+0x171c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e016      	b.n	8002720 <Haamin_Remote+0x1670>
            else if(action == EXIT_KEY)
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	f240 1205 	movw	r2, #261	@ 0x105
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <Haamin_Remote+0x1670>
                cross_SrUpEn = 1;
 80026fc:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <Haamin_Remote+0x174c>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 8002702:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <Haamin_Remote+0x1750>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
                cross_Run = 0;
 8002708:	4b3e      	ldr	r3, [pc, #248]	@ (8002804 <Haamin_Remote+0x1754>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
                work_Mode = MODE_NORMAL;
 800270e:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <Haamin_Remote+0x1744>)
 8002710:	2252      	movs	r2, #82	@ 0x52
 8002712:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8002714:	2032      	movs	r0, #50	@ 0x32
 8002716:	f000 fa15 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 800271a:	2032      	movs	r0, #50	@ 0x32
 800271c:	f004 f9ea 	bl	8006af4 <HAL_Delay>
            Buzz(100);
 8002720:	2064      	movs	r0, #100	@ 0x64
 8002722:	f000 fa0f 	bl	8002b44 <Buzz>
 8002726:	e135      	b.n	8002994 <Haamin_Remote+0x18e4>
        else if(cross_Mode == SETTING)
 8002728:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <Haamin_Remote+0x1738>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b73      	cmp	r3, #115	@ 0x73
 800272e:	f040 8131 	bne.w	8002994 <Haamin_Remote+0x18e4>
            if(action == INCREASE)
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8002738:	d121      	bne.n	800277e <Haamin_Remote+0x16ce>
                if(mix_Step == 2)
 800273a:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <Haamin_Remote+0x1748>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d10e      	bne.n	8002760 <Haamin_Remote+0x16b0>
                    if(++cross_Value > 99)
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <Haamin_Remote+0x171c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <Haamin_Remote+0x171c>)
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	4b1f      	ldr	r3, [pc, #124]	@ (80027cc <Haamin_Remote+0x171c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b63      	cmp	r3, #99	@ 0x63
 8002754:	f240 811b 	bls.w	800298e <Haamin_Remote+0x18de>
                        cross_Value = 0;
 8002758:	4b1c      	ldr	r3, [pc, #112]	@ (80027cc <Haamin_Remote+0x171c>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e116      	b.n	800298e <Haamin_Remote+0x18de>
                    if(++cross_Value > 5)
 8002760:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <Haamin_Remote+0x171c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <Haamin_Remote+0x171c>)
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <Haamin_Remote+0x171c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b05      	cmp	r3, #5
 8002772:	f240 810c 	bls.w	800298e <Haamin_Remote+0x18de>
                        cross_Value = 1;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <Haamin_Remote+0x171c>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e107      	b.n	800298e <Haamin_Remote+0x18de>
            else if(action == DECREASE)
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8002784:	d140      	bne.n	8002808 <Haamin_Remote+0x1758>
                if(mix_Step == 2)
 8002786:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <Haamin_Remote+0x1748>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d10e      	bne.n	80027ac <Haamin_Remote+0x16fc>
                    if(cross_Value == 0)
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <Haamin_Remote+0x171c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <Haamin_Remote+0x16ee>
                        cross_Value = 99;
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <Haamin_Remote+0x171c>)
 8002798:	2263      	movs	r2, #99	@ 0x63
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e0f7      	b.n	800298e <Haamin_Remote+0x18de>
                        cross_Value--;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <Haamin_Remote+0x171c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <Haamin_Remote+0x171c>)
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e0f0      	b.n	800298e <Haamin_Remote+0x18de>
                    if(cross_Value == 1)
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <Haamin_Remote+0x171c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d103      	bne.n	80027bc <Haamin_Remote+0x170c>
                        cross_Value = 5;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <Haamin_Remote+0x171c>)
 80027b6:	2205      	movs	r2, #5
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e0e8      	b.n	800298e <Haamin_Remote+0x18de>
                        cross_Value--;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <Haamin_Remote+0x171c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b01      	ldr	r3, [pc, #4]	@ (80027cc <Haamin_Remote+0x171c>)
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e0e1      	b.n	800298e <Haamin_Remote+0x18de>
 80027ca:	bf00      	nop
 80027cc:	200001dc 	.word	0x200001dc
 80027d0:	20000000 	.word	0x20000000
 80027d4:	200001cd 	.word	0x200001cd
 80027d8:	2000000d 	.word	0x2000000d
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	200001c8 	.word	0x200001c8
 80027e4:	200001c4 	.word	0x200001c4
 80027e8:	200001d8 	.word	0x200001d8
 80027ec:	20000092 	.word	0x20000092
 80027f0:	20000090 	.word	0x20000090
 80027f4:	20000001 	.word	0x20000001
 80027f8:	200001ce 	.word	0x200001ce
 80027fc:	200001db 	.word	0x200001db
 8002800:	200001d9 	.word	0x200001d9
 8002804:	200001da 	.word	0x200001da
            else if(action == MUTE)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	f240 1219 	movw	r2, #281	@ 0x119
 800280e:	4293      	cmp	r3, r2
 8002810:	d10b      	bne.n	800282a <Haamin_Remote+0x177a>
                if(muteFlag)
 8002812:	4b8e      	ldr	r3, [pc, #568]	@ (8002a4c <Haamin_Remote+0x199c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <Haamin_Remote+0x1772>
                    muteFlag = 0;
 800281a:	4b8c      	ldr	r3, [pc, #560]	@ (8002a4c <Haamin_Remote+0x199c>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e0b5      	b.n	800298e <Haamin_Remote+0x18de>
                    muteFlag = 1;
 8002822:	4b8a      	ldr	r3, [pc, #552]	@ (8002a4c <Haamin_Remote+0x199c>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e0b1      	b.n	800298e <Haamin_Remote+0x18de>
            else if (action == OK_KEY)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8002830:	d144      	bne.n	80028bc <Haamin_Remote+0x180c>
                if(mix_Step == PART_1)
 8002832:	4b87      	ldr	r3, [pc, #540]	@ (8002a50 <Haamin_Remote+0x19a0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10b      	bne.n	8002852 <Haamin_Remote+0x17a2>
                    mix_Step = PART_2;
 800283a:	4b85      	ldr	r3, [pc, #532]	@ (8002a50 <Haamin_Remote+0x19a0>)
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
                    mix_Mode = SET_MIN;
 8002840:	4b84      	ldr	r3, [pc, #528]	@ (8002a54 <Haamin_Remote+0x19a4>)
 8002842:	224d      	movs	r2, #77	@ 0x4d
 8002844:	701a      	strb	r2, [r3, #0]
                    cross_Value = mix_Minute;
 8002846:	4b84      	ldr	r3, [pc, #528]	@ (8002a58 <Haamin_Remote+0x19a8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b83      	ldr	r3, [pc, #524]	@ (8002a5c <Haamin_Remote+0x19ac>)
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e09d      	b.n	800298e <Haamin_Remote+0x18de>
                else if(mix_Step == PART_2)
 8002852:	4b7f      	ldr	r3, [pc, #508]	@ (8002a50 <Haamin_Remote+0x19a0>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d122      	bne.n	80028a0 <Haamin_Remote+0x17f0>
                    if(mix_Mode == SET_MIN)
 800285a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <Haamin_Remote+0x19a4>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b4d      	cmp	r3, #77	@ 0x4d
 8002860:	d10d      	bne.n	800287e <Haamin_Remote+0x17ce>
                        mix_Minute = cross_Value;
 8002862:	4b7e      	ldr	r3, [pc, #504]	@ (8002a5c <Haamin_Remote+0x19ac>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	4b7b      	ldr	r3, [pc, #492]	@ (8002a58 <Haamin_Remote+0x19a8>)
 800286a:	601a      	str	r2, [r3, #0]
                        cross_Value = mix_Second;
 800286c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a60 <Haamin_Remote+0x19b0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <Haamin_Remote+0x19ac>)
 8002874:	701a      	strb	r2, [r3, #0]
                        mix_Mode = SET_SEC;
 8002876:	4b77      	ldr	r3, [pc, #476]	@ (8002a54 <Haamin_Remote+0x19a4>)
 8002878:	2253      	movs	r2, #83	@ 0x53
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e087      	b.n	800298e <Haamin_Remote+0x18de>
                    else if(mix_Mode == SET_SEC)
 800287e:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <Haamin_Remote+0x19a4>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b53      	cmp	r3, #83	@ 0x53
 8002884:	f040 8083 	bne.w	800298e <Haamin_Remote+0x18de>
                        mix_Mode = SET_MIN;
 8002888:	4b72      	ldr	r3, [pc, #456]	@ (8002a54 <Haamin_Remote+0x19a4>)
 800288a:	224d      	movs	r2, #77	@ 0x4d
 800288c:	701a      	strb	r2, [r3, #0]
                        mix_Second = cross_Value;
 800288e:	4b73      	ldr	r3, [pc, #460]	@ (8002a5c <Haamin_Remote+0x19ac>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	4b72      	ldr	r3, [pc, #456]	@ (8002a60 <Haamin_Remote+0x19b0>)
 8002896:	601a      	str	r2, [r3, #0]
                        mix_Step = 3;
 8002898:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <Haamin_Remote+0x19a0>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e076      	b.n	800298e <Haamin_Remote+0x18de>
                else if(mix_Step == PART_3)
 80028a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002a50 <Haamin_Remote+0x19a0>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d172      	bne.n	800298e <Haamin_Remote+0x18de>
                    mix_Step = PART_1;
 80028a8:	4b69      	ldr	r3, [pc, #420]	@ (8002a50 <Haamin_Remote+0x19a0>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
                    work_Mode = MIX;
 80028ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002a64 <Haamin_Remote+0x19b4>)
 80028b0:	2258      	movs	r2, #88	@ 0x58
 80028b2:	701a      	strb	r2, [r3, #0]
                    cross_Mode = MAIN_FUNCTION;
 80028b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a68 <Haamin_Remote+0x19b8>)
 80028b6:	2266      	movs	r2, #102	@ 0x66
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e068      	b.n	800298e <Haamin_Remote+0x18de>
            else if (action == EXIT_KEY)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	f240 1205 	movw	r2, #261	@ 0x105
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d109      	bne.n	80028da <Haamin_Remote+0x182a>
                cross_Mode = MAIN_FUNCTION;
 80028c6:	4b68      	ldr	r3, [pc, #416]	@ (8002a68 <Haamin_Remote+0x19b8>)
 80028c8:	2266      	movs	r2, #102	@ 0x66
 80028ca:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 80028cc:	2032      	movs	r0, #50	@ 0x32
 80028ce:	f000 f939 	bl	8002b44 <Buzz>
                HAL_Delay(50);
 80028d2:	2032      	movs	r0, #50	@ 0x32
 80028d4:	f004 f90e 	bl	8006af4 <HAL_Delay>
 80028d8:	e059      	b.n	800298e <Haamin_Remote+0x18de>
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	f240 120f 	movw	r2, #271	@ 0x10f
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d023      	beq.n	800292c <Haamin_Remote+0x187c>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 80028ea:	d01f      	beq.n	800292c <Haamin_Remote+0x187c>
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80028f2:	d01b      	beq.n	800292c <Haamin_Remote+0x187c>
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80028fa:	d017      	beq.n	800292c <Haamin_Remote+0x187c>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8002902:	d013      	beq.n	800292c <Haamin_Remote+0x187c>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800290a:	d00f      	beq.n	800292c <Haamin_Remote+0x187c>
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002912:	d00b      	beq.n	800292c <Haamin_Remote+0x187c>
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800291a:	d007      	beq.n	800292c <Haamin_Remote+0x187c>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8002922:	d003      	beq.n	800292c <Haamin_Remote+0x187c>
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800292a:	d130      	bne.n	800298e <Haamin_Remote+0x18de>
                if(mix_Step == 2)
 800292c:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <Haamin_Remote+0x19a0>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d124      	bne.n	800297e <Haamin_Remote+0x18ce>
                    valueFeedback = Haamin_NumberKey(action);
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8a6 	bl	8002a88 <Haamin_NumberKey>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <Haamin_Remote+0x19bc>)
 8002942:	701a      	strb	r2, [r3, #0]
                    cross_Value = ((valuSetting_tmp * 10) + valueFeedback);
 8002944:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <Haamin_Remote+0x19c0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b46      	ldr	r3, [pc, #280]	@ (8002a6c <Haamin_Remote+0x19bc>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <Haamin_Remote+0x19ac>)
 800295c:	701a      	strb	r2, [r3, #0]
                    valuSetting_tmp = valueFeedback; 
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <Haamin_Remote+0x19bc>)
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	4b43      	ldr	r3, [pc, #268]	@ (8002a70 <Haamin_Remote+0x19c0>)
 8002964:	701a      	strb	r2, [r3, #0]
                    if(mix_Mode == SET_SEC)
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <Haamin_Remote+0x19a4>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b53      	cmp	r3, #83	@ 0x53
 800296c:	d10f      	bne.n	800298e <Haamin_Remote+0x18de>
                    if(cross_Value > 60)
 800296e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <Haamin_Remote+0x19ac>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b3c      	cmp	r3, #60	@ 0x3c
 8002974:	d90b      	bls.n	800298e <Haamin_Remote+0x18de>
                        cross_Value = 59;
 8002976:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <Haamin_Remote+0x19ac>)
 8002978:	223b      	movs	r2, #59	@ 0x3b
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e007      	b.n	800298e <Haamin_Remote+0x18de>
                    cross_Value = Haamin_NumberKey(action);
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f881 	bl	8002a88 <Haamin_NumberKey>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	4b34      	ldr	r3, [pc, #208]	@ (8002a5c <Haamin_Remote+0x19ac>)
 800298c:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 800298e:	2064      	movs	r0, #100	@ 0x64
 8002990:	f000 f8d8 	bl	8002b44 <Buzz>
        Buzz(100);
 8002994:	2064      	movs	r0, #100	@ 0x64
 8002996:	f000 f8d5 	bl	8002b44 <Buzz>
}
 800299a:	e052      	b.n	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == MIX)
 800299c:	4b31      	ldr	r3, [pc, #196]	@ (8002a64 <Haamin_Remote+0x19b4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b58      	cmp	r3, #88	@ 0x58
 80029a2:	d112      	bne.n	80029ca <Haamin_Remote+0x191a>
            if(mix_Step == 2)
 80029a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <Haamin_Remote+0x19a0>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d10a      	bne.n	80029c2 <Haamin_Remote+0x1912>
                if(action == EXIT_KEY)
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	f240 1205 	movw	r2, #261	@ 0x105
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d105      	bne.n	80029c2 <Haamin_Remote+0x1912>
                    mix_Flag = 0;
 80029b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a74 <Haamin_Remote+0x19c4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
                    work_Mode = MODE_NORMAL;
 80029bc:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <Haamin_Remote+0x19b4>)
 80029be:	2252      	movs	r2, #82	@ 0x52
 80029c0:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 80029c2:	2064      	movs	r0, #100	@ 0x64
 80029c4:	f000 f8be 	bl	8002b44 <Buzz>
}
 80029c8:	e03b      	b.n	8002a42 <Haamin_Remote+0x1992>
    else if(work_Mode == TIMER_COUNTER)
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <Haamin_Remote+0x19b4>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b63      	cmp	r3, #99	@ 0x63
 80029d0:	d137      	bne.n	8002a42 <Haamin_Remote+0x1992>
        if(action == EXIT_KEY)
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	f240 1205 	movw	r2, #261	@ 0x105
 80029d8:	4293      	cmp	r3, r2
 80029da:	d109      	bne.n	80029f0 <Haamin_Remote+0x1940>
            timer_Run = 0;
 80029dc:	4b26      	ldr	r3, [pc, #152]	@ (8002a78 <Haamin_Remote+0x19c8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
            work_Mode = MODE_NORMAL;
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <Haamin_Remote+0x19b4>)
 80029e4:	2252      	movs	r2, #82	@ 0x52
 80029e6:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 80029e8:	2064      	movs	r0, #100	@ 0x64
 80029ea:	f000 f8ab 	bl	8002b44 <Buzz>
}
 80029ee:	e028      	b.n	8002a42 <Haamin_Remote+0x1992>
        else if(action == RESET_KEY)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029f6:	d10f      	bne.n	8002a18 <Haamin_Remote+0x1968>
            timer_Run = 0;
 80029f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a78 <Haamin_Remote+0x19c8>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
            timer_Second = 0;
 80029fe:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <Haamin_Remote+0x19cc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
            timer_mili_Second = 0;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <Haamin_Remote+0x19d0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
            counter_Value = 0;
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <Haamin_Remote+0x19d4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8002a10:	2064      	movs	r0, #100	@ 0x64
 8002a12:	f000 f897 	bl	8002b44 <Buzz>
}
 8002a16:	e014      	b.n	8002a42 <Haamin_Remote+0x1992>
        else if(action == PLAY_KEY)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	f5b3 7fa3 	cmp.w	r3, #326	@ 0x146
 8002a1e:	d106      	bne.n	8002a2e <Haamin_Remote+0x197e>
            timer_Run = 1;
 8002a20:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <Haamin_Remote+0x19c8>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8002a26:	2064      	movs	r0, #100	@ 0x64
 8002a28:	f000 f88c 	bl	8002b44 <Buzz>
}
 8002a2c:	e009      	b.n	8002a42 <Haamin_Remote+0x1992>
        else if(action == PUSE_KEY)
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	f5b3 7fa2 	cmp.w	r3, #324	@ 0x144
 8002a34:	d105      	bne.n	8002a42 <Haamin_Remote+0x1992>
            timer_Run = 0;
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <Haamin_Remote+0x19c8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8002a3c:	2064      	movs	r0, #100	@ 0x64
 8002a3e:	f000 f881 	bl	8002b44 <Buzz>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	200001ce 	.word	0x200001ce
 8002a54:	200001d4 	.word	0x200001d4
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	200001dc 	.word	0x200001dc
 8002a60:	200001d0 	.word	0x200001d0
 8002a64:	20000001 	.word	0x20000001
 8002a68:	200001d8 	.word	0x200001d8
 8002a6c:	20000092 	.word	0x20000092
 8002a70:	20000090 	.word	0x20000090
 8002a74:	200001d5 	.word	0x200001d5
 8002a78:	200001ee 	.word	0x200001ee
 8002a7c:	200001e8 	.word	0x200001e8
 8002a80:	200001e9 	.word	0x200001e9
 8002a84:	200001ea 	.word	0x200001ea

08002a88 <Haamin_NumberKey>:

uint8_t Haamin_NumberKey (uint16_t numberKey)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
    if(numberKey == KEY_0)
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	f240 120f 	movw	r2, #271	@ 0x10f
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <Haamin_NumberKey+0x1c>
        valueNumber = 0;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e046      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_1)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 8002aaa:	d103      	bne.n	8002ab4 <Haamin_NumberKey+0x2c>
        valueNumber = 1;
 8002aac:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e03e      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_2)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8002aba:	d103      	bne.n	8002ac4 <Haamin_NumberKey+0x3c>
        valueNumber = 2;
 8002abc:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e036      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_3)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002aca:	d103      	bne.n	8002ad4 <Haamin_NumberKey+0x4c>
        valueNumber = 3;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e02e      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_4)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8002ada:	d103      	bne.n	8002ae4 <Haamin_NumberKey+0x5c>
        valueNumber = 4;
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e026      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_5)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002aea:	d103      	bne.n	8002af4 <Haamin_NumberKey+0x6c>
        valueNumber = 5;
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002aee:	2205      	movs	r2, #5
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e01e      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_6)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8002afa:	d103      	bne.n	8002b04 <Haamin_NumberKey+0x7c>
        valueNumber = 6;
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002afe:	2206      	movs	r2, #6
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e016      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_7)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8002b0a:	d103      	bne.n	8002b14 <Haamin_NumberKey+0x8c>
        valueNumber = 7;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002b0e:	2207      	movs	r2, #7
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	e00e      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_8)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8002b1a:	d103      	bne.n	8002b24 <Haamin_NumberKey+0x9c>
        valueNumber = 8;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002b1e:	2208      	movs	r2, #8
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	e006      	b.n	8002b32 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_9)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8002b2a:	d102      	bne.n	8002b32 <Haamin_NumberKey+0xaa>
        valueNumber = 9;
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002b2e:	2209      	movs	r2, #9
 8002b30:	701a      	strb	r2, [r3, #0]

    return valueNumber;
 8002b32:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <Haamin_NumberKey+0xb8>)
 8002b34:	781b      	ldrb	r3, [r3, #0]

}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000091 	.word	0x20000091

08002b44 <Buzz>:


void Buzz(uint16_t time)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  if(muteFlag)
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <Buzz+0x38>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <Buzz+0x2e>
  {
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002b56:	2201      	movs	r2, #1
 8002b58:	2120      	movs	r1, #32
 8002b5a:	4809      	ldr	r0, [pc, #36]	@ (8002b80 <Buzz+0x3c>)
 8002b5c:	f004 fec3 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_Delay(time);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 ffc6 	bl	8006af4 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2120      	movs	r1, #32
 8002b6c:	4804      	ldr	r0, [pc, #16]	@ (8002b80 <Buzz+0x3c>)
 8002b6e:	f004 feba 	bl	80078e6 <HAL_GPIO_WritePin>
  }
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	40010c00 	.word	0x40010c00

08002b84 <IR_SetTimeArrayValues>:
uint8_t ir_DataReady = 0;
uint16_t ir_Data = 0;
uint8_t ir_running = 0;

void IR_SetTimeArrayValues(uint16_t timevalue)// daryaft , zakhire zaman har palse 
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80fb      	strh	r3, [r7, #6]
  if (ir_running == 2)
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <IR_SetTimeArrayValues+0x6c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d121      	bne.n	8002bda <IR_SetTimeArrayValues+0x56>
  {
    ir_TimeValue[ir_ArrayIndex] = timevalue;
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <IR_SetTimeArrayValues+0x70>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <IR_SetTimeArrayValues+0x74>)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (++ir_ArrayIndex >= IR_FRAME_SIZE)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <IR_SetTimeArrayValues+0x70>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <IR_SetTimeArrayValues+0x70>)
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <IR_SetTimeArrayValues+0x70>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d917      	bls.n	8002be8 <IR_SetTimeArrayValues+0x64>
    {
      ir_ArrayIndex = 0;
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <IR_SetTimeArrayValues+0x70>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
      ir_running = 0;
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <IR_SetTimeArrayValues+0x6c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      uint8_t res = Ir_AnalyzeTimeArrayValues();
 8002bc4:	f000 f81c 	bl	8002c00 <Ir_AnalyzeTimeArrayValues>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
      if (res == 13)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b0d      	cmp	r3, #13
 8002bd0:	d10a      	bne.n	8002be8 <IR_SetTimeArrayValues+0x64>
      {
        ir_DataReady = 1;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <IR_SetTimeArrayValues+0x78>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
  }
  else if (ir_running == 1)
  {
    ir_running = 2;
  }
}
 8002bd8:	e006      	b.n	8002be8 <IR_SetTimeArrayValues+0x64>
  else if (ir_running == 1)
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <IR_SetTimeArrayValues+0x6c>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <IR_SetTimeArrayValues+0x64>
    ir_running = 2;
 8002be2:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <IR_SetTimeArrayValues+0x6c>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200000da 	.word	0x200000da
 8002bf4:	200000d6 	.word	0x200000d6
 8002bf8:	20000094 	.word	0x20000094
 8002bfc:	200000d7 	.word	0x200000d7

08002c00 <Ir_AnalyzeTimeArrayValues>:

// NEC IR Data Analysis Function
uint16_t Ir_AnalyzeTimeArrayValues(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0

  uint8_t address = 0, address_inv = 0, command = 0, command_inv = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	71fb      	strb	r3, [r7, #7]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71bb      	strb	r3, [r7, #6]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	717b      	strb	r3, [r7, #5]
 8002c12:	2300      	movs	r3, #0
 8002c14:	713b      	strb	r3, [r7, #4]

  // Validate NEC Frame Start Pulse (9ms + 4.5ms)
  if (ir_TimeValue[0] < 12500 || ir_TimeValue[0] > 14500)
 8002c16:	4b3e      	ldr	r3, [pc, #248]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d905      	bls.n	8002c2e <Ir_AnalyzeTimeArrayValues+0x2e>
 8002c22:	4b3b      	ldr	r3, [pc, #236]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f643 02a4 	movw	r2, #14500	@ 0x38a4
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <Ir_AnalyzeTimeArrayValues+0x32>
  {
    return 1; // Invalid NEC frame
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e069      	b.n	8002d06 <Ir_AnalyzeTimeArrayValues+0x106>
  }

  // Decode 32-bit NEC frame (Address + Address_inv + Command + Command_inv)
  for (int i = 0; i <= 8; i++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	e04a      	b.n	8002cce <Ir_AnalyzeTimeArrayValues+0xce>
  {
    if (ir_TimeValue[i + 1 + 0] > 2000)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4a34      	ldr	r2, [pc, #208]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c42:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002c46:	d909      	bls.n	8002c5c <Ir_AnalyzeTimeArrayValues+0x5c>
      address |= (1 << i); // Logical 1 threshold
 8002c48:	2201      	movs	r2, #1
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	b25a      	sxtb	r2, r3
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	71fb      	strb	r3, [r7, #7]
    if (ir_TimeValue[i + 1 + 8] > 2000)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3309      	adds	r3, #9
 8002c60:	4a2b      	ldr	r2, [pc, #172]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c66:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002c6a:	d909      	bls.n	8002c80 <Ir_AnalyzeTimeArrayValues+0x80>
      address_inv |= (1 << i);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	71bb      	strb	r3, [r7, #6]
    if (ir_TimeValue[i + 1 + 16] > 2000)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3311      	adds	r3, #17
 8002c84:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c8a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002c8e:	d909      	bls.n	8002ca4 <Ir_AnalyzeTimeArrayValues+0xa4>
      command |= (1 << i);
 8002c90:	2201      	movs	r2, #1
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	b25a      	sxtb	r2, r3
 8002c9a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	717b      	strb	r3, [r7, #5]
    if (ir_TimeValue[i + 1 + 24] > 2000)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3319      	adds	r3, #25
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <Ir_AnalyzeTimeArrayValues+0x110>)
 8002caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002cb2:	d909      	bls.n	8002cc8 <Ir_AnalyzeTimeArrayValues+0xc8>
      command_inv |= (1 << i);
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	b25a      	sxtb	r2, r3
 8002cbe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	713b      	strb	r3, [r7, #4]
  for (int i = 0; i <= 8; i++)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	ddb1      	ble.n	8002c38 <Ir_AnalyzeTimeArrayValues+0x38>
  }

  // Validate Address and Command Integrity
  if ((address ^ address_inv) == 0xFF && (command ^ command_inv) == 0xFF)
 8002cd4:	79fa      	ldrb	r2, [r7, #7]
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	4053      	eors	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2bff      	cmp	r3, #255	@ 0xff
 8002cde:	d111      	bne.n	8002d04 <Ir_AnalyzeTimeArrayValues+0x104>
 8002ce0:	797a      	ldrb	r2, [r7, #5]
 8002ce2:	793b      	ldrb	r3, [r7, #4]
 8002ce4:	4053      	eors	r3, r2
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2bff      	cmp	r3, #255	@ 0xff
 8002cea:	d10b      	bne.n	8002d04 <Ir_AnalyzeTimeArrayValues+0x104>
  {
    // NEC Protocol Successfully Decoded
    ir_Data = (address << 8) + command;
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	797b      	ldrb	r3, [r7, #5]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <Ir_AnalyzeTimeArrayValues+0x114>)
 8002cfe:	801a      	strh	r2, [r3, #0]
    return 13;
 8002d00:	230d      	movs	r3, #13
 8002d02:	e000      	b.n	8002d06 <Ir_AnalyzeTimeArrayValues+0x106>
  }

  return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	20000094 	.word	0x20000094
 8002d14:	200000d8 	.word	0x200000d8

08002d18 <Ir_GetData>:

uint16_t Ir_GetData(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  if (!ir_DataReady)
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <Ir_GetData+0x24>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <Ir_GetData+0x10>
    return 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e004      	b.n	8002d32 <Ir_GetData+0x1a>
  else
  {
    ir_DataReady = 0;
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <Ir_GetData+0x24>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    return ir_Data;
 8002d2e:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <Ir_GetData+0x28>)
 8002d30:	881b      	ldrh	r3, [r3, #0]
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200000d7 	.word	0x200000d7
 8002d40:	200000d8 	.word	0x200000d8

08002d44 <Ir_ResetRunning>:

void Ir_ResetRunning(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  ir_running = 1;
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <Ir_ResetRunning+0x18>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
  ir_ArrayIndex = 0;
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <Ir_ResetRunning+0x1c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	200000da 	.word	0x200000da
 8002d60:	200000d6 	.word	0x200000d6
 8002d64:	00000000 	.word	0x00000000

08002d68 <NTC_Read>:


extern ADC_HandleTypeDef hadc1;

uint8_t NTC_Read(void)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
  average = 0;  //Clear previous average value to ensure correct calculation for the new set of samples
 8002d6e:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa8 <NTC_Read+0x240>)
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
  float T0_K;
    //Collect multiple ADC samples and store them in the array
  for (i = 0; i < NUMSAMPLES; i++) 
 8002d76:	4b8d      	ldr	r3, [pc, #564]	@ (8002fac <NTC_Read+0x244>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e01e      	b.n	8002dbc <NTC_Read+0x54>
  {
    HAL_ADC_Start(&hadc1);                              //Start the ADC conversion
 8002d7e:	488c      	ldr	r0, [pc, #560]	@ (8002fb0 <NTC_Read+0x248>)
 8002d80:	f003 ffb4 	bl	8006cec <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);   //Wait for the conversion to complete
 8002d84:	f04f 31ff 	mov.w	r1, #4294967295
 8002d88:	4889      	ldr	r0, [pc, #548]	@ (8002fb0 <NTC_Read+0x248>)
 8002d8a:	f004 f85d 	bl	8006e48 <HAL_ADC_PollForConversion>
    samples[i] = HAL_ADC_GetValue(&hadc1);              //Read the ADC conversion result
 8002d8e:	4888      	ldr	r0, [pc, #544]	@ (8002fb0 <NTC_Read+0x248>)
 8002d90:	f004 f960 	bl	8007054 <HAL_ADC_GetValue>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a85      	ldr	r2, [pc, #532]	@ (8002fac <NTC_Read+0x244>)
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ff49 	bl	8000c34 <__aeabi_ui2f>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a83      	ldr	r2, [pc, #524]	@ (8002fb4 <NTC_Read+0x24c>)
 8002da6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    HAL_Delay(10);                                      //Delay between samples to stabilize the ADC readings
 8002daa:	200a      	movs	r0, #10
 8002dac:	f003 fea2 	bl	8006af4 <HAL_Delay>
  for (i = 0; i < NUMSAMPLES; i++) 
 8002db0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fac <NTC_Read+0x244>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fac <NTC_Read+0x244>)
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002fac <NTC_Read+0x244>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d9dc      	bls.n	8002d7e <NTC_Read+0x16>
  }
    
  //Compute the average of the collected ADC samples
  for (i = 0; i < NUMSAMPLES; i++) 
 8002dc4:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <NTC_Read+0x244>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e015      	b.n	8002df8 <NTC_Read+0x90>
  {
    average += samples[i];  //Sum up all the ADC sample values
 8002dcc:	4b77      	ldr	r3, [pc, #476]	@ (8002fac <NTC_Read+0x244>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b78      	ldr	r3, [pc, #480]	@ (8002fb4 <NTC_Read+0x24c>)
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	4a73      	ldr	r2, [pc, #460]	@ (8002fa8 <NTC_Read+0x240>)
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fe78 	bl	8000ad4 <__addsf3>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa8 <NTC_Read+0x240>)
 8002dea:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NUMSAMPLES; i++) 
 8002dec:	4b6f      	ldr	r3, [pc, #444]	@ (8002fac <NTC_Read+0x244>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <NTC_Read+0x244>)
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	4b6c      	ldr	r3, [pc, #432]	@ (8002fac <NTC_Read+0x244>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d9e5      	bls.n	8002dcc <NTC_Read+0x64>
  }
  average /= NUMSAMPLES;  //Calculate the average of the ADC samples
 8002e00:	4b69      	ldr	r3, [pc, #420]	@ (8002fa8 <NTC_Read+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	496c      	ldr	r1, [pc, #432]	@ (8002fb8 <NTC_Read+0x250>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f820 	bl	8000e4c <__aeabi_fdiv>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b65      	ldr	r3, [pc, #404]	@ (8002fa8 <NTC_Read+0x240>)
 8002e12:	601a      	str	r2, [r3, #0]

  //Convert the average ADC reading to thermistor resistance and calculate temperature
  if (average > 0) 
 8002e14:	4b64      	ldr	r3, [pc, #400]	@ (8002fa8 <NTC_Read+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe f91d 	bl	800105c <__aeabi_fcmpgt>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 808b 	beq.w	8002f40 <NTC_Read+0x1d8>
  {  // Ensure the average is not zero to avoid division errors
    // average = 4095.0 / average - 1;  // Convert ADC reading to resistance using 12-bit ADC resolution
    float voltage = (average / 4095.0f) * VREF;
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa8 <NTC_Read+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4963      	ldr	r1, [pc, #396]	@ (8002fbc <NTC_Read+0x254>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f80b 	bl	8000e4c <__aeabi_fdiv>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4961      	ldr	r1, [pc, #388]	@ (8002fc0 <NTC_Read+0x258>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd ff52 	bl	8000ce4 <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	607b      	str	r3, [r7, #4]
    resistance = SERIESRESISTOR * ((VIN / voltage) - 1.0f);   
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	485f      	ldr	r0, [pc, #380]	@ (8002fc4 <NTC_Read+0x25c>)
 8002e48:	f7fe f800 	bl	8000e4c <__aeabi_fdiv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fe3c 	bl	8000ad0 <__aeabi_fsub>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	495b      	ldr	r1, [pc, #364]	@ (8002fc8 <NTC_Read+0x260>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd ff41 	bl	8000ce4 <__aeabi_fmul>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b59      	ldr	r3, [pc, #356]	@ (8002fcc <NTC_Read+0x264>)
 8002e68:	601a      	str	r2, [r3, #0]
    // T0_K = TEMPERATURENOMINAL + 273.15f;
    // steinhart = (1.0f/ BCOEFFICIENT) * log(resistance / THERMISTORNOMINAL);
    // steinhart = (1.0f/T0_K) + steinhart;
    // steinhart = (1.0f/ steinhart);
    // steinhart = steinhart - 273.15f;
    steinhart = resistance / THERMISTORNOMINAL;  //Compute the ratio of thermistor resistance to nominal resistance
 8002e6a:	4b58      	ldr	r3, [pc, #352]	@ (8002fcc <NTC_Read+0x264>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fad2 	bl	8000418 <__aeabi_f2d>
 8002e74:	a344      	add	r3, pc, #272	@ (adr r3, 8002f88 <NTC_Read+0x220>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fc4f 	bl	800071c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fdcf 	bl	8000a28 <__aeabi_d2f>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4a50      	ldr	r2, [pc, #320]	@ (8002fd0 <NTC_Read+0x268>)
 8002e8e:	6013      	str	r3, [r2, #0]
    steinhart = log(steinhart);  //Compute the natural logarithm of the resistance ratio
 8002e90:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd0 <NTC_Read+0x268>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fabf 	bl	8000418 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f006 ff69 	bl	8009d78 <log>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fdbb 	bl	8000a28 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4a46      	ldr	r2, [pc, #280]	@ (8002fd0 <NTC_Read+0x268>)
 8002eb6:	6013      	str	r3, [r2, #0]
    steinhart /= BCOEFFICIENT;  //Divide by the thermistor's Beta coefficient
 8002eb8:	4b45      	ldr	r3, [pc, #276]	@ (8002fd0 <NTC_Read+0x268>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd faab 	bl	8000418 <__aeabi_f2d>
 8002ec2:	a333      	add	r3, pc, #204	@ (adr r3, 8002f90 <NTC_Read+0x228>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fc28 	bl	800071c <__aeabi_ddiv>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fda8 	bl	8000a28 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd0 <NTC_Read+0x268>)
 8002edc:	6013      	str	r3, [r2, #0]
    steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15);  //Add the reciprocal of the nominal temperature in Kelvin
 8002ede:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd0 <NTC_Read+0x268>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fa98 	bl	8000418 <__aeabi_f2d>
 8002ee8:	a32b      	add	r3, pc, #172	@ (adr r3, 8002f98 <NTC_Read+0x230>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd f935 	bl	800015c <__adddf3>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7fd fd95 	bl	8000a28 <__aeabi_d2f>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4a33      	ldr	r2, [pc, #204]	@ (8002fd0 <NTC_Read+0x268>)
 8002f02:	6013      	str	r3, [r2, #0]
    steinhart = 1.0 / steinhart;  //Compute the reciprocal to get the temperature in Kelvin
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <NTC_Read+0x268>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f0e:	f7fd ff9d 	bl	8000e4c <__aeabi_fdiv>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <NTC_Read+0x268>)
 8002f18:	601a      	str	r2, [r3, #0]
    steinhart -= 273.15;  //Convert the temperature from Kelvin to Celsius
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <NTC_Read+0x268>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fa7a 	bl	8000418 <__aeabi_f2d>
 8002f24:	a31e      	add	r3, pc, #120	@ (adr r3, 8002fa0 <NTC_Read+0x238>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f7fd f915 	bl	8000158 <__aeabi_dsub>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	f7fd fd77 	bl	8000a28 <__aeabi_d2f>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4a24      	ldr	r2, [pc, #144]	@ (8002fd0 <NTC_Read+0x268>)
 8002f3e:	6013      	str	r3, [r2, #0]
    //steinhart = steinhart - 2;
  }
  if ((steinhart > 100)||(steinhart < 0))
 8002f40:	4b23      	ldr	r3, [pc, #140]	@ (8002fd0 <NTC_Read+0x268>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4923      	ldr	r1, [pc, #140]	@ (8002fd4 <NTC_Read+0x26c>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f888 	bl	800105c <__aeabi_fcmpgt>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <NTC_Read+0x1fe>
 8002f52:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd0 <NTC_Read+0x268>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe f860 	bl	8001020 <__aeabi_fcmplt>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <NTC_Read+0x206>
  {
    steinhart = 2;
 8002f66:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <NTC_Read+0x268>)
 8002f68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f6c:	601a      	str	r2, [r3, #0]
  }
  
  return (uint8_t)steinhart;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	@ (8002fd0 <NTC_Read+0x268>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f87c 	bl	8001070 <__aeabi_f2uiz>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b2db      	uxtb	r3, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	f3af 8000 	nop.w
 8002f88:	70a3d70a 	.word	0x70a3d70a
 8002f8c:	40c2595d 	.word	0x40c2595d
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	40a16acc 	.word	0x40a16acc
 8002f98:	dcb5db83 	.word	0xdcb5db83
 8002f9c:	3f6b79e1 	.word	0x3f6b79e1
 8002fa0:	66666666 	.word	0x66666666
 8002fa4:	40711266 	.word	0x40711266
 8002fa8:	20000104 	.word	0x20000104
 8002fac:	2000010c 	.word	0x2000010c
 8002fb0:	20000128 	.word	0x20000128
 8002fb4:	200000dc 	.word	0x200000dc
 8002fb8:	41200000 	.word	0x41200000
 8002fbc:	457ff000 	.word	0x457ff000
 8002fc0:	405147ae 	.word	0x405147ae
 8002fc4:	40a00000 	.word	0x40a00000
 8002fc8:	46147000 	.word	0x46147000
 8002fcc:	20000110 	.word	0x20000110
 8002fd0:	20000108 	.word	0x20000108
 8002fd4:	42c80000 	.word	0x42c80000

08002fd8 <Segments_Scan>:

uint8_t segment_position = 0;
uint8_t segment_value[14] = {0};

void Segments_Scan(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    if (++segment_position > position_Level)
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <Segments_Scan+0x16c>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b57      	ldr	r3, [pc, #348]	@ (8003144 <Segments_Scan+0x16c>)
 8002fe6:	701a      	strb	r2, [r3, #0]
 8002fe8:	4b56      	ldr	r3, [pc, #344]	@ (8003144 <Segments_Scan+0x16c>)
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	4b56      	ldr	r3, [pc, #344]	@ (8003148 <Segments_Scan+0x170>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <Segments_Scan+0x22>
        segment_position = 0;
 8002ff4:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <Segments_Scan+0x16c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(SEG_H1, LOW);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003000:	4852      	ldr	r0, [pc, #328]	@ (800314c <Segments_Scan+0x174>)
 8003002:	f004 fc70 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_H2, LOW);
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800300c:	4850      	ldr	r0, [pc, #320]	@ (8003150 <Segments_Scan+0x178>)
 800300e:	f004 fc6a 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_M1, LOW);
 8003012:	2200      	movs	r2, #0
 8003014:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003018:	484d      	ldr	r0, [pc, #308]	@ (8003150 <Segments_Scan+0x178>)
 800301a:	f004 fc64 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_M2, LOW);
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003024:	484a      	ldr	r0, [pc, #296]	@ (8003150 <Segments_Scan+0x178>)
 8003026:	f004 fc5e 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_S1, LOW);
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003030:	4847      	ldr	r0, [pc, #284]	@ (8003150 <Segments_Scan+0x178>)
 8003032:	f004 fc58 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG_S2, LOW);
 8003036:	2200      	movs	r2, #0
 8003038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800303c:	4844      	ldr	r0, [pc, #272]	@ (8003150 <Segments_Scan+0x178>)
 800303e:	f004 fc52 	bl	80078e6 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(SEG_DAY, LOW);
 8003042:	2200      	movs	r2, #0
 8003044:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003048:	4841      	ldr	r0, [pc, #260]	@ (8003150 <Segments_Scan+0x178>)
 800304a:	f004 fc4c 	bl	80078e6 <HAL_GPIO_WritePin>

    Segment_Map(segment_value[segment_position]);
 800304e:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <Segments_Scan+0x16c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <Segments_Scan+0x17c>)
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f87d 	bl	8003158 <Segment_Map>

    switch (segment_position)
 800305e:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <Segments_Scan+0x16c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d841      	bhi.n	80030ea <Segments_Scan+0x112>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <Segments_Scan+0x94>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003089 	.word	0x08003089
 8003070:	08003097 	.word	0x08003097
 8003074:	080030a5 	.word	0x080030a5
 8003078:	080030b3 	.word	0x080030b3
 800307c:	080030c1 	.word	0x080030c1
 8003080:	080030cf 	.word	0x080030cf
 8003084:	080030dd 	.word	0x080030dd
    {
    case 0:
        HAL_GPIO_WritePin(SEG_H1, HIGH);
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800308e:	482f      	ldr	r0, [pc, #188]	@ (800314c <Segments_Scan+0x174>)
 8003090:	f004 fc29 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003094:	e054      	b.n	8003140 <Segments_Scan+0x168>
    case 1:
        HAL_GPIO_WritePin(SEG_H2, HIGH);
 8003096:	2201      	movs	r2, #1
 8003098:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800309c:	482c      	ldr	r0, [pc, #176]	@ (8003150 <Segments_Scan+0x178>)
 800309e:	f004 fc22 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030a2:	e04d      	b.n	8003140 <Segments_Scan+0x168>
    case 2:
        HAL_GPIO_WritePin(SEG_M1, HIGH);
 80030a4:	2201      	movs	r2, #1
 80030a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030aa:	4829      	ldr	r0, [pc, #164]	@ (8003150 <Segments_Scan+0x178>)
 80030ac:	f004 fc1b 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030b0:	e046      	b.n	8003140 <Segments_Scan+0x168>
    case 3:
        HAL_GPIO_WritePin(SEG_M2, HIGH);
 80030b2:	2201      	movs	r2, #1
 80030b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80030b8:	4825      	ldr	r0, [pc, #148]	@ (8003150 <Segments_Scan+0x178>)
 80030ba:	f004 fc14 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030be:	e03f      	b.n	8003140 <Segments_Scan+0x168>
    case 4:
        HAL_GPIO_WritePin(SEG_S1, HIGH);
 80030c0:	2201      	movs	r2, #1
 80030c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030c6:	4822      	ldr	r0, [pc, #136]	@ (8003150 <Segments_Scan+0x178>)
 80030c8:	f004 fc0d 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030cc:	e038      	b.n	8003140 <Segments_Scan+0x168>
    case 5:
        HAL_GPIO_WritePin(SEG_S2, HIGH);
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030d4:	481e      	ldr	r0, [pc, #120]	@ (8003150 <Segments_Scan+0x178>)
 80030d6:	f004 fc06 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030da:	e031      	b.n	8003140 <Segments_Scan+0x168>
    case 6:
        HAL_GPIO_WritePin(SEG_DAY, HIGH);
 80030dc:	2201      	movs	r2, #1
 80030de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e2:	481b      	ldr	r0, [pc, #108]	@ (8003150 <Segments_Scan+0x178>)
 80030e4:	f004 fbff 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80030e8:	e02a      	b.n	8003140 <Segments_Scan+0x168>
    default:
        HAL_GPIO_WritePin(SEG_H1, LOW);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030f0:	4816      	ldr	r0, [pc, #88]	@ (800314c <Segments_Scan+0x174>)
 80030f2:	f004 fbf8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_H2, LOW);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030fc:	4814      	ldr	r0, [pc, #80]	@ (8003150 <Segments_Scan+0x178>)
 80030fe:	f004 fbf2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M1, LOW);
 8003102:	2200      	movs	r2, #0
 8003104:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003108:	4811      	ldr	r0, [pc, #68]	@ (8003150 <Segments_Scan+0x178>)
 800310a:	f004 fbec 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M2, LOW);
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003114:	480e      	ldr	r0, [pc, #56]	@ (8003150 <Segments_Scan+0x178>)
 8003116:	f004 fbe6 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S1, LOW);
 800311a:	2200      	movs	r2, #0
 800311c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003120:	480b      	ldr	r0, [pc, #44]	@ (8003150 <Segments_Scan+0x178>)
 8003122:	f004 fbe0 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S2, LOW);
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800312c:	4808      	ldr	r0, [pc, #32]	@ (8003150 <Segments_Scan+0x178>)
 800312e:	f004 fbda 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_DAY, LOW);
 8003132:	2200      	movs	r2, #0
 8003134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003138:	4805      	ldr	r0, [pc, #20]	@ (8003150 <Segments_Scan+0x178>)
 800313a:	f004 fbd4 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 800313e:	bf00      	nop
    }
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000114 	.word	0x20000114
 8003148:	20000003 	.word	0x20000003
 800314c:	40010c00 	.word	0x40010c00
 8003150:	40010800 	.word	0x40010800
 8003154:	20000118 	.word	0x20000118

08003158 <Segment_Map>:

void Segment_Map(uint8_t value)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
    switch (value)
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b75      	cmp	r3, #117	@ 0x75
 8003166:	f200 859f 	bhi.w	8003ca8 <Segment_Map+0xb50>
 800316a:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <Segment_Map+0x18>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	0800339f 	.word	0x0800339f
 8003174:	080033f5 	.word	0x080033f5
 8003178:	0800344b 	.word	0x0800344b
 800317c:	080034a1 	.word	0x080034a1
 8003180:	080034f7 	.word	0x080034f7
 8003184:	0800354b 	.word	0x0800354b
 8003188:	0800359f 	.word	0x0800359f
 800318c:	080035f3 	.word	0x080035f3
 8003190:	08003647 	.word	0x08003647
 8003194:	080036b5 	.word	0x080036b5
 8003198:	08003ca9 	.word	0x08003ca9
 800319c:	08003ca9 	.word	0x08003ca9
 80031a0:	08003ca9 	.word	0x08003ca9
 80031a4:	08003ca9 	.word	0x08003ca9
 80031a8:	08003ca9 	.word	0x08003ca9
 80031ac:	08003ca9 	.word	0x08003ca9
 80031b0:	08003ca9 	.word	0x08003ca9
 80031b4:	08003ca9 	.word	0x08003ca9
 80031b8:	08003ca9 	.word	0x08003ca9
 80031bc:	08003ca9 	.word	0x08003ca9
 80031c0:	08003ca9 	.word	0x08003ca9
 80031c4:	08003ca9 	.word	0x08003ca9
 80031c8:	08003ca9 	.word	0x08003ca9
 80031cc:	08003ca9 	.word	0x08003ca9
 80031d0:	08003ca9 	.word	0x08003ca9
 80031d4:	08003ca9 	.word	0x08003ca9
 80031d8:	08003ca9 	.word	0x08003ca9
 80031dc:	08003ca9 	.word	0x08003ca9
 80031e0:	08003ca9 	.word	0x08003ca9
 80031e4:	08003ca9 	.word	0x08003ca9
 80031e8:	08003ca9 	.word	0x08003ca9
 80031ec:	08003ca9 	.word	0x08003ca9
 80031f0:	08003ca9 	.word	0x08003ca9
 80031f4:	08003ca9 	.word	0x08003ca9
 80031f8:	08003ca9 	.word	0x08003ca9
 80031fc:	08003ca9 	.word	0x08003ca9
 8003200:	08003ca9 	.word	0x08003ca9
 8003204:	08003ca9 	.word	0x08003ca9
 8003208:	08003ca9 	.word	0x08003ca9
 800320c:	08003ca9 	.word	0x08003ca9
 8003210:	08003ca9 	.word	0x08003ca9
 8003214:	08003ca9 	.word	0x08003ca9
 8003218:	08003ca9 	.word	0x08003ca9
 800321c:	08003ca9 	.word	0x08003ca9
 8003220:	08003ca9 	.word	0x08003ca9
 8003224:	08003ca9 	.word	0x08003ca9
 8003228:	08003ca9 	.word	0x08003ca9
 800322c:	08003ca9 	.word	0x08003ca9
 8003230:	08003ca9 	.word	0x08003ca9
 8003234:	08003ca9 	.word	0x08003ca9
 8003238:	08003ca9 	.word	0x08003ca9
 800323c:	08003ca9 	.word	0x08003ca9
 8003240:	08003ca9 	.word	0x08003ca9
 8003244:	08003ca9 	.word	0x08003ca9
 8003248:	08003ca9 	.word	0x08003ca9
 800324c:	08003ca9 	.word	0x08003ca9
 8003250:	08003ca9 	.word	0x08003ca9
 8003254:	08003ca9 	.word	0x08003ca9
 8003258:	08003ca9 	.word	0x08003ca9
 800325c:	08003ca9 	.word	0x08003ca9
 8003260:	08003ca9 	.word	0x08003ca9
 8003264:	08003ca9 	.word	0x08003ca9
 8003268:	08003ca9 	.word	0x08003ca9
 800326c:	08003ca9 	.word	0x08003ca9
 8003270:	08003ca9 	.word	0x08003ca9
 8003274:	080039a9 	.word	0x080039a9
 8003278:	08003ca9 	.word	0x08003ca9
 800327c:	0800375d 	.word	0x0800375d
 8003280:	08003901 	.word	0x08003901
 8003284:	08003ca9 	.word	0x08003ca9
 8003288:	08003c01 	.word	0x08003c01
 800328c:	08003ca9 	.word	0x08003ca9
 8003290:	08003ca9 	.word	0x08003ca9
 8003294:	08003ca9 	.word	0x08003ca9
 8003298:	08003ca9 	.word	0x08003ca9
 800329c:	08003ca9 	.word	0x08003ca9
 80032a0:	08003ca9 	.word	0x08003ca9
 80032a4:	08003ab1 	.word	0x08003ab1
 80032a8:	08003349 	.word	0x08003349
 80032ac:	08003ca9 	.word	0x08003ca9
 80032b0:	08003805 	.word	0x08003805
 80032b4:	08003ca9 	.word	0x08003ca9
 80032b8:	08003ca9 	.word	0x08003ca9
 80032bc:	08003c55 	.word	0x08003c55
 80032c0:	08003b05 	.word	0x08003b05
 80032c4:	080037b1 	.word	0x080037b1
 80032c8:	08003ca9 	.word	0x08003ca9
 80032cc:	08003b59 	.word	0x08003b59
 80032d0:	08003ca9 	.word	0x08003ca9
 80032d4:	08003ca9 	.word	0x08003ca9
 80032d8:	08003ca9 	.word	0x08003ca9
 80032dc:	08003ca9 	.word	0x08003ca9
 80032e0:	08003ca9 	.word	0x08003ca9
 80032e4:	08003ca9 	.word	0x08003ca9
 80032e8:	08003ca9 	.word	0x08003ca9
 80032ec:	08003ca9 	.word	0x08003ca9
 80032f0:	08003ca9 	.word	0x08003ca9
 80032f4:	08003ca9 	.word	0x08003ca9
 80032f8:	08003ca9 	.word	0x08003ca9
 80032fc:	08003ca9 	.word	0x08003ca9
 8003300:	08003859 	.word	0x08003859
 8003304:	08003ca9 	.word	0x08003ca9
 8003308:	08003955 	.word	0x08003955
 800330c:	08003ca9 	.word	0x08003ca9
 8003310:	08003ca9 	.word	0x08003ca9
 8003314:	08003ca9 	.word	0x08003ca9
 8003318:	08003ca9 	.word	0x08003ca9
 800331c:	08003ca9 	.word	0x08003ca9
 8003320:	08003ca9 	.word	0x08003ca9
 8003324:	08003ca9 	.word	0x08003ca9
 8003328:	080038ad 	.word	0x080038ad
 800332c:	08003709 	.word	0x08003709
 8003330:	08003ca9 	.word	0x08003ca9
 8003334:	08003ca9 	.word	0x08003ca9
 8003338:	08003a09 	.word	0x08003a09
 800333c:	08003ca9 	.word	0x08003ca9
 8003340:	08003bad 	.word	0x08003bad
 8003344:	08003a5d 	.word	0x08003a5d
    {
    case 'N':
        HAL_GPIO_WritePin(A, LOW);
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800334e:	48d6      	ldr	r0, [pc, #856]	@ (80036a8 <Segment_Map+0x550>)
 8003350:	f004 fac9 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800335a:	48d3      	ldr	r0, [pc, #844]	@ (80036a8 <Segment_Map+0x550>)
 800335c:	f004 fac3 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003360:	2200      	movs	r2, #0
 8003362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003366:	48d1      	ldr	r0, [pc, #836]	@ (80036ac <Segment_Map+0x554>)
 8003368:	f004 fabd 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 800336c:	2200      	movs	r2, #0
 800336e:	2101      	movs	r1, #1
 8003370:	48cf      	ldr	r0, [pc, #828]	@ (80036b0 <Segment_Map+0x558>)
 8003372:	f004 fab8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003376:	2200      	movs	r2, #0
 8003378:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800337c:	48cb      	ldr	r0, [pc, #812]	@ (80036ac <Segment_Map+0x554>)
 800337e:	f004 fab2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003388:	48c7      	ldr	r0, [pc, #796]	@ (80036a8 <Segment_Map+0x550>)
 800338a:	f004 faac 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003394:	48c5      	ldr	r0, [pc, #788]	@ (80036ac <Segment_Map+0x554>)
 8003396:	f004 faa6 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 800339a:	f000 bcaf 	b.w	8003cfc <Segment_Map+0xba4>
    case 0:
        HAL_GPIO_WritePin(A, HIGH);
 800339e:	2201      	movs	r2, #1
 80033a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033a4:	48c0      	ldr	r0, [pc, #768]	@ (80036a8 <Segment_Map+0x550>)
 80033a6:	f004 fa9e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80033aa:	2201      	movs	r2, #1
 80033ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033b0:	48bd      	ldr	r0, [pc, #756]	@ (80036a8 <Segment_Map+0x550>)
 80033b2:	f004 fa98 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80033b6:	2201      	movs	r2, #1
 80033b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033bc:	48bb      	ldr	r0, [pc, #748]	@ (80036ac <Segment_Map+0x554>)
 80033be:	f004 fa92 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 80033c2:	2201      	movs	r2, #1
 80033c4:	2101      	movs	r1, #1
 80033c6:	48ba      	ldr	r0, [pc, #744]	@ (80036b0 <Segment_Map+0x558>)
 80033c8:	f004 fa8d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033d2:	48b6      	ldr	r0, [pc, #728]	@ (80036ac <Segment_Map+0x554>)
 80033d4:	f004 fa87 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 80033d8:	2201      	movs	r2, #1
 80033da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033de:	48b2      	ldr	r0, [pc, #712]	@ (80036a8 <Segment_Map+0x550>)
 80033e0:	f004 fa81 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80033ea:	48b0      	ldr	r0, [pc, #704]	@ (80036ac <Segment_Map+0x554>)
 80033ec:	f004 fa7b 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80033f0:	f000 bc84 	b.w	8003cfc <Segment_Map+0xba4>
    case 1:
        HAL_GPIO_WritePin(A, LOW);
 80033f4:	2200      	movs	r2, #0
 80033f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033fa:	48ab      	ldr	r0, [pc, #684]	@ (80036a8 <Segment_Map+0x550>)
 80033fc:	f004 fa73 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003400:	2201      	movs	r2, #1
 8003402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003406:	48a8      	ldr	r0, [pc, #672]	@ (80036a8 <Segment_Map+0x550>)
 8003408:	f004 fa6d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 800340c:	2201      	movs	r2, #1
 800340e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003412:	48a6      	ldr	r0, [pc, #664]	@ (80036ac <Segment_Map+0x554>)
 8003414:	f004 fa67 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003418:	2200      	movs	r2, #0
 800341a:	2101      	movs	r1, #1
 800341c:	48a4      	ldr	r0, [pc, #656]	@ (80036b0 <Segment_Map+0x558>)
 800341e:	f004 fa62 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003422:	2200      	movs	r2, #0
 8003424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003428:	48a0      	ldr	r0, [pc, #640]	@ (80036ac <Segment_Map+0x554>)
 800342a:	f004 fa5c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 800342e:	2200      	movs	r2, #0
 8003430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003434:	489c      	ldr	r0, [pc, #624]	@ (80036a8 <Segment_Map+0x550>)
 8003436:	f004 fa56 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 800343a:	2200      	movs	r2, #0
 800343c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003440:	489a      	ldr	r0, [pc, #616]	@ (80036ac <Segment_Map+0x554>)
 8003442:	f004 fa50 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003446:	f000 bc59 	b.w	8003cfc <Segment_Map+0xba4>
    case 2:
        HAL_GPIO_WritePin(A, HIGH);
 800344a:	2201      	movs	r2, #1
 800344c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003450:	4895      	ldr	r0, [pc, #596]	@ (80036a8 <Segment_Map+0x550>)
 8003452:	f004 fa48 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003456:	2201      	movs	r2, #1
 8003458:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800345c:	4892      	ldr	r0, [pc, #584]	@ (80036a8 <Segment_Map+0x550>)
 800345e:	f004 fa42 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003462:	2200      	movs	r2, #0
 8003464:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003468:	4890      	ldr	r0, [pc, #576]	@ (80036ac <Segment_Map+0x554>)
 800346a:	f004 fa3c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 800346e:	2201      	movs	r2, #1
 8003470:	2101      	movs	r1, #1
 8003472:	488f      	ldr	r0, [pc, #572]	@ (80036b0 <Segment_Map+0x558>)
 8003474:	f004 fa37 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800347e:	488b      	ldr	r0, [pc, #556]	@ (80036ac <Segment_Map+0x554>)
 8003480:	f004 fa31 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800348a:	4887      	ldr	r0, [pc, #540]	@ (80036a8 <Segment_Map+0x550>)
 800348c:	f004 fa2b 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003490:	2201      	movs	r2, #1
 8003492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003496:	4885      	ldr	r0, [pc, #532]	@ (80036ac <Segment_Map+0x554>)
 8003498:	f004 fa25 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 800349c:	f000 bc2e 	b.w	8003cfc <Segment_Map+0xba4>
    case 3:
        HAL_GPIO_WritePin(A, HIGH);
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034a6:	4880      	ldr	r0, [pc, #512]	@ (80036a8 <Segment_Map+0x550>)
 80034a8:	f004 fa1d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80034ac:	2201      	movs	r2, #1
 80034ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034b2:	487d      	ldr	r0, [pc, #500]	@ (80036a8 <Segment_Map+0x550>)
 80034b4:	f004 fa17 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80034b8:	2201      	movs	r2, #1
 80034ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034be:	487b      	ldr	r0, [pc, #492]	@ (80036ac <Segment_Map+0x554>)
 80034c0:	f004 fa11 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 80034c4:	2201      	movs	r2, #1
 80034c6:	2101      	movs	r1, #1
 80034c8:	4879      	ldr	r0, [pc, #484]	@ (80036b0 <Segment_Map+0x558>)
 80034ca:	f004 fa0c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034d4:	4875      	ldr	r0, [pc, #468]	@ (80036ac <Segment_Map+0x554>)
 80034d6:	f004 fa06 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 80034da:	2200      	movs	r2, #0
 80034dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034e0:	4871      	ldr	r0, [pc, #452]	@ (80036a8 <Segment_Map+0x550>)
 80034e2:	f004 fa00 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034ec:	486f      	ldr	r0, [pc, #444]	@ (80036ac <Segment_Map+0x554>)
 80034ee:	f004 f9fa 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80034f2:	f000 bc03 	b.w	8003cfc <Segment_Map+0xba4>
    case 4:
        HAL_GPIO_WritePin(A, LOW);
 80034f6:	2200      	movs	r2, #0
 80034f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034fc:	486a      	ldr	r0, [pc, #424]	@ (80036a8 <Segment_Map+0x550>)
 80034fe:	f004 f9f2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003502:	2201      	movs	r2, #1
 8003504:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003508:	4867      	ldr	r0, [pc, #412]	@ (80036a8 <Segment_Map+0x550>)
 800350a:	f004 f9ec 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 800350e:	2201      	movs	r2, #1
 8003510:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003514:	4865      	ldr	r0, [pc, #404]	@ (80036ac <Segment_Map+0x554>)
 8003516:	f004 f9e6 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 800351a:	2200      	movs	r2, #0
 800351c:	2101      	movs	r1, #1
 800351e:	4864      	ldr	r0, [pc, #400]	@ (80036b0 <Segment_Map+0x558>)
 8003520:	f004 f9e1 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800352a:	4860      	ldr	r0, [pc, #384]	@ (80036ac <Segment_Map+0x554>)
 800352c:	f004 f9db 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 8003530:	2201      	movs	r2, #1
 8003532:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003536:	485c      	ldr	r0, [pc, #368]	@ (80036a8 <Segment_Map+0x550>)
 8003538:	f004 f9d5 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 800353c:	2201      	movs	r2, #1
 800353e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003542:	485a      	ldr	r0, [pc, #360]	@ (80036ac <Segment_Map+0x554>)
 8003544:	f004 f9cf 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003548:	e3d8      	b.n	8003cfc <Segment_Map+0xba4>
    case 5:
        HAL_GPIO_WritePin(A, HIGH);
 800354a:	2201      	movs	r2, #1
 800354c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003550:	4855      	ldr	r0, [pc, #340]	@ (80036a8 <Segment_Map+0x550>)
 8003552:	f004 f9c8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003556:	2200      	movs	r2, #0
 8003558:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800355c:	4852      	ldr	r0, [pc, #328]	@ (80036a8 <Segment_Map+0x550>)
 800355e:	f004 f9c2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003568:	4850      	ldr	r0, [pc, #320]	@ (80036ac <Segment_Map+0x554>)
 800356a:	f004 f9bc 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 800356e:	2201      	movs	r2, #1
 8003570:	2101      	movs	r1, #1
 8003572:	484f      	ldr	r0, [pc, #316]	@ (80036b0 <Segment_Map+0x558>)
 8003574:	f004 f9b7 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003578:	2200      	movs	r2, #0
 800357a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800357e:	484b      	ldr	r0, [pc, #300]	@ (80036ac <Segment_Map+0x554>)
 8003580:	f004 f9b1 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 8003584:	2201      	movs	r2, #1
 8003586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800358a:	4847      	ldr	r0, [pc, #284]	@ (80036a8 <Segment_Map+0x550>)
 800358c:	f004 f9ab 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003590:	2201      	movs	r2, #1
 8003592:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003596:	4845      	ldr	r0, [pc, #276]	@ (80036ac <Segment_Map+0x554>)
 8003598:	f004 f9a5 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 800359c:	e3ae      	b.n	8003cfc <Segment_Map+0xba4>
    case 6:
        HAL_GPIO_WritePin(A, HIGH);
 800359e:	2201      	movs	r2, #1
 80035a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a4:	4840      	ldr	r0, [pc, #256]	@ (80036a8 <Segment_Map+0x550>)
 80035a6:	f004 f99e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035b0:	483d      	ldr	r0, [pc, #244]	@ (80036a8 <Segment_Map+0x550>)
 80035b2:	f004 f998 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80035b6:	2201      	movs	r2, #1
 80035b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035bc:	483b      	ldr	r0, [pc, #236]	@ (80036ac <Segment_Map+0x554>)
 80035be:	f004 f992 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 80035c2:	2201      	movs	r2, #1
 80035c4:	2101      	movs	r1, #1
 80035c6:	483a      	ldr	r0, [pc, #232]	@ (80036b0 <Segment_Map+0x558>)
 80035c8:	f004 f98d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 80035cc:	2201      	movs	r2, #1
 80035ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035d2:	4836      	ldr	r0, [pc, #216]	@ (80036ac <Segment_Map+0x554>)
 80035d4:	f004 f987 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 80035d8:	2201      	movs	r2, #1
 80035da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035de:	4832      	ldr	r0, [pc, #200]	@ (80036a8 <Segment_Map+0x550>)
 80035e0:	f004 f981 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 80035e4:	2201      	movs	r2, #1
 80035e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035ea:	4830      	ldr	r0, [pc, #192]	@ (80036ac <Segment_Map+0x554>)
 80035ec:	f004 f97b 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80035f0:	e384      	b.n	8003cfc <Segment_Map+0xba4>
    case 7:
        HAL_GPIO_WritePin(A, HIGH);
 80035f2:	2201      	movs	r2, #1
 80035f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035f8:	482b      	ldr	r0, [pc, #172]	@ (80036a8 <Segment_Map+0x550>)
 80035fa:	f004 f974 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003604:	4828      	ldr	r0, [pc, #160]	@ (80036a8 <Segment_Map+0x550>)
 8003606:	f004 f96e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 800360a:	2201      	movs	r2, #1
 800360c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003610:	4826      	ldr	r0, [pc, #152]	@ (80036ac <Segment_Map+0x554>)
 8003612:	f004 f968 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003616:	2200      	movs	r2, #0
 8003618:	2101      	movs	r1, #1
 800361a:	4825      	ldr	r0, [pc, #148]	@ (80036b0 <Segment_Map+0x558>)
 800361c:	f004 f963 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003626:	4821      	ldr	r0, [pc, #132]	@ (80036ac <Segment_Map+0x554>)
 8003628:	f004 f95d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003632:	481d      	ldr	r0, [pc, #116]	@ (80036a8 <Segment_Map+0x550>)
 8003634:	f004 f957 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003638:	2200      	movs	r2, #0
 800363a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800363e:	481b      	ldr	r0, [pc, #108]	@ (80036ac <Segment_Map+0x554>)
 8003640:	f004 f951 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003644:	e35a      	b.n	8003cfc <Segment_Map+0xba4>
    case 8:
        HAL_GPIO_WritePin(A, HIGH);
 8003646:	2201      	movs	r2, #1
 8003648:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800364c:	4816      	ldr	r0, [pc, #88]	@ (80036a8 <Segment_Map+0x550>)
 800364e:	f004 f94a 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A, HIGH);
 8003652:	2201      	movs	r2, #1
 8003654:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003658:	4813      	ldr	r0, [pc, #76]	@ (80036a8 <Segment_Map+0x550>)
 800365a:	f004 f944 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 800365e:	2201      	movs	r2, #1
 8003660:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003664:	4810      	ldr	r0, [pc, #64]	@ (80036a8 <Segment_Map+0x550>)
 8003666:	f004 f93e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 800366a:	2201      	movs	r2, #1
 800366c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003670:	480e      	ldr	r0, [pc, #56]	@ (80036ac <Segment_Map+0x554>)
 8003672:	f004 f938 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 8003676:	2201      	movs	r2, #1
 8003678:	2101      	movs	r1, #1
 800367a:	480d      	ldr	r0, [pc, #52]	@ (80036b0 <Segment_Map+0x558>)
 800367c:	f004 f933 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003680:	2201      	movs	r2, #1
 8003682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003686:	4809      	ldr	r0, [pc, #36]	@ (80036ac <Segment_Map+0x554>)
 8003688:	f004 f92d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003692:	4805      	ldr	r0, [pc, #20]	@ (80036a8 <Segment_Map+0x550>)
 8003694:	f004 f927 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003698:	2201      	movs	r2, #1
 800369a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800369e:	4803      	ldr	r0, [pc, #12]	@ (80036ac <Segment_Map+0x554>)
 80036a0:	f004 f921 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80036a4:	e32a      	b.n	8003cfc <Segment_Map+0xba4>
 80036a6:	bf00      	nop
 80036a8:	40010c00 	.word	0x40010c00
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40010800 	.word	0x40010800
    case 9:
        HAL_GPIO_WritePin(A, HIGH);
 80036b4:	2201      	movs	r2, #1
 80036b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80036ba:	48d0      	ldr	r0, [pc, #832]	@ (80039fc <Segment_Map+0x8a4>)
 80036bc:	f004 f913 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80036c0:	2201      	movs	r2, #1
 80036c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036c6:	48cd      	ldr	r0, [pc, #820]	@ (80039fc <Segment_Map+0x8a4>)
 80036c8:	f004 f90d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80036cc:	2201      	movs	r2, #1
 80036ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036d2:	48cb      	ldr	r0, [pc, #812]	@ (8003a00 <Segment_Map+0x8a8>)
 80036d4:	f004 f907 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 80036d8:	2201      	movs	r2, #1
 80036da:	2101      	movs	r1, #1
 80036dc:	48c9      	ldr	r0, [pc, #804]	@ (8003a04 <Segment_Map+0x8ac>)
 80036de:	f004 f902 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 80036e2:	2200      	movs	r2, #0
 80036e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036e8:	48c5      	ldr	r0, [pc, #788]	@ (8003a00 <Segment_Map+0x8a8>)
 80036ea:	f004 f8fc 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036f4:	48c1      	ldr	r0, [pc, #772]	@ (80039fc <Segment_Map+0x8a4>)
 80036f6:	f004 f8f6 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 80036fa:	2201      	movs	r2, #1
 80036fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003700:	48bf      	ldr	r0, [pc, #764]	@ (8003a00 <Segment_Map+0x8a8>)
 8003702:	f004 f8f0 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003706:	e2f9      	b.n	8003cfc <Segment_Map+0xba4>
    case 'o':
        HAL_GPIO_WritePin(A, HIGH);
 8003708:	2201      	movs	r2, #1
 800370a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800370e:	48bb      	ldr	r0, [pc, #748]	@ (80039fc <Segment_Map+0x8a4>)
 8003710:	f004 f8e9 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800371a:	48b8      	ldr	r0, [pc, #736]	@ (80039fc <Segment_Map+0x8a4>)
 800371c:	f004 f8e3 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003726:	48b6      	ldr	r0, [pc, #728]	@ (8003a00 <Segment_Map+0x8a8>)
 8003728:	f004 f8dd 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 800372c:	2200      	movs	r2, #0
 800372e:	2101      	movs	r1, #1
 8003730:	48b4      	ldr	r0, [pc, #720]	@ (8003a04 <Segment_Map+0x8ac>)
 8003732:	f004 f8d8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800373c:	48b0      	ldr	r0, [pc, #704]	@ (8003a00 <Segment_Map+0x8a8>)
 800373e:	f004 f8d2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003748:	48ac      	ldr	r0, [pc, #688]	@ (80039fc <Segment_Map+0x8a4>)
 800374a:	f004 f8cc 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 800374e:	2201      	movs	r2, #1
 8003750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003754:	48aa      	ldr	r0, [pc, #680]	@ (8003a00 <Segment_Map+0x8a8>)
 8003756:	f004 f8c6 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 800375a:	e2cf      	b.n	8003cfc <Segment_Map+0xba4>
    case 'C':
        HAL_GPIO_WritePin(A, HIGH);
 800375c:	2201      	movs	r2, #1
 800375e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003762:	48a6      	ldr	r0, [pc, #664]	@ (80039fc <Segment_Map+0x8a4>)
 8003764:	f004 f8bf 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003768:	2200      	movs	r2, #0
 800376a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800376e:	48a3      	ldr	r0, [pc, #652]	@ (80039fc <Segment_Map+0x8a4>)
 8003770:	f004 f8b9 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800377a:	48a1      	ldr	r0, [pc, #644]	@ (8003a00 <Segment_Map+0x8a8>)
 800377c:	f004 f8b3 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 8003780:	2201      	movs	r2, #1
 8003782:	2101      	movs	r1, #1
 8003784:	489f      	ldr	r0, [pc, #636]	@ (8003a04 <Segment_Map+0x8ac>)
 8003786:	f004 f8ae 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 800378a:	2201      	movs	r2, #1
 800378c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003790:	489b      	ldr	r0, [pc, #620]	@ (8003a00 <Segment_Map+0x8a8>)
 8003792:	f004 f8a8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 8003796:	2201      	movs	r2, #1
 8003798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800379c:	4897      	ldr	r0, [pc, #604]	@ (80039fc <Segment_Map+0x8a4>)
 800379e:	f004 f8a2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 80037a2:	2200      	movs	r2, #0
 80037a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037a8:	4895      	ldr	r0, [pc, #596]	@ (8003a00 <Segment_Map+0x8a8>)
 80037aa:	f004 f89c 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80037ae:	e2a5      	b.n	8003cfc <Segment_Map+0xba4>
    case 'U':
        HAL_GPIO_WritePin(A, LOW);
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037b6:	4891      	ldr	r0, [pc, #580]	@ (80039fc <Segment_Map+0x8a4>)
 80037b8:	f004 f895 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80037bc:	2201      	movs	r2, #1
 80037be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037c2:	488e      	ldr	r0, [pc, #568]	@ (80039fc <Segment_Map+0x8a4>)
 80037c4:	f004 f88f 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80037c8:	2201      	movs	r2, #1
 80037ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037ce:	488c      	ldr	r0, [pc, #560]	@ (8003a00 <Segment_Map+0x8a8>)
 80037d0:	f004 f889 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 80037d4:	2201      	movs	r2, #1
 80037d6:	2101      	movs	r1, #1
 80037d8:	488a      	ldr	r0, [pc, #552]	@ (8003a04 <Segment_Map+0x8ac>)
 80037da:	f004 f884 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 80037de:	2201      	movs	r2, #1
 80037e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037e4:	4886      	ldr	r0, [pc, #536]	@ (8003a00 <Segment_Map+0x8a8>)
 80037e6:	f004 f87e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 80037ea:	2201      	movs	r2, #1
 80037ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037f0:	4882      	ldr	r0, [pc, #520]	@ (80039fc <Segment_Map+0x8a4>)
 80037f2:	f004 f878 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 80037f6:	2200      	movs	r2, #0
 80037f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037fc:	4880      	ldr	r0, [pc, #512]	@ (8003a00 <Segment_Map+0x8a8>)
 80037fe:	f004 f872 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003802:	e27b      	b.n	8003cfc <Segment_Map+0xba4>
    case 'P':
        HAL_GPIO_WritePin(A, HIGH);
 8003804:	2201      	movs	r2, #1
 8003806:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800380a:	487c      	ldr	r0, [pc, #496]	@ (80039fc <Segment_Map+0x8a4>)
 800380c:	f004 f86b 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003810:	2201      	movs	r2, #1
 8003812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003816:	4879      	ldr	r0, [pc, #484]	@ (80039fc <Segment_Map+0x8a4>)
 8003818:	f004 f865 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003822:	4877      	ldr	r0, [pc, #476]	@ (8003a00 <Segment_Map+0x8a8>)
 8003824:	f004 f85f 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003828:	2200      	movs	r2, #0
 800382a:	2101      	movs	r1, #1
 800382c:	4875      	ldr	r0, [pc, #468]	@ (8003a04 <Segment_Map+0x8ac>)
 800382e:	f004 f85a 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003832:	2201      	movs	r2, #1
 8003834:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003838:	4871      	ldr	r0, [pc, #452]	@ (8003a00 <Segment_Map+0x8a8>)
 800383a:	f004 f854 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 800383e:	2201      	movs	r2, #1
 8003840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003844:	486d      	ldr	r0, [pc, #436]	@ (80039fc <Segment_Map+0x8a4>)
 8003846:	f004 f84e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 800384a:	2201      	movs	r2, #1
 800384c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003850:	486b      	ldr	r0, [pc, #428]	@ (8003a00 <Segment_Map+0x8a8>)
 8003852:	f004 f848 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003856:	e251      	b.n	8003cfc <Segment_Map+0xba4>
    case 'd':
        HAL_GPIO_WritePin(A, LOW);
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800385e:	4867      	ldr	r0, [pc, #412]	@ (80039fc <Segment_Map+0x8a4>)
 8003860:	f004 f841 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003864:	2201      	movs	r2, #1
 8003866:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800386a:	4864      	ldr	r0, [pc, #400]	@ (80039fc <Segment_Map+0x8a4>)
 800386c:	f004 f83b 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 8003870:	2201      	movs	r2, #1
 8003872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003876:	4862      	ldr	r0, [pc, #392]	@ (8003a00 <Segment_Map+0x8a8>)
 8003878:	f004 f835 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 800387c:	2201      	movs	r2, #1
 800387e:	2101      	movs	r1, #1
 8003880:	4860      	ldr	r0, [pc, #384]	@ (8003a04 <Segment_Map+0x8ac>)
 8003882:	f004 f830 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003886:	2201      	movs	r2, #1
 8003888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800388c:	485c      	ldr	r0, [pc, #368]	@ (8003a00 <Segment_Map+0x8a8>)
 800388e:	f004 f82a 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003892:	2200      	movs	r2, #0
 8003894:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003898:	4858      	ldr	r0, [pc, #352]	@ (80039fc <Segment_Map+0x8a4>)
 800389a:	f004 f824 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 800389e:	2201      	movs	r2, #1
 80038a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038a4:	4856      	ldr	r0, [pc, #344]	@ (8003a00 <Segment_Map+0x8a8>)
 80038a6:	f004 f81e 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80038aa:	e227      	b.n	8003cfc <Segment_Map+0xba4>
    case 'n':
        HAL_GPIO_WritePin(A, LOW);
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038b2:	4852      	ldr	r0, [pc, #328]	@ (80039fc <Segment_Map+0x8a4>)
 80038b4:	f004 f817 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 80038b8:	2200      	movs	r2, #0
 80038ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038be:	484f      	ldr	r0, [pc, #316]	@ (80039fc <Segment_Map+0x8a4>)
 80038c0:	f004 f811 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80038c4:	2201      	movs	r2, #1
 80038c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038ca:	484d      	ldr	r0, [pc, #308]	@ (8003a00 <Segment_Map+0x8a8>)
 80038cc:	f004 f80b 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2101      	movs	r1, #1
 80038d4:	484b      	ldr	r0, [pc, #300]	@ (8003a04 <Segment_Map+0x8ac>)
 80038d6:	f004 f806 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 80038da:	2201      	movs	r2, #1
 80038dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038e0:	4847      	ldr	r0, [pc, #284]	@ (8003a00 <Segment_Map+0x8a8>)
 80038e2:	f004 f800 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 80038e6:	2200      	movs	r2, #0
 80038e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038ec:	4843      	ldr	r0, [pc, #268]	@ (80039fc <Segment_Map+0x8a4>)
 80038ee:	f003 fffa 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 80038f2:	2201      	movs	r2, #1
 80038f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80038f8:	4841      	ldr	r0, [pc, #260]	@ (8003a00 <Segment_Map+0x8a8>)
 80038fa:	f003 fff4 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80038fe:	e1fd      	b.n	8003cfc <Segment_Map+0xba4>
    case 'D':
        HAL_GPIO_WritePin(A, LOW);
 8003900:	2200      	movs	r2, #0
 8003902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003906:	483d      	ldr	r0, [pc, #244]	@ (80039fc <Segment_Map+0x8a4>)
 8003908:	f003 ffed 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 800390c:	2201      	movs	r2, #1
 800390e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003912:	483a      	ldr	r0, [pc, #232]	@ (80039fc <Segment_Map+0x8a4>)
 8003914:	f003 ffe7 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003918:	2200      	movs	r2, #0
 800391a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800391e:	4838      	ldr	r0, [pc, #224]	@ (8003a00 <Segment_Map+0x8a8>)
 8003920:	f003 ffe1 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003924:	2200      	movs	r2, #0
 8003926:	2101      	movs	r1, #1
 8003928:	4836      	ldr	r0, [pc, #216]	@ (8003a04 <Segment_Map+0x8ac>)
 800392a:	f003 ffdc 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 800392e:	2200      	movs	r2, #0
 8003930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003934:	4832      	ldr	r0, [pc, #200]	@ (8003a00 <Segment_Map+0x8a8>)
 8003936:	f003 ffd6 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 800393a:	2200      	movs	r2, #0
 800393c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003940:	482e      	ldr	r0, [pc, #184]	@ (80039fc <Segment_Map+0x8a4>)
 8003942:	f003 ffd0 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800394c:	482c      	ldr	r0, [pc, #176]	@ (8003a00 <Segment_Map+0x8a8>)
 800394e:	f003 ffca 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003952:	e1d3      	b.n	8003cfc <Segment_Map+0xba4>
     case 'f':
        HAL_GPIO_WritePin(A, HIGH);
 8003954:	2201      	movs	r2, #1
 8003956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800395a:	4828      	ldr	r0, [pc, #160]	@ (80039fc <Segment_Map+0x8a4>)
 800395c:	f003 ffc3 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003960:	2200      	movs	r2, #0
 8003962:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003966:	4825      	ldr	r0, [pc, #148]	@ (80039fc <Segment_Map+0x8a4>)
 8003968:	f003 ffbd 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003972:	4823      	ldr	r0, [pc, #140]	@ (8003a00 <Segment_Map+0x8a8>)
 8003974:	f003 ffb7 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003978:	2200      	movs	r2, #0
 800397a:	2101      	movs	r1, #1
 800397c:	4821      	ldr	r0, [pc, #132]	@ (8003a04 <Segment_Map+0x8ac>)
 800397e:	f003 ffb2 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003982:	2201      	movs	r2, #1
 8003984:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003988:	481d      	ldr	r0, [pc, #116]	@ (8003a00 <Segment_Map+0x8a8>)
 800398a:	f003 ffac 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 800398e:	2201      	movs	r2, #1
 8003990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003994:	4819      	ldr	r0, [pc, #100]	@ (80039fc <Segment_Map+0x8a4>)
 8003996:	f003 ffa6 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 800399a:	2201      	movs	r2, #1
 800399c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039a0:	4817      	ldr	r0, [pc, #92]	@ (8003a00 <Segment_Map+0x8a8>)
 80039a2:	f003 ffa0 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80039a6:	e1a9      	b.n	8003cfc <Segment_Map+0xba4>
    case 'A':
        HAL_GPIO_WritePin(A, HIGH);
 80039a8:	2201      	movs	r2, #1
 80039aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039ae:	4813      	ldr	r0, [pc, #76]	@ (80039fc <Segment_Map+0x8a4>)
 80039b0:	f003 ff99 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 80039b4:	2201      	movs	r2, #1
 80039b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039ba:	4810      	ldr	r0, [pc, #64]	@ (80039fc <Segment_Map+0x8a4>)
 80039bc:	f003 ff93 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 80039c0:	2201      	movs	r2, #1
 80039c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039c6:	480e      	ldr	r0, [pc, #56]	@ (8003a00 <Segment_Map+0x8a8>)
 80039c8:	f003 ff8d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2101      	movs	r1, #1
 80039d0:	480c      	ldr	r0, [pc, #48]	@ (8003a04 <Segment_Map+0x8ac>)
 80039d2:	f003 ff88 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 80039d6:	2201      	movs	r2, #1
 80039d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039dc:	4808      	ldr	r0, [pc, #32]	@ (8003a00 <Segment_Map+0x8a8>)
 80039de:	f003 ff82 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 80039e2:	2201      	movs	r2, #1
 80039e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039e8:	4804      	ldr	r0, [pc, #16]	@ (80039fc <Segment_Map+0x8a4>)
 80039ea:	f003 ff7c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 80039ee:	2201      	movs	r2, #1
 80039f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <Segment_Map+0x8a8>)
 80039f6:	f003 ff76 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 80039fa:	e17f      	b.n	8003cfc <Segment_Map+0xba4>
 80039fc:	40010c00 	.word	0x40010c00
 8003a00:	40011000 	.word	0x40011000
 8003a04:	40010800 	.word	0x40010800
    case 'r':
        HAL_GPIO_WritePin(A, LOW);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a0e:	48bd      	ldr	r0, [pc, #756]	@ (8003d04 <Segment_Map+0xbac>)
 8003a10:	f003 ff69 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a1a:	48ba      	ldr	r0, [pc, #744]	@ (8003d04 <Segment_Map+0xbac>)
 8003a1c:	f003 ff63 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a26:	48b8      	ldr	r0, [pc, #736]	@ (8003d08 <Segment_Map+0xbb0>)
 8003a28:	f003 ff5d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2101      	movs	r1, #1
 8003a30:	48b6      	ldr	r0, [pc, #728]	@ (8003d0c <Segment_Map+0xbb4>)
 8003a32:	f003 ff58 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003a36:	2201      	movs	r2, #1
 8003a38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a3c:	48b2      	ldr	r0, [pc, #712]	@ (8003d08 <Segment_Map+0xbb0>)
 8003a3e:	f003 ff52 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a48:	48ae      	ldr	r0, [pc, #696]	@ (8003d04 <Segment_Map+0xbac>)
 8003a4a:	f003 ff4c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a54:	48ac      	ldr	r0, [pc, #688]	@ (8003d08 <Segment_Map+0xbb0>)
 8003a56:	f003 ff46 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003a5a:	e14f      	b.n	8003cfc <Segment_Map+0xba4>
    case 'u': // sunday
        HAL_GPIO_WritePin(A, LOW);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a62:	48a8      	ldr	r0, [pc, #672]	@ (8003d04 <Segment_Map+0xbac>)
 8003a64:	f003 ff3f 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a6e:	48a5      	ldr	r0, [pc, #660]	@ (8003d04 <Segment_Map+0xbac>)
 8003a70:	f003 ff39 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a7a:	48a3      	ldr	r0, [pc, #652]	@ (8003d08 <Segment_Map+0xbb0>)
 8003a7c:	f003 ff33 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2101      	movs	r1, #1
 8003a84:	48a1      	ldr	r0, [pc, #644]	@ (8003d0c <Segment_Map+0xbb4>)
 8003a86:	f003 ff2e 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a90:	489d      	ldr	r0, [pc, #628]	@ (8003d08 <Segment_Map+0xbb0>)
 8003a92:	f003 ff28 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, HIGH);
 8003a96:	2201      	movs	r2, #1
 8003a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a9c:	4899      	ldr	r0, [pc, #612]	@ (8003d04 <Segment_Map+0xbac>)
 8003a9e:	f003 ff22 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003aa8:	4897      	ldr	r0, [pc, #604]	@ (8003d08 <Segment_Map+0xbb0>)
 8003aaa:	f003 ff1c 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003aae:	e125      	b.n	8003cfc <Segment_Map+0xba4>
    case 'M': // munday
        HAL_GPIO_WritePin(A, LOW);
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ab6:	4893      	ldr	r0, [pc, #588]	@ (8003d04 <Segment_Map+0xbac>)
 8003ab8:	f003 ff15 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, HIGH);
 8003abc:	2201      	movs	r2, #1
 8003abe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ac2:	4890      	ldr	r0, [pc, #576]	@ (8003d04 <Segment_Map+0xbac>)
 8003ac4:	f003 ff0f 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ace:	488e      	ldr	r0, [pc, #568]	@ (8003d08 <Segment_Map+0xbb0>)
 8003ad0:	f003 ff09 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	488c      	ldr	r0, [pc, #560]	@ (8003d0c <Segment_Map+0xbb4>)
 8003ada:	f003 ff04 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ae4:	4888      	ldr	r0, [pc, #544]	@ (8003d08 <Segment_Map+0xbb0>)
 8003ae6:	f003 fefe 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003af0:	4884      	ldr	r0, [pc, #528]	@ (8003d04 <Segment_Map+0xbac>)
 8003af2:	f003 fef8 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003afc:	4882      	ldr	r0, [pc, #520]	@ (8003d08 <Segment_Map+0xbb0>)
 8003afe:	f003 fef2 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003b02:	e0fb      	b.n	8003cfc <Segment_Map+0xba4>
    case 'T': // tuseday
        HAL_GPIO_WritePin(A, LOW);
 8003b04:	2200      	movs	r2, #0
 8003b06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b0a:	487e      	ldr	r0, [pc, #504]	@ (8003d04 <Segment_Map+0xbac>)
 8003b0c:	f003 feeb 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b16:	487b      	ldr	r0, [pc, #492]	@ (8003d04 <Segment_Map+0xbac>)
 8003b18:	f003 fee5 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b22:	4879      	ldr	r0, [pc, #484]	@ (8003d08 <Segment_Map+0xbb0>)
 8003b24:	f003 fedf 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4877      	ldr	r0, [pc, #476]	@ (8003d0c <Segment_Map+0xbb4>)
 8003b2e:	f003 feda 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003b32:	2200      	movs	r2, #0
 8003b34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b38:	4873      	ldr	r0, [pc, #460]	@ (8003d08 <Segment_Map+0xbb0>)
 8003b3a:	f003 fed4 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b44:	486f      	ldr	r0, [pc, #444]	@ (8003d04 <Segment_Map+0xbac>)
 8003b46:	f003 fece 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b50:	486d      	ldr	r0, [pc, #436]	@ (8003d08 <Segment_Map+0xbb0>)
 8003b52:	f003 fec8 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003b56:	e0d1      	b.n	8003cfc <Segment_Map+0xba4>
    case 'W': // wednesday
        HAL_GPIO_WritePin(A, LOW);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b5e:	4869      	ldr	r0, [pc, #420]	@ (8003d04 <Segment_Map+0xbac>)
 8003b60:	f003 fec1 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b6a:	4866      	ldr	r0, [pc, #408]	@ (8003d04 <Segment_Map+0xbac>)
 8003b6c:	f003 febb 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b76:	4864      	ldr	r0, [pc, #400]	@ (8003d08 <Segment_Map+0xbb0>)
 8003b78:	f003 feb5 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4862      	ldr	r0, [pc, #392]	@ (8003d0c <Segment_Map+0xbb4>)
 8003b82:	f003 feb0 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, HIGH);
 8003b86:	2201      	movs	r2, #1
 8003b88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b8c:	485e      	ldr	r0, [pc, #376]	@ (8003d08 <Segment_Map+0xbb0>)
 8003b8e:	f003 feaa 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003b92:	2200      	movs	r2, #0
 8003b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b98:	485a      	ldr	r0, [pc, #360]	@ (8003d04 <Segment_Map+0xbac>)
 8003b9a:	f003 fea4 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ba4:	4858      	ldr	r0, [pc, #352]	@ (8003d08 <Segment_Map+0xbb0>)
 8003ba6:	f003 fe9e 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003baa:	e0a7      	b.n	8003cfc <Segment_Map+0xba4>
    case 't': // thursday
        HAL_GPIO_WritePin(A, LOW);
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bb2:	4854      	ldr	r0, [pc, #336]	@ (8003d04 <Segment_Map+0xbac>)
 8003bb4:	f003 fe97 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003bbe:	4851      	ldr	r0, [pc, #324]	@ (8003d04 <Segment_Map+0xbac>)
 8003bc0:	f003 fe91 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, HIGH);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bca:	484f      	ldr	r0, [pc, #316]	@ (8003d08 <Segment_Map+0xbb0>)
 8003bcc:	f003 fe8b 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	484d      	ldr	r0, [pc, #308]	@ (8003d0c <Segment_Map+0xbb4>)
 8003bd6:	f003 fe86 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003be0:	4849      	ldr	r0, [pc, #292]	@ (8003d08 <Segment_Map+0xbb0>)
 8003be2:	f003 fe80 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003be6:	2200      	movs	r2, #0
 8003be8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bec:	4845      	ldr	r0, [pc, #276]	@ (8003d04 <Segment_Map+0xbac>)
 8003bee:	f003 fe7a 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bf8:	4843      	ldr	r0, [pc, #268]	@ (8003d08 <Segment_Map+0xbb0>)
 8003bfa:	f003 fe74 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003bfe:	e07d      	b.n	8003cfc <Segment_Map+0xba4>
    case 'F': // friday
        HAL_GPIO_WritePin(A, LOW);
 8003c00:	2200      	movs	r2, #0
 8003c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c06:	483f      	ldr	r0, [pc, #252]	@ (8003d04 <Segment_Map+0xbac>)
 8003c08:	f003 fe6d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c12:	483c      	ldr	r0, [pc, #240]	@ (8003d04 <Segment_Map+0xbac>)
 8003c14:	f003 fe67 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c1e:	483a      	ldr	r0, [pc, #232]	@ (8003d08 <Segment_Map+0xbb0>)
 8003c20:	f003 fe61 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, HIGH);
 8003c24:	2201      	movs	r2, #1
 8003c26:	2101      	movs	r1, #1
 8003c28:	4838      	ldr	r0, [pc, #224]	@ (8003d0c <Segment_Map+0xbb4>)
 8003c2a:	f003 fe5c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c34:	4834      	ldr	r0, [pc, #208]	@ (8003d08 <Segment_Map+0xbb0>)
 8003c36:	f003 fe56 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c40:	4830      	ldr	r0, [pc, #192]	@ (8003d04 <Segment_Map+0xbac>)
 8003c42:	f003 fe50 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003c46:	2200      	movs	r2, #0
 8003c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c4c:	482e      	ldr	r0, [pc, #184]	@ (8003d08 <Segment_Map+0xbb0>)
 8003c4e:	f003 fe4a 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003c52:	e053      	b.n	8003cfc <Segment_Map+0xba4>
    case 'S': // saturday
        HAL_GPIO_WritePin(A, HIGH);
 8003c54:	2201      	movs	r2, #1
 8003c56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c5a:	482a      	ldr	r0, [pc, #168]	@ (8003d04 <Segment_Map+0xbac>)
 8003c5c:	f003 fe43 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c66:	4827      	ldr	r0, [pc, #156]	@ (8003d04 <Segment_Map+0xbac>)
 8003c68:	f003 fe3d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c72:	4825      	ldr	r0, [pc, #148]	@ (8003d08 <Segment_Map+0xbb0>)
 8003c74:	f003 fe37 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4823      	ldr	r0, [pc, #140]	@ (8003d0c <Segment_Map+0xbb4>)
 8003c7e:	f003 fe32 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003c82:	2200      	movs	r2, #0
 8003c84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c88:	481f      	ldr	r0, [pc, #124]	@ (8003d08 <Segment_Map+0xbb0>)
 8003c8a:	f003 fe2c 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c94:	481b      	ldr	r0, [pc, #108]	@ (8003d04 <Segment_Map+0xbac>)
 8003c96:	f003 fe26 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, LOW);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ca0:	4819      	ldr	r0, [pc, #100]	@ (8003d08 <Segment_Map+0xbb0>)
 8003ca2:	f003 fe20 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003ca6:	e029      	b.n	8003cfc <Segment_Map+0xba4>

    default:
        HAL_GPIO_WritePin(A, LOW);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cae:	4815      	ldr	r0, [pc, #84]	@ (8003d04 <Segment_Map+0xbac>)
 8003cb0:	f003 fe19 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B, LOW);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cba:	4812      	ldr	r0, [pc, #72]	@ (8003d04 <Segment_Map+0xbac>)
 8003cbc:	f003 fe13 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C, LOW);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cc6:	4810      	ldr	r0, [pc, #64]	@ (8003d08 <Segment_Map+0xbb0>)
 8003cc8:	f003 fe0d 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D, LOW);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2101      	movs	r1, #1
 8003cd0:	480e      	ldr	r0, [pc, #56]	@ (8003d0c <Segment_Map+0xbb4>)
 8003cd2:	f003 fe08 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E, LOW);
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003cdc:	480a      	ldr	r0, [pc, #40]	@ (8003d08 <Segment_Map+0xbb0>)
 8003cde:	f003 fe02 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F, LOW);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ce8:	4806      	ldr	r0, [pc, #24]	@ (8003d04 <Segment_Map+0xbac>)
 8003cea:	f003 fdfc 	bl	80078e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G, HIGH);
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cf4:	4804      	ldr	r0, [pc, #16]	@ (8003d08 <Segment_Map+0xbb0>)
 8003cf6:	f003 fdf6 	bl	80078e6 <HAL_GPIO_WritePin>
        break;
 8003cfa:	bf00      	nop
    }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010c00 	.word	0x40010c00
 8003d08:	40011000 	.word	0x40011000
 8003d0c:	40010800 	.word	0x40010800

08003d10 <Segment_Set>:

void Segment_Set(uint8_t seg, uint8_t value)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71bb      	strb	r3, [r7, #6]

    segment_value[seg] = value;
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <Segment_Set+0x24>)
 8003d24:	79ba      	ldrb	r2, [r7, #6]
 8003d26:	54ca      	strb	r2, [r1, r3]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000118 	.word	0x20000118

08003d38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d48:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <MX_ADC1_Init+0x78>)
 8003d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d54:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d62:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8003d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d68:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d74:	480d      	ldr	r0, [pc, #52]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d76:	f002 fee1 	bl	8006b3c <HAL_ADC_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003d80:	f002 fcb6 	bl	80066f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d84:	2301      	movs	r3, #1
 8003d86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	@ (8003dac <MX_ADC1_Init+0x74>)
 8003d96:	f003 f969 	bl	800706c <HAL_ADC_ConfigChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003da0:	f002 fca6 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000128 	.word	0x20000128
 8003db0:	40012400 	.word	0x40012400

08003db4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_ADC_MspInit+0x6c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d121      	bne.n	8003e18 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003dda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dde:	6193      	str	r3, [r2, #24]
 8003de0:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dec:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003df2:	f043 0304 	orr.w	r3, r3, #4
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_ADC_MspInit+0x70>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = NTC_Pin;
 8003e04:	2302      	movs	r3, #2
 8003e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(NTC_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	4619      	mov	r1, r3
 8003e12:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <HAL_ADC_MspInit+0x74>)
 8003e14:	f003 fbcc 	bl	80075b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40012400 	.word	0x40012400
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40010800 	.word	0x40010800

08003e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e32:	f107 0310 	add.w	r3, r7, #16
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e40:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4a60      	ldr	r2, [pc, #384]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e46:	f043 0310 	orr.w	r3, r3, #16
 8003e4a:	6193      	str	r3, [r2, #24]
 8003e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e58:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e5e:	f043 0320 	orr.w	r3, r3, #32
 8003e62:	6193      	str	r3, [r2, #24]
 8003e64:	4b58      	ldr	r3, [pc, #352]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e70:	4b55      	ldr	r3, [pc, #340]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	4a54      	ldr	r2, [pc, #336]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	6193      	str	r3, [r2, #24]
 8003e7c:	4b52      	ldr	r3, [pc, #328]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e88:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e8e:	f043 0308 	orr.w	r3, r3, #8
 8003e92:	6193      	str	r3, [r2, #24]
 8003e94:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc8 <MX_GPIO_Init+0x19c>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|E_Pin|C_Pin, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003ea6:	4849      	ldr	r0, [pc, #292]	@ (8003fcc <MX_GPIO_Init+0x1a0>)
 8003ea8:	f003 fd1d 	bl	80078e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_Pin|Blinky_Point_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin
 8003eac:	2200      	movs	r2, #0
 8003eae:	f649 7111 	movw	r1, #40721	@ 0x9f11
 8003eb2:	4847      	ldr	r0, [pc, #284]	@ (8003fd0 <MX_GPIO_Init+0x1a4>)
 8003eb4:	f003 fd17 	bl	80078e6 <HAL_GPIO_WritePin>
                          |Seg_4_VCC_Pin|Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Date_Point_Pin|A_Pin|F_Pin|B_Pin
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f24f 0121 	movw	r1, #61473	@ 0xf021
 8003ebe:	4845      	ldr	r0, [pc, #276]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003ec0:	f003 fd11 	bl	80078e6 <HAL_GPIO_WritePin>
                          |Seg_1_VCC_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : G_Pin E_Pin C_Pin */
  GPIO_InitStruct.Pin = G_Pin|E_Pin|C_Pin;
 8003ec4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	4619      	mov	r1, r3
 8003edc:	483b      	ldr	r0, [pc, #236]	@ (8003fcc <MX_GPIO_Init+0x1a0>)
 8003ede:	f003 fb67 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin Seg_2_VCC_Pin Seg_3_VCC_Pin Seg_4_VCC_Pin
                           Seg_5_VCC_Pin Seg_6_VCC_Pin Seg_7_VCC_Pin */
  GPIO_InitStruct.Pin = D_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin|Seg_4_VCC_Pin
 8003ee2:	f649 7301 	movw	r3, #40705	@ 0x9f01
 8003ee6:	613b      	str	r3, [r7, #16]
                          |Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4835      	ldr	r0, [pc, #212]	@ (8003fd0 <MX_GPIO_Init+0x1a4>)
 8003efc:	f003 fb58 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blinky_Point_Pin */
  GPIO_InitStruct.Pin = Blinky_Point_Pin;
 8003f00:	2310      	movs	r3, #16
 8003f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blinky_Point_GPIO_Port, &GPIO_InitStruct);
 8003f10:	f107 0310 	add.w	r3, r7, #16
 8003f14:	4619      	mov	r1, r3
 8003f16:	482e      	ldr	r0, [pc, #184]	@ (8003fd0 <MX_GPIO_Init+0x1a4>)
 8003f18:	f003 fb4a 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Date_Point_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Date_Point_Pin|Buzzer_Pin;
 8003f1c:	2321      	movs	r3, #33	@ 0x21
 8003f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	f107 0310 	add.w	r3, r7, #16
 8003f30:	4619      	mov	r1, r3
 8003f32:	4828      	ldr	r0, [pc, #160]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003f34:	f003 fb3c 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SQW_Pin */
  GPIO_InitStruct.Pin = SQW_Pin;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f3c:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <MX_GPIO_Init+0x1ac>)
 8003f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SQW_GPIO_Port, &GPIO_InitStruct);
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4822      	ldr	r0, [pc, #136]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003f4c:	f003 fb30 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin F_Pin B_Pin Seg_1_VCC_Pin */
  GPIO_InitStruct.Pin = A_Pin|F_Pin|B_Pin|Seg_1_VCC_Pin;
 8003f50:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	4619      	mov	r1, r3
 8003f68:	481a      	ldr	r0, [pc, #104]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003f6a:	f003 fb21 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8003f6e:	2308      	movs	r3, #8
 8003f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <MX_GPIO_Init+0x1b0>)
 8003f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8003f7a:	f107 0310 	add.w	r3, r7, #16
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4814      	ldr	r0, [pc, #80]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003f82:	f003 fb15 	bl	80075b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reset_Pin Timer_Pin Counter_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Timer_Pin|Counter_Pin;
 8003f86:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f90:	2301      	movs	r3, #1
 8003f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	4619      	mov	r1, r3
 8003f9a:	480e      	ldr	r0, [pc, #56]	@ (8003fd4 <MX_GPIO_Init+0x1a8>)
 8003f9c:	f003 fb08 	bl	80075b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	2007      	movs	r0, #7
 8003fa6:	f003 facc 	bl	8007542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003faa:	2007      	movs	r0, #7
 8003fac:	f003 fae5 	bl	800757a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	2009      	movs	r0, #9
 8003fb6:	f003 fac4 	bl	8007542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003fba:	2009      	movs	r0, #9
 8003fbc:	f003 fadd 	bl	800757a <HAL_NVIC_EnableIRQ>

}
 8003fc0:	bf00      	nop
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40010800 	.word	0x40010800
 8003fd4:	40010c00 	.word	0x40010c00
 8003fd8:	10110000 	.word	0x10110000
 8003fdc:	10210000 	.word	0x10210000

08003fe0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <MX_I2C2_Init+0x50>)
 8003fe6:	4a13      	ldr	r2, [pc, #76]	@ (8004034 <MX_I2C2_Init+0x54>)
 8003fe8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003fea:	4b11      	ldr	r3, [pc, #68]	@ (8004030 <MX_I2C2_Init+0x50>)
 8003fec:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <MX_I2C2_Init+0x58>)
 8003fee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <MX_I2C2_Init+0x50>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8004030 <MX_I2C2_Init+0x50>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <MX_I2C2_Init+0x50>)
 8003ffe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004002:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004004:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <MX_I2C2_Init+0x50>)
 8004006:	2200      	movs	r2, #0
 8004008:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <MX_I2C2_Init+0x50>)
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <MX_I2C2_Init+0x50>)
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <MX_I2C2_Init+0x50>)
 8004018:	2200      	movs	r2, #0
 800401a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800401c:	4804      	ldr	r0, [pc, #16]	@ (8004030 <MX_I2C2_Init+0x50>)
 800401e:	f003 fc9d 	bl	800795c <HAL_I2C_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004028:	f002 fb62 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000158 	.word	0x20000158
 8004034:	40005800 	.word	0x40005800
 8004038:	000186a0 	.word	0x000186a0

0800403c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 0310 	add.w	r3, r7, #16
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_I2C_MspInit+0x74>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d124      	bne.n	80040a6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405c:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 8004062:	f043 0308 	orr.w	r3, r3, #8
 8004066:	6193      	str	r3, [r2, #24]
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004074:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004078:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800407a:	2312      	movs	r3, #18
 800407c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800407e:	2303      	movs	r3, #3
 8004080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	f107 0310 	add.w	r3, r7, #16
 8004086:	4619      	mov	r1, r3
 8004088:	480b      	ldr	r0, [pc, #44]	@ (80040b8 <HAL_I2C_MspInit+0x7c>)
 800408a:	f003 fa91 	bl	80075b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	4a08      	ldr	r2, [pc, #32]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 8004094:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004098:	61d3      	str	r3, [r2, #28]
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_I2C_MspInit+0x78>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80040a6:	bf00      	nop
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40005800 	.word	0x40005800
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40010c00 	.word	0x40010c00

080040bc <BCD_to_Decimal>:
#include "Variable.h"
#include "Definition.h"
#include "i2c.h"


uint8_t BCD_to_Decimal(uint8_t bcd) {
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	4413      	add	r3, r2
 80040e0:	b2db      	uxtb	r3, r3
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <Decimal_to_BCD>:

uint8_t Decimal_to_BCD(uint8_t decimal) {
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <Decimal_to_BCD+0x44>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	b258      	sxtb	r0, r3
 8004106:	79fa      	ldrb	r2, [r7, #7]
 8004108:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <Decimal_to_BCD+0x44>)
 800410a:	fba3 1302 	umull	r1, r3, r3, r2
 800410e:	08d9      	lsrs	r1, r3, #3
 8004110:	460b      	mov	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	b25b      	sxtb	r3, r3
 800411e:	4303      	orrs	r3, r0
 8004120:	b25b      	sxtb	r3, r3
 8004122:	b2db      	uxtb	r3, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	cccccccd 	.word	0xcccccccd

08004134 <DS3231_WriteTime>:

void DS3231_WriteTime(I2C_HandleTypeDef *hi2c, uint8_t hour, uint8_t minute, uint8_t second) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af04      	add	r7, sp, #16
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	4608      	mov	r0, r1
 800413e:	4611      	mov	r1, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	70fb      	strb	r3, [r7, #3]
 8004146:	460b      	mov	r3, r1
 8004148:	70bb      	strb	r3, [r7, #2]
 800414a:	4613      	mov	r3, r2
 800414c:	707b      	strb	r3, [r7, #1]
    uint8_t timeData[3];

    timeData[0] = Decimal_to_BCD(second);  // Convert second to BCD
 800414e:	787b      	ldrb	r3, [r7, #1]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ffcb 	bl	80040ec <Decimal_to_BCD>
 8004156:	4603      	mov	r3, r0
 8004158:	733b      	strb	r3, [r7, #12]
    timeData[1] = Decimal_to_BCD(minute);  // Convert minute to BCD
 800415a:	78bb      	ldrb	r3, [r7, #2]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff ffc5 	bl	80040ec <Decimal_to_BCD>
 8004162:	4603      	mov	r3, r0
 8004164:	737b      	strb	r3, [r7, #13]
    timeData[2] = Decimal_to_BCD(hour);    // Convert hour to BCD
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ffbf 	bl	80040ec <Decimal_to_BCD>
 800416e:	4603      	mov	r3, r0
 8004170:	73bb      	strb	r3, [r7, #14]

    // DS3231 I2C address (0x68 is default address)
    HAL_I2C_Mem_Write(hi2c, 0xD0, 0x00, I2C_MEMADD_SIZE_8BIT, timeData, 3, 1000);
 8004172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004176:	9302      	str	r3, [sp, #8]
 8004178:	2303      	movs	r3, #3
 800417a:	9301      	str	r3, [sp, #4]
 800417c:	f107 030c 	add.w	r3, r7, #12
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	2301      	movs	r3, #1
 8004184:	2200      	movs	r2, #0
 8004186:	21d0      	movs	r1, #208	@ 0xd0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f003 fd2b 	bl	8007be4 <HAL_I2C_Mem_Write>
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <DS3231_ReadTime>:

void DS3231_ReadTime(I2C_HandleTypeDef *hi2c, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 8004196:	b580      	push	{r7, lr}
 8004198:	b08a      	sub	sp, #40	@ 0x28
 800419a:	af04      	add	r7, sp, #16
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
    uint8_t timeData[4];

    // DS3231 I2C address (0x68 is default address)
    HAL_I2C_Mem_Read(hi2c, 0xD0, 0x00, I2C_MEMADD_SIZE_8BIT, timeData, 4, 1000);
 80041a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	2304      	movs	r3, #4
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	f107 0314 	add.w	r3, r7, #20
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2301      	movs	r3, #1
 80041b6:	2200      	movs	r2, #0
 80041b8:	21d0      	movs	r1, #208	@ 0xd0
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f003 fe0c 	bl	8007dd8 <HAL_I2C_Mem_Read>

    *second = BCD_to_Decimal(timeData[0]);  // Convert BCD to decimal
 80041c0:	7d3b      	ldrb	r3, [r7, #20]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ff7a 	bl	80040bc <BCD_to_Decimal>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	701a      	strb	r2, [r3, #0]
    *minute = BCD_to_Decimal(timeData[1]);  // Convert BCD to decimal
 80041d0:	7d7b      	ldrb	r3, [r7, #21]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff ff72 	bl	80040bc <BCD_to_Decimal>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	701a      	strb	r2, [r3, #0]
    *hour = BCD_to_Decimal(timeData[2]);    // Convert BCD to decimal
 80041e0:	7dbb      	ldrb	r3, [r7, #22]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff6a 	bl	80040bc <BCD_to_Decimal>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461a      	mov	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	701a      	strb	r2, [r3, #0]
}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041fe:	f002 fc17 	bl	8006a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004202:	f002 f97d 	bl	8006500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004206:	f7ff fe11 	bl	8003e2c <MX_GPIO_Init>
  MX_I2C2_Init();
 800420a:	f7ff fee9 	bl	8003fe0 <MX_I2C2_Init>
  MX_TIM2_Init();
 800420e:	f002 fb0f 	bl	8006830 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004212:	f002 fb59 	bl	80068c8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8004216:	f7ff fd8f 	bl	8003d38 <MX_ADC1_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800421a:	48b2      	ldr	r0, [pc, #712]	@ (80044e4 <main+0x2ec>)
 800421c:	f005 f9d0 	bl	80095c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8004220:	48b1      	ldr	r0, [pc, #708]	@ (80044e8 <main+0x2f0>)
 8004222:	f005 f9cd 	bl	80095c0 <HAL_TIM_Base_Start_IT>
  DS3231_ReadTime(&hi2c2,&time_Hour,&time_Minute,&time_Second);
 8004226:	4bb1      	ldr	r3, [pc, #708]	@ (80044ec <main+0x2f4>)
 8004228:	4ab1      	ldr	r2, [pc, #708]	@ (80044f0 <main+0x2f8>)
 800422a:	49b2      	ldr	r1, [pc, #712]	@ (80044f4 <main+0x2fc>)
 800422c:	48b2      	ldr	r0, [pc, #712]	@ (80044f8 <main+0x300>)
 800422e:	f7ff ffb2 	bl	8004196 <DS3231_ReadTime>
  for (int i = 0; i < 10; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e037      	b.n	80042a8 <main+0xb0>
  {
    Segment_Set(0,i);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	2000      	movs	r0, #0
 8004240:	f7ff fd66 	bl	8003d10 <Segment_Set>
    Segment_Set(1,i);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4619      	mov	r1, r3
 800424a:	2001      	movs	r0, #1
 800424c:	f7ff fd60 	bl	8003d10 <Segment_Set>
    Segment_Set(2,i);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	4619      	mov	r1, r3
 8004256:	2002      	movs	r0, #2
 8004258:	f7ff fd5a 	bl	8003d10 <Segment_Set>
    Segment_Set(3,i);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	2003      	movs	r0, #3
 8004264:	f7ff fd54 	bl	8003d10 <Segment_Set>
    Segment_Set(4,i);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	2004      	movs	r0, #4
 8004270:	f7ff fd4e 	bl	8003d10 <Segment_Set>
    Segment_Set(5,i);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	2005      	movs	r0, #5
 800427c:	f7ff fd48 	bl	8003d10 <Segment_Set>
    Segment_Set(6,'N');
 8004280:	214e      	movs	r1, #78	@ 0x4e
 8004282:	2006      	movs	r0, #6
 8004284:	f7ff fd44 	bl	8003d10 <Segment_Set>
    HAL_Delay(200);
 8004288:	20c8      	movs	r0, #200	@ 0xc8
 800428a:	f002 fc33 	bl	8006af4 <HAL_Delay>
    HAL_GPIO_WritePin(blinky_Point,HIGH);
 800428e:	2201      	movs	r2, #1
 8004290:	2110      	movs	r1, #16
 8004292:	489a      	ldr	r0, [pc, #616]	@ (80044fc <main+0x304>)
 8004294:	f003 fb27 	bl	80078e6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(date_Point,LOW);
 8004298:	2200      	movs	r2, #0
 800429a:	2101      	movs	r1, #1
 800429c:	4898      	ldr	r0, [pc, #608]	@ (8004500 <main+0x308>)
 800429e:	f003 fb22 	bl	80078e6 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3301      	adds	r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	ddc4      	ble.n	8004238 <main+0x40>
  }
   Buzz(20);
 80042ae:	2014      	movs	r0, #20
 80042b0:	f7fe fc48 	bl	8002b44 <Buzz>
  HAL_Delay(100);
 80042b4:	2064      	movs	r0, #100	@ 0x64
 80042b6:	f002 fc1d 	bl	8006af4 <HAL_Delay>
  Buzz(20);
 80042ba:	2014      	movs	r0, #20
 80042bc:	f7fe fc42 	bl	8002b44 <Buzz>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (work_Mode == MODE_NORMAL)
 80042c0:	4b90      	ldr	r3, [pc, #576]	@ (8004504 <main+0x30c>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b52      	cmp	r3, #82	@ 0x52
 80042c6:	f040 812f 	bne.w	8004528 <main+0x330>
    {
      HAL_GPIO_WritePin(date_Point, LOW);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2101      	movs	r1, #1
 80042ce:	488c      	ldr	r0, [pc, #560]	@ (8004500 <main+0x308>)
 80042d0:	f003 fb09 	bl	80078e6 <HAL_GPIO_WritePin>
      if (tmpShow)
 80042d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004508 <main+0x310>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d048      	beq.n	800436e <main+0x176>
      {
        if (time_TmpShow < 2)
 80042dc:	4b8b      	ldr	r3, [pc, #556]	@ (800450c <main+0x314>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d841      	bhi.n	8004368 <main+0x170>
        {
          if (tempreture_read == 0)
 80042e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004510 <main+0x318>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <main+0x106>
          {
            temperature = NTC_Read();
 80042ec:	f7fe fd3c 	bl	8002d68 <NTC_Read>
 80042f0:	4603      	mov	r3, r0
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b87      	ldr	r3, [pc, #540]	@ (8004514 <main+0x31c>)
 80042f6:	701a      	strb	r2, [r3, #0]
            tempreture_read = 1;
 80042f8:	4b85      	ldr	r3, [pc, #532]	@ (8004510 <main+0x318>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
          }
          if (tempreture_read == 1)
 80042fe:	4b84      	ldr	r3, [pc, #528]	@ (8004510 <main+0x318>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d133      	bne.n	800436e <main+0x176>
          {
            Segment_Set(0, temperature / 10);
 8004306:	4b83      	ldr	r3, [pc, #524]	@ (8004514 <main+0x31c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	4a83      	ldr	r2, [pc, #524]	@ (8004518 <main+0x320>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	2000      	movs	r0, #0
 8004318:	f7ff fcfa 	bl	8003d10 <Segment_Set>
            Segment_Set(1, temperature % 10);
 800431c:	4b7d      	ldr	r3, [pc, #500]	@ (8004514 <main+0x31c>)
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	4b7d      	ldr	r3, [pc, #500]	@ (8004518 <main+0x320>)
 8004322:	fba3 1302 	umull	r1, r3, r3, r2
 8004326:	08d9      	lsrs	r1, r3, #3
 8004328:	460b      	mov	r3, r1
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	4619      	mov	r1, r3
 8004336:	2001      	movs	r0, #1
 8004338:	f7ff fcea 	bl	8003d10 <Segment_Set>
            Segment_Set(2, 'o');
 800433c:	216f      	movs	r1, #111	@ 0x6f
 800433e:	2002      	movs	r0, #2
 8004340:	f7ff fce6 	bl	8003d10 <Segment_Set>
            Segment_Set(3, 'C');
 8004344:	2143      	movs	r1, #67	@ 0x43
 8004346:	2003      	movs	r0, #3
 8004348:	f7ff fce2 	bl	8003d10 <Segment_Set>
            Segment_Set(4, 'N');
 800434c:	214e      	movs	r1, #78	@ 0x4e
 800434e:	2004      	movs	r0, #4
 8004350:	f7ff fcde 	bl	8003d10 <Segment_Set>
            Segment_Set(5, 'N');
 8004354:	214e      	movs	r1, #78	@ 0x4e
 8004356:	2005      	movs	r0, #5
 8004358:	f7ff fcda 	bl	8003d10 <Segment_Set>
            HAL_GPIO_WritePin(blinky_Point, LOW);
 800435c:	2200      	movs	r2, #0
 800435e:	2110      	movs	r1, #16
 8004360:	4866      	ldr	r0, [pc, #408]	@ (80044fc <main+0x304>)
 8004362:	f003 fac0 	bl	80078e6 <HAL_GPIO_WritePin>
 8004366:	e002      	b.n	800436e <main+0x176>
          }
        }
        else
        {
          tempreture_read = 0;
 8004368:	4b69      	ldr	r3, [pc, #420]	@ (8004510 <main+0x318>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
        }
      }
      if (!tempreture_read)
 800436e:	4b68      	ldr	r3, [pc, #416]	@ (8004510 <main+0x318>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 809d 	bne.w	80044b2 <main+0x2ba>
      {
        if (PM_Mode)
 8004378:	4b68      	ldr	r3, [pc, #416]	@ (800451c <main+0x324>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d042      	beq.n	8004406 <main+0x20e>
        {
          if (time_Hour > 12)
 8004380:	4b5c      	ldr	r3, [pc, #368]	@ (80044f4 <main+0x2fc>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d922      	bls.n	80043ce <main+0x1d6>
          {
            Segment_Set(0, (time_Hour - 12) / 10);
 8004388:	4b5a      	ldr	r3, [pc, #360]	@ (80044f4 <main+0x2fc>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3b0c      	subs	r3, #12
 800438e:	4a64      	ldr	r2, [pc, #400]	@ (8004520 <main+0x328>)
 8004390:	fb82 1203 	smull	r1, r2, r2, r3
 8004394:	1092      	asrs	r2, r2, #2
 8004396:	17db      	asrs	r3, r3, #31
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	2000      	movs	r0, #0
 80043a0:	f7ff fcb6 	bl	8003d10 <Segment_Set>
            Segment_Set(1, (time_Hour - 12) % 10);
 80043a4:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <main+0x2fc>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f1a3 020c 	sub.w	r2, r3, #12
 80043ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004520 <main+0x328>)
 80043ae:	fb83 1302 	smull	r1, r3, r3, r2
 80043b2:	1099      	asrs	r1, r3, #2
 80043b4:	17d3      	asrs	r3, r2, #31
 80043b6:	1ac9      	subs	r1, r1, r3
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	1ad1      	subs	r1, r2, r3
 80043c2:	b2cb      	uxtb	r3, r1
 80043c4:	4619      	mov	r1, r3
 80043c6:	2001      	movs	r0, #1
 80043c8:	f7ff fca2 	bl	8003d10 <Segment_Set>
 80043cc:	e036      	b.n	800443c <main+0x244>
          }
          else
          {
            Segment_Set(0, time_Hour / 10);
 80043ce:	4b49      	ldr	r3, [pc, #292]	@ (80044f4 <main+0x2fc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	4a51      	ldr	r2, [pc, #324]	@ (8004518 <main+0x320>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	08db      	lsrs	r3, r3, #3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	2000      	movs	r0, #0
 80043e0:	f7ff fc96 	bl	8003d10 <Segment_Set>
            Segment_Set(1, time_Hour % 10);
 80043e4:	4b43      	ldr	r3, [pc, #268]	@ (80044f4 <main+0x2fc>)
 80043e6:	781a      	ldrb	r2, [r3, #0]
 80043e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004518 <main+0x320>)
 80043ea:	fba3 1302 	umull	r1, r3, r3, r2
 80043ee:	08d9      	lsrs	r1, r3, #3
 80043f0:	460b      	mov	r3, r1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	2001      	movs	r0, #1
 8004400:	f7ff fc86 	bl	8003d10 <Segment_Set>
 8004404:	e01a      	b.n	800443c <main+0x244>
          }
        }
        else
        {
          Segment_Set(0, time_Hour / 10);
 8004406:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <main+0x2fc>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4a43      	ldr	r2, [pc, #268]	@ (8004518 <main+0x320>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	2000      	movs	r0, #0
 8004418:	f7ff fc7a 	bl	8003d10 <Segment_Set>
          Segment_Set(1, time_Hour % 10);
 800441c:	4b35      	ldr	r3, [pc, #212]	@ (80044f4 <main+0x2fc>)
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	4b3d      	ldr	r3, [pc, #244]	@ (8004518 <main+0x320>)
 8004422:	fba3 1302 	umull	r1, r3, r3, r2
 8004426:	08d9      	lsrs	r1, r3, #3
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	2001      	movs	r0, #1
 8004438:	f7ff fc6a 	bl	8003d10 <Segment_Set>
        }
        Segment_Set(2, time_Minute / 10);
 800443c:	4b2c      	ldr	r3, [pc, #176]	@ (80044f0 <main+0x2f8>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <main+0x320>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	2002      	movs	r0, #2
 800444e:	f7ff fc5f 	bl	8003d10 <Segment_Set>
        Segment_Set(3, time_Minute % 10);
 8004452:	4b27      	ldr	r3, [pc, #156]	@ (80044f0 <main+0x2f8>)
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <main+0x320>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	08d9      	lsrs	r1, r3, #3
 800445e:	460b      	mov	r3, r1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4619      	mov	r1, r3
 800446c:	2003      	movs	r0, #3
 800446e:	f7ff fc4f 	bl	8003d10 <Segment_Set>
        Segment_Set(4, time_Second / 10);
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <main+0x2f4>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	4a28      	ldr	r2, [pc, #160]	@ (8004518 <main+0x320>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	4619      	mov	r1, r3
 8004482:	2004      	movs	r0, #4
 8004484:	f7ff fc44 	bl	8003d10 <Segment_Set>
        Segment_Set(5, time_Second % 10);
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <main+0x2f4>)
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	4b22      	ldr	r3, [pc, #136]	@ (8004518 <main+0x320>)
 800448e:	fba3 1302 	umull	r1, r3, r3, r2
 8004492:	08d9      	lsrs	r1, r3, #3
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	2005      	movs	r0, #5
 80044a4:	f7ff fc34 	bl	8003d10 <Segment_Set>
        HAL_GPIO_WritePin(blinky_Point, HIGH);
 80044a8:	2201      	movs	r2, #1
 80044aa:	2110      	movs	r1, #16
 80044ac:	4813      	ldr	r0, [pc, #76]	@ (80044fc <main+0x304>)
 80044ae:	f003 fa1a 	bl	80078e6 <HAL_GPIO_WritePin>
      }
      Segment_Set(6, 'N');
 80044b2:	214e      	movs	r1, #78	@ 0x4e
 80044b4:	2006      	movs	r0, #6
 80044b6:	f7ff fc2b 	bl	8003d10 <Segment_Set>

      irRemote = Ir_GetData();
 80044ba:	f7fe fc2d 	bl	8002d18 <Ir_GetData>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <main+0x32c>)
 80044c4:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 80044c6:	4b17      	ldr	r3, [pc, #92]	@ (8004524 <main+0x32c>)
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f43f aef8 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 80044d0:	4b14      	ldr	r3, [pc, #80]	@ (8004524 <main+0x32c>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004504 <main+0x30c>)
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc fde8 	bl	80010b0 <Haamin_Remote>
 80044e0:	e6ee      	b.n	80042c0 <main+0xc8>
 80044e2:	bf00      	nop
 80044e4:	200001f0 	.word	0x200001f0
 80044e8:	20000238 	.word	0x20000238
 80044ec:	200001ae 	.word	0x200001ae
 80044f0:	200001ad 	.word	0x200001ad
 80044f4:	200001ac 	.word	0x200001ac
 80044f8:	20000158 	.word	0x20000158
 80044fc:	40010800 	.word	0x40010800
 8004500:	40010c00 	.word	0x40010c00
 8004504:	20000001 	.word	0x20000001
 8004508:	20000004 	.word	0x20000004
 800450c:	200001b6 	.word	0x200001b6
 8004510:	200001b8 	.word	0x200001b8
 8004514:	20000005 	.word	0x20000005
 8004518:	cccccccd 	.word	0xcccccccd
 800451c:	200001b9 	.word	0x200001b9
 8004520:	66666667 	.word	0x66666667
 8004524:	200001b4 	.word	0x200001b4
      }
    }
    else if (work_Mode == MODE_OFF)
 8004528:	4bb6      	ldr	r3, [pc, #728]	@ (8004804 <main+0x60c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b46      	cmp	r3, #70	@ 0x46
 800452e:	d132      	bne.n	8004596 <main+0x39e>
    {
      time_Out = 0;
 8004530:	4bb5      	ldr	r3, [pc, #724]	@ (8004808 <main+0x610>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
      Segment_Set(0, 'N');
 8004536:	214e      	movs	r1, #78	@ 0x4e
 8004538:	2000      	movs	r0, #0
 800453a:	f7ff fbe9 	bl	8003d10 <Segment_Set>
      Segment_Set(1, 'N');
 800453e:	214e      	movs	r1, #78	@ 0x4e
 8004540:	2001      	movs	r0, #1
 8004542:	f7ff fbe5 	bl	8003d10 <Segment_Set>
      Segment_Set(2, 'N');
 8004546:	214e      	movs	r1, #78	@ 0x4e
 8004548:	2002      	movs	r0, #2
 800454a:	f7ff fbe1 	bl	8003d10 <Segment_Set>
      Segment_Set(3, 'N');
 800454e:	214e      	movs	r1, #78	@ 0x4e
 8004550:	2003      	movs	r0, #3
 8004552:	f7ff fbdd 	bl	8003d10 <Segment_Set>
      Segment_Set(4, 'N');
 8004556:	214e      	movs	r1, #78	@ 0x4e
 8004558:	2004      	movs	r0, #4
 800455a:	f7ff fbd9 	bl	8003d10 <Segment_Set>
      Segment_Set(5, 'N');
 800455e:	214e      	movs	r1, #78	@ 0x4e
 8004560:	2005      	movs	r0, #5
 8004562:	f7ff fbd5 	bl	8003d10 <Segment_Set>
      Segment_Set(6, 'N');
 8004566:	214e      	movs	r1, #78	@ 0x4e
 8004568:	2006      	movs	r0, #6
 800456a:	f7ff fbd1 	bl	8003d10 <Segment_Set>

      irRemote = Ir_GetData();
 800456e:	f7fe fbd3 	bl	8002d18 <Ir_GetData>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	4ba5      	ldr	r3, [pc, #660]	@ (800480c <main+0x614>)
 8004578:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 800457a:	4ba4      	ldr	r3, [pc, #656]	@ (800480c <main+0x614>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f43f ae9e 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 8004584:	4ba1      	ldr	r3, [pc, #644]	@ (800480c <main+0x614>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	4a9e      	ldr	r2, [pc, #632]	@ (8004804 <main+0x60c>)
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fd8e 	bl	80010b0 <Haamin_Remote>
 8004594:	e694      	b.n	80042c0 <main+0xc8>
      }
    }
    else if (work_Mode == MENU)
 8004596:	4b9b      	ldr	r3, [pc, #620]	@ (8004804 <main+0x60c>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b6d      	cmp	r3, #109	@ 0x6d
 800459c:	d136      	bne.n	800460c <main+0x414>
    {
      Segment_Set(0, 'f');
 800459e:	2166      	movs	r1, #102	@ 0x66
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7ff fbb5 	bl	8003d10 <Segment_Set>
      Segment_Set(1, Condition);
 80045a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004810 <main+0x618>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	4619      	mov	r1, r3
 80045ac:	2001      	movs	r0, #1
 80045ae:	f7ff fbaf 	bl	8003d10 <Segment_Set>
      Segment_Set(2, 'N');
 80045b2:	214e      	movs	r1, #78	@ 0x4e
 80045b4:	2002      	movs	r0, #2
 80045b6:	f7ff fbab 	bl	8003d10 <Segment_Set>
      Segment_Set(3, 'N');
 80045ba:	214e      	movs	r1, #78	@ 0x4e
 80045bc:	2003      	movs	r0, #3
 80045be:	f7ff fba7 	bl	8003d10 <Segment_Set>
      Segment_Set(4, 'N');
 80045c2:	214e      	movs	r1, #78	@ 0x4e
 80045c4:	2004      	movs	r0, #4
 80045c6:	f7ff fba3 	bl	8003d10 <Segment_Set>
      Segment_Set(5, 'N');
 80045ca:	214e      	movs	r1, #78	@ 0x4e
 80045cc:	2005      	movs	r0, #5
 80045ce:	f7ff fb9f 	bl	8003d10 <Segment_Set>
      Segment_Set(6, 'N');
 80045d2:	214e      	movs	r1, #78	@ 0x4e
 80045d4:	2006      	movs	r0, #6
 80045d6:	f7ff fb9b 	bl	8003d10 <Segment_Set>
      HAL_GPIO_WritePin(blinky_Point, LOW);
 80045da:	2200      	movs	r2, #0
 80045dc:	2110      	movs	r1, #16
 80045de:	488d      	ldr	r0, [pc, #564]	@ (8004814 <main+0x61c>)
 80045e0:	f003 f981 	bl	80078e6 <HAL_GPIO_WritePin>
      
      irRemote = Ir_GetData();
 80045e4:	f7fe fb98 	bl	8002d18 <Ir_GetData>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b87      	ldr	r3, [pc, #540]	@ (800480c <main+0x614>)
 80045ee:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 80045f0:	4b86      	ldr	r3, [pc, #536]	@ (800480c <main+0x614>)
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f43f ae63 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 80045fa:	4b84      	ldr	r3, [pc, #528]	@ (800480c <main+0x614>)
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	4a81      	ldr	r2, [pc, #516]	@ (8004804 <main+0x60c>)
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc fd53 	bl	80010b0 <Haamin_Remote>
 800460a:	e659      	b.n	80042c0 <main+0xc8>
      }
    }
    else if (work_Mode == TIME_SETTING)
 800460c:	4b7d      	ldr	r3, [pc, #500]	@ (8004804 <main+0x60c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b54      	cmp	r3, #84	@ 0x54
 8004612:	f040 80a7 	bne.w	8004764 <main+0x56c>
    {
      Segment_Set(6, 'N');
 8004616:	214e      	movs	r1, #78	@ 0x4e
 8004618:	2006      	movs	r0, #6
 800461a:	f7ff fb79 	bl	8003d10 <Segment_Set>
      if (time_Mode == SET_HOUR)
 800461e:	4b7e      	ldr	r3, [pc, #504]	@ (8004818 <main+0x620>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b48      	cmp	r3, #72	@ 0x48
 8004624:	d143      	bne.n	80046ae <main+0x4b6>
      {

        Segment_Set(2, time_Minute_t / 10);
 8004626:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <main+0x624>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4a7d      	ldr	r2, [pc, #500]	@ (8004820 <main+0x628>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	2002      	movs	r0, #2
 8004638:	f7ff fb6a 	bl	8003d10 <Segment_Set>
        Segment_Set(3, time_Minute_t % 10);
 800463c:	4b77      	ldr	r3, [pc, #476]	@ (800481c <main+0x624>)
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	4b77      	ldr	r3, [pc, #476]	@ (8004820 <main+0x628>)
 8004642:	fba3 1302 	umull	r1, r3, r3, r2
 8004646:	08d9      	lsrs	r1, r3, #3
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	2003      	movs	r0, #3
 8004658:	f7ff fb5a 	bl	8003d10 <Segment_Set>

        if (time_SecBit)
 800465c:	4b71      	ldr	r3, [pc, #452]	@ (8004824 <main+0x62c>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <main+0x4a4>
        {
          Segment_Set(0, timeValue / 10);
 8004664:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <main+0x630>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4a6d      	ldr	r2, [pc, #436]	@ (8004820 <main+0x628>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	08db      	lsrs	r3, r3, #3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	2000      	movs	r0, #0
 8004676:	f7ff fb4b 	bl	8003d10 <Segment_Set>
          Segment_Set(1, timeValue % 10);
 800467a:	4b6b      	ldr	r3, [pc, #428]	@ (8004828 <main+0x630>)
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	4b68      	ldr	r3, [pc, #416]	@ (8004820 <main+0x628>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	08d9      	lsrs	r1, r3, #3
 8004686:	460b      	mov	r3, r1
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	4619      	mov	r1, r3
 8004694:	2001      	movs	r0, #1
 8004696:	f7ff fb3b 	bl	8003d10 <Segment_Set>
 800469a:	e04f      	b.n	800473c <main+0x544>
        }
        else
        {
          Segment_Set(0, 'N');
 800469c:	214e      	movs	r1, #78	@ 0x4e
 800469e:	2000      	movs	r0, #0
 80046a0:	f7ff fb36 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 80046a4:	214e      	movs	r1, #78	@ 0x4e
 80046a6:	2001      	movs	r0, #1
 80046a8:	f7ff fb32 	bl	8003d10 <Segment_Set>
 80046ac:	e046      	b.n	800473c <main+0x544>
        }
      }
      else if (time_Mode == SET_MIN)
 80046ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004818 <main+0x620>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b4d      	cmp	r3, #77	@ 0x4d
 80046b4:	d142      	bne.n	800473c <main+0x544>
      {
        Segment_Set(0, time_Hour_t / 10);
 80046b6:	4b5d      	ldr	r3, [pc, #372]	@ (800482c <main+0x634>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	4a59      	ldr	r2, [pc, #356]	@ (8004820 <main+0x628>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7ff fb22 	bl	8003d10 <Segment_Set>
        Segment_Set(1, time_Hour_t % 10);
 80046cc:	4b57      	ldr	r3, [pc, #348]	@ (800482c <main+0x634>)
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <main+0x628>)
 80046d2:	fba3 1302 	umull	r1, r3, r3, r2
 80046d6:	08d9      	lsrs	r1, r3, #3
 80046d8:	460b      	mov	r3, r1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7ff fb12 	bl	8003d10 <Segment_Set>

        if (time_SecBit)
 80046ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004824 <main+0x62c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <main+0x534>
        {
          Segment_Set(2, timeValue / 10);
 80046f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004828 <main+0x630>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4a49      	ldr	r2, [pc, #292]	@ (8004820 <main+0x628>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	08db      	lsrs	r3, r3, #3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4619      	mov	r1, r3
 8004704:	2002      	movs	r0, #2
 8004706:	f7ff fb03 	bl	8003d10 <Segment_Set>
          Segment_Set(3, timeValue % 10);
 800470a:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <main+0x630>)
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	4b44      	ldr	r3, [pc, #272]	@ (8004820 <main+0x628>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	08d9      	lsrs	r1, r3, #3
 8004716:	460b      	mov	r3, r1
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4619      	mov	r1, r3
 8004724:	2003      	movs	r0, #3
 8004726:	f7ff faf3 	bl	8003d10 <Segment_Set>
 800472a:	e007      	b.n	800473c <main+0x544>
        }
        else
        {
          Segment_Set(2, 'N');
 800472c:	214e      	movs	r1, #78	@ 0x4e
 800472e:	2002      	movs	r0, #2
 8004730:	f7ff faee 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8004734:	214e      	movs	r1, #78	@ 0x4e
 8004736:	2003      	movs	r0, #3
 8004738:	f7ff faea 	bl	8003d10 <Segment_Set>
        }
      }

      irRemote = Ir_GetData();
 800473c:	f7fe faec 	bl	8002d18 <Ir_GetData>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	4b31      	ldr	r3, [pc, #196]	@ (800480c <main+0x614>)
 8004746:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 8004748:	4b30      	ldr	r3, [pc, #192]	@ (800480c <main+0x614>)
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f43f adb7 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 8004752:	4b2e      	ldr	r3, [pc, #184]	@ (800480c <main+0x614>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <main+0x60c>)
 8004758:	7812      	ldrb	r2, [r2, #0]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc fca7 	bl	80010b0 <Haamin_Remote>
 8004762:	e5ad      	b.n	80042c0 <main+0xc8>
      }
    }
    else if (work_Mode == UP_TIMER)
 8004764:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <main+0x60c>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b75      	cmp	r3, #117	@ 0x75
 800476a:	f040 81c3 	bne.w	8004af4 <main+0x8fc>
    {
      Segment_Set(6, 'S');
 800476e:	2153      	movs	r1, #83	@ 0x53
 8004770:	2006      	movs	r0, #6
 8004772:	f7ff facd 	bl	8003d10 <Segment_Set>
      if (timer_Mode == SETTING)
 8004776:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <main+0x638>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b73      	cmp	r3, #115	@ 0x73
 800477c:	d17a      	bne.n	8004874 <main+0x67c>
      {
        Segment_Set(0, 'U');
 800477e:	2155      	movs	r1, #85	@ 0x55
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fac5 	bl	8003d10 <Segment_Set>
        Segment_Set(1, 'P');
 8004786:	2150      	movs	r1, #80	@ 0x50
 8004788:	2001      	movs	r0, #1
 800478a:	f7ff fac1 	bl	8003d10 <Segment_Set>
        Segment_Set(4, upTime_Second / 10);
 800478e:	4b29      	ldr	r3, [pc, #164]	@ (8004834 <main+0x63c>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4a23      	ldr	r2, [pc, #140]	@ (8004820 <main+0x628>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	2004      	movs	r0, #4
 80047a0:	f7ff fab6 	bl	8003d10 <Segment_Set>
        Segment_Set(5, upTime_Second % 10);
 80047a4:	4b23      	ldr	r3, [pc, #140]	@ (8004834 <main+0x63c>)
 80047a6:	781a      	ldrb	r2, [r3, #0]
 80047a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <main+0x628>)
 80047aa:	fba3 1302 	umull	r1, r3, r3, r2
 80047ae:	08d9      	lsrs	r1, r3, #3
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	2005      	movs	r0, #5
 80047c0:	f7ff faa6 	bl	8003d10 <Segment_Set>
        if (time_SecBit)
 80047c4:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <main+0x62c>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d037      	beq.n	800483c <main+0x644>
        {
          Segment_Set(2, timer_Value / 10);
 80047cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004838 <main+0x640>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <main+0x628>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	2002      	movs	r0, #2
 80047de:	f7ff fa97 	bl	8003d10 <Segment_Set>
          Segment_Set(3, timer_Value % 10);
 80047e2:	4b15      	ldr	r3, [pc, #84]	@ (8004838 <main+0x640>)
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <main+0x628>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	08d9      	lsrs	r1, r3, #3
 80047ee:	460b      	mov	r3, r1
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	2003      	movs	r0, #3
 80047fe:	f7ff fa87 	bl	8003d10 <Segment_Set>
 8004802:	e023      	b.n	800484c <main+0x654>
 8004804:	20000001 	.word	0x20000001
 8004808:	200001b0 	.word	0x200001b0
 800480c:	200001b4 	.word	0x200001b4
 8004810:	20000006 	.word	0x20000006
 8004814:	40010800 	.word	0x40010800
 8004818:	20000002 	.word	0x20000002
 800481c:	200001b2 	.word	0x200001b2
 8004820:	cccccccd 	.word	0xcccccccd
 8004824:	200001af 	.word	0x200001af
 8004828:	200001b3 	.word	0x200001b3
 800482c:	200001b1 	.word	0x200001b1
 8004830:	200001ec 	.word	0x200001ec
 8004834:	200001dd 	.word	0x200001dd
 8004838:	200001ef 	.word	0x200001ef
        }
        else
        {
          Segment_Set(2, 'N');
 800483c:	214e      	movs	r1, #78	@ 0x4e
 800483e:	2002      	movs	r0, #2
 8004840:	f7ff fa66 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8004844:	214e      	movs	r1, #78	@ 0x4e
 8004846:	2003      	movs	r0, #3
 8004848:	f7ff fa62 	bl	8003d10 <Segment_Set>
        }

        irRemote = Ir_GetData();
 800484c:	f7fe fa64 	bl	8002d18 <Ir_GetData>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b97      	ldr	r3, [pc, #604]	@ (8004ab4 <main+0x8bc>)
 8004856:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8004858:	4b96      	ldr	r3, [pc, #600]	@ (8004ab4 <main+0x8bc>)
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8115 	beq.w	8004a8c <main+0x894>
        {
          Haamin_Remote(irRemote, work_Mode);
 8004862:	4b94      	ldr	r3, [pc, #592]	@ (8004ab4 <main+0x8bc>)
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	4a94      	ldr	r2, [pc, #592]	@ (8004ab8 <main+0x8c0>)
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	4611      	mov	r1, r2
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fc1f 	bl	80010b0 <Haamin_Remote>
 8004872:	e10b      	b.n	8004a8c <main+0x894>
        }
      }

      else if (timer_Mode == MAIN_FUNCTION)
 8004874:	4b91      	ldr	r3, [pc, #580]	@ (8004abc <main+0x8c4>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b66      	cmp	r3, #102	@ 0x66
 800487a:	f040 8107 	bne.w	8004a8c <main+0x894>
      {
        time_Out = 0;
 800487e:	4b90      	ldr	r3, [pc, #576]	@ (8004ac0 <main+0x8c8>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
        if (timer_StartUp)
 8004884:	4b8f      	ldr	r3, [pc, #572]	@ (8004ac4 <main+0x8cc>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d030      	beq.n	80048ee <main+0x6f6>
        {
          Segment_Set(0, 'N');
 800488c:	214e      	movs	r1, #78	@ 0x4e
 800488e:	2000      	movs	r0, #0
 8004890:	f7ff fa3e 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8004894:	214e      	movs	r1, #78	@ 0x4e
 8004896:	2001      	movs	r0, #1
 8004898:	f7ff fa3a 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 800489c:	214e      	movs	r1, #78	@ 0x4e
 800489e:	2002      	movs	r0, #2
 80048a0:	f7ff fa36 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 80048a4:	214e      	movs	r1, #78	@ 0x4e
 80048a6:	2003      	movs	r0, #3
 80048a8:	f7ff fa32 	bl	8003d10 <Segment_Set>
          Segment_Set(4, timer_TimeStarting / 10);
 80048ac:	4b86      	ldr	r3, [pc, #536]	@ (8004ac8 <main+0x8d0>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	4a86      	ldr	r2, [pc, #536]	@ (8004acc <main+0x8d4>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	08db      	lsrs	r3, r3, #3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	2004      	movs	r0, #4
 80048be:	f7ff fa27 	bl	8003d10 <Segment_Set>
          Segment_Set(5, timer_TimeStarting % 10);
 80048c2:	4b81      	ldr	r3, [pc, #516]	@ (8004ac8 <main+0x8d0>)
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	4b81      	ldr	r3, [pc, #516]	@ (8004acc <main+0x8d4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	08d9      	lsrs	r1, r3, #3
 80048ce:	460b      	mov	r3, r1
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	4619      	mov	r1, r3
 80048dc:	2005      	movs	r0, #5
 80048de:	f7ff fa17 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2110      	movs	r1, #16
 80048e6:	487a      	ldr	r0, [pc, #488]	@ (8004ad0 <main+0x8d8>)
 80048e8:	f002 fffd 	bl	80078e6 <HAL_GPIO_WritePin>
 80048ec:	e042      	b.n	8004974 <main+0x77c>
        }
        else
        {
          Segment_Set(0, 'U');
 80048ee:	2155      	movs	r1, #85	@ 0x55
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff fa0d 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'P');
 80048f6:	2150      	movs	r1, #80	@ 0x50
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7ff fa09 	bl	8003d10 <Segment_Set>
          Segment_Set(2, upTime_Minute / 10);
 80048fe:	4b75      	ldr	r3, [pc, #468]	@ (8004ad4 <main+0x8dc>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	4a72      	ldr	r2, [pc, #456]	@ (8004acc <main+0x8d4>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	2002      	movs	r0, #2
 8004910:	f7ff f9fe 	bl	8003d10 <Segment_Set>
          Segment_Set(3, upTime_Minute % 10);
 8004914:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <main+0x8dc>)
 8004916:	781a      	ldrb	r2, [r3, #0]
 8004918:	4b6c      	ldr	r3, [pc, #432]	@ (8004acc <main+0x8d4>)
 800491a:	fba3 1302 	umull	r1, r3, r3, r2
 800491e:	08d9      	lsrs	r1, r3, #3
 8004920:	460b      	mov	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	4619      	mov	r1, r3
 800492e:	2003      	movs	r0, #3
 8004930:	f7ff f9ee 	bl	8003d10 <Segment_Set>
          Segment_Set(4, upTime_Second / 10);
 8004934:	4b68      	ldr	r3, [pc, #416]	@ (8004ad8 <main+0x8e0>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	4a64      	ldr	r2, [pc, #400]	@ (8004acc <main+0x8d4>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4619      	mov	r1, r3
 8004944:	2004      	movs	r0, #4
 8004946:	f7ff f9e3 	bl	8003d10 <Segment_Set>
          Segment_Set(5, upTime_Second % 10);
 800494a:	4b63      	ldr	r3, [pc, #396]	@ (8004ad8 <main+0x8e0>)
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	4b5f      	ldr	r3, [pc, #380]	@ (8004acc <main+0x8d4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	08d9      	lsrs	r1, r3, #3
 8004956:	460b      	mov	r3, r1
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	2005      	movs	r0, #5
 8004966:	f7ff f9d3 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 800496a:	2201      	movs	r2, #1
 800496c:	2110      	movs	r1, #16
 800496e:	4858      	ldr	r0, [pc, #352]	@ (8004ad0 <main+0x8d8>)
 8004970:	f002 ffb9 	bl	80078e6 <HAL_GPIO_WritePin>
        }

        if (time_SecBit)
 8004974:	4b59      	ldr	r3, [pc, #356]	@ (8004adc <main+0x8e4>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8087 	beq.w	8004a8c <main+0x894>
        {
          time_SecBit = 0;
 800497e:	4b57      	ldr	r3, [pc, #348]	@ (8004adc <main+0x8e4>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
          if ((timer_Run == 1) || (mix_Flag))
 8004984:	4b56      	ldr	r3, [pc, #344]	@ (8004ae0 <main+0x8e8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d003      	beq.n	8004994 <main+0x79c>
 800498c:	4b55      	ldr	r3, [pc, #340]	@ (8004ae4 <main+0x8ec>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d07b      	beq.n	8004a8c <main+0x894>
          {
            if (mix_Flag)
 8004994:	4b53      	ldr	r3, [pc, #332]	@ (8004ae4 <main+0x8ec>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <main+0x7c2>
            {
              mix_Flag = 0;
 800499c:	4b51      	ldr	r3, [pc, #324]	@ (8004ae4 <main+0x8ec>)
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
              mix_Runnig = 1;
 80049a2:	4b51      	ldr	r3, [pc, #324]	@ (8004ae8 <main+0x8f0>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
              timer_Run = 1;
 80049a8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae0 <main+0x8e8>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
              timer_SrUpEn = 1;
 80049ae:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <main+0x8f4>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
              timer_TimeStarting = 11;
 80049b4:	4b44      	ldr	r3, [pc, #272]	@ (8004ac8 <main+0x8d0>)
 80049b6:	220b      	movs	r2, #11
 80049b8:	701a      	strb	r2, [r3, #0]
            }
            if (timer_SrUpEn)
 80049ba:	4b4c      	ldr	r3, [pc, #304]	@ (8004aec <main+0x8f4>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d029      	beq.n	8004a16 <main+0x81e>
            {
              timer_StartUp = 1;
 80049c2:	4b40      	ldr	r3, [pc, #256]	@ (8004ac4 <main+0x8cc>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
              timer_TimeStarting--;
 80049c8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac8 <main+0x8d0>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac8 <main+0x8d0>)
 80049d2:	701a      	strb	r2, [r3, #0]

              if (timer_TimeStarting < 4)
 80049d4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac8 <main+0x8d0>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d802      	bhi.n	80049e2 <main+0x7ea>
                Buzz(100);
 80049dc:	2064      	movs	r0, #100	@ 0x64
 80049de:	f7fe f8b1 	bl	8002b44 <Buzz>
              if (timer_TimeStarting < 1)
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <main+0x8d0>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d150      	bne.n	8004a8c <main+0x894>
              {
                timer_SrUpEn = 0;
 80049ea:	4b40      	ldr	r3, [pc, #256]	@ (8004aec <main+0x8f4>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 80049f0:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <main+0x8cc>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
                upTime_Minute = 0;
 80049f6:	4b37      	ldr	r3, [pc, #220]	@ (8004ad4 <main+0x8dc>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
                upTime_Second = 0;
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <main+0x8e0>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 8004a02:	2064      	movs	r0, #100	@ 0x64
 8004a04:	f7fe f89e 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 8004a08:	2064      	movs	r0, #100	@ 0x64
 8004a0a:	f002 f873 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8004a0e:	2064      	movs	r0, #100	@ 0x64
 8004a10:	f7fe f898 	bl	8002b44 <Buzz>
 8004a14:	e03a      	b.n	8004a8c <main+0x894>
              }
            }
            else
            {
              if (++upTime_Second > 59)
 8004a16:	4b30      	ldr	r3, [pc, #192]	@ (8004ad8 <main+0x8e0>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad8 <main+0x8e0>)
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad8 <main+0x8e0>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b3b      	cmp	r3, #59	@ 0x3b
 8004a28:	d930      	bls.n	8004a8c <main+0x894>
              {
                upTime_Second = 0;
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <main+0x8e0>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
                upTime_Minute++;
 8004a30:	4b28      	ldr	r3, [pc, #160]	@ (8004ad4 <main+0x8dc>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	4b26      	ldr	r3, [pc, #152]	@ (8004ad4 <main+0x8dc>)
 8004a3a:	701a      	strb	r2, [r3, #0]
                if (upTime_Minute == upTime_Minute_Defult)
 8004a3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <main+0x8dc>)
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <main+0x8f8>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d121      	bne.n	8004a8c <main+0x894>
                {
                  upTime_Minute = 0;
 8004a48:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <main+0x8dc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
                  upTime_Second = 0;
 8004a4e:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <main+0x8e0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
                  timer_Run = 0;
 8004a54:	4b22      	ldr	r3, [pc, #136]	@ (8004ae0 <main+0x8e8>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
                  if (mix_Runnig)
 8004a5a:	4b23      	ldr	r3, [pc, #140]	@ (8004ae8 <main+0x8f0>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <main+0x876>
                  {
                    work_Mode = MIX;
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <main+0x8c0>)
 8004a64:	2258      	movs	r2, #88	@ 0x58
 8004a66:	701a      	strb	r2, [r3, #0]
                    mix_Runnig = 0;
 8004a68:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae8 <main+0x8f0>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
                  }
                  Buzz(100);
 8004a6e:	2064      	movs	r0, #100	@ 0x64
 8004a70:	f7fe f868 	bl	8002b44 <Buzz>
                  HAL_Delay(100);
 8004a74:	2064      	movs	r0, #100	@ 0x64
 8004a76:	f002 f83d 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8004a7a:	2064      	movs	r0, #100	@ 0x64
 8004a7c:	f7fe f862 	bl	8002b44 <Buzz>
                  HAL_Delay(100);
 8004a80:	2064      	movs	r0, #100	@ 0x64
 8004a82:	f002 f837 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8004a86:	2064      	movs	r0, #100	@ 0x64
 8004a88:	f7fe f85c 	bl	8002b44 <Buzz>
            }
          }
        }
      }

      irRemote = Ir_GetData();
 8004a8c:	f7fe f944 	bl	8002d18 <Ir_GetData>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <main+0x8bc>)
 8004a96:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 8004a98:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <main+0x8bc>)
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f43f ac0f 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 8004aa2:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <main+0x8bc>)
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <main+0x8c0>)
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc faff 	bl	80010b0 <Haamin_Remote>
 8004ab2:	e405      	b.n	80042c0 <main+0xc8>
 8004ab4:	200001b4 	.word	0x200001b4
 8004ab8:	20000001 	.word	0x20000001
 8004abc:	200001ec 	.word	0x200001ec
 8004ac0:	200001b0 	.word	0x200001b0
 8004ac4:	200001ed 	.word	0x200001ed
 8004ac8:	200001eb 	.word	0x200001eb
 8004acc:	cccccccd 	.word	0xcccccccd
 8004ad0:	40010800 	.word	0x40010800
 8004ad4:	200001de 	.word	0x200001de
 8004ad8:	200001dd 	.word	0x200001dd
 8004adc:	200001af 	.word	0x200001af
 8004ae0:	200001ee 	.word	0x200001ee
 8004ae4:	200001d5 	.word	0x200001d5
 8004ae8:	200001d6 	.word	0x200001d6
 8004aec:	20000016 	.word	0x20000016
 8004af0:	20000014 	.word	0x20000014
      }
    }
    else if (work_Mode == DN_TIMER)
 8004af4:	4ba5      	ldr	r3, [pc, #660]	@ (8004d8c <main+0xb94>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b64      	cmp	r3, #100	@ 0x64
 8004afa:	f040 81b9 	bne.w	8004e70 <main+0xc78>
    {
      Segment_Set(6, 'u');
 8004afe:	2175      	movs	r1, #117	@ 0x75
 8004b00:	2006      	movs	r0, #6
 8004b02:	f7ff f905 	bl	8003d10 <Segment_Set>
      if (timer_Mode == SETTING)
 8004b06:	4ba2      	ldr	r3, [pc, #648]	@ (8004d90 <main+0xb98>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b73      	cmp	r3, #115	@ 0x73
 8004b0c:	d162      	bne.n	8004bd4 <main+0x9dc>
      {
        Segment_Set(0, 'd');
 8004b0e:	2164      	movs	r1, #100	@ 0x64
 8004b10:	2000      	movs	r0, #0
 8004b12:	f7ff f8fd 	bl	8003d10 <Segment_Set>
        Segment_Set(1, 'n');
 8004b16:	216e      	movs	r1, #110	@ 0x6e
 8004b18:	2001      	movs	r0, #1
 8004b1a:	f7ff f8f9 	bl	8003d10 <Segment_Set>
        Segment_Set(4, dnTime_Second / 10);
 8004b1e:	4b9d      	ldr	r3, [pc, #628]	@ (8004d94 <main+0xb9c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a9d      	ldr	r2, [pc, #628]	@ (8004d98 <main+0xba0>)
 8004b24:	fb82 1203 	smull	r1, r2, r2, r3
 8004b28:	1092      	asrs	r2, r2, #2
 8004b2a:	17db      	asrs	r3, r3, #31
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	2004      	movs	r0, #4
 8004b34:	f7ff f8ec 	bl	8003d10 <Segment_Set>
        Segment_Set(5, dnTime_Second % 10);
 8004b38:	4b96      	ldr	r3, [pc, #600]	@ (8004d94 <main+0xb9c>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <main+0xba0>)
 8004b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b42:	1099      	asrs	r1, r3, #2
 8004b44:	17d3      	asrs	r3, r2, #31
 8004b46:	1ac9      	subs	r1, r1, r3
 8004b48:	460b      	mov	r3, r1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	1ad1      	subs	r1, r2, r3
 8004b52:	b2cb      	uxtb	r3, r1
 8004b54:	4619      	mov	r1, r3
 8004b56:	2005      	movs	r0, #5
 8004b58:	f7ff f8da 	bl	8003d10 <Segment_Set>
        if (time_SecBit)
 8004b5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d9c <main+0xba4>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <main+0x9a4>
        {
          Segment_Set(2, timer_Value / 10);
 8004b64:	4b8e      	ldr	r3, [pc, #568]	@ (8004da0 <main+0xba8>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	4a8e      	ldr	r2, [pc, #568]	@ (8004da4 <main+0xbac>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	2002      	movs	r0, #2
 8004b76:	f7ff f8cb 	bl	8003d10 <Segment_Set>
          Segment_Set(3, timer_Value % 10);
 8004b7a:	4b89      	ldr	r3, [pc, #548]	@ (8004da0 <main+0xba8>)
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	4b89      	ldr	r3, [pc, #548]	@ (8004da4 <main+0xbac>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	08d9      	lsrs	r1, r3, #3
 8004b86:	460b      	mov	r3, r1
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	2003      	movs	r0, #3
 8004b96:	f7ff f8bb 	bl	8003d10 <Segment_Set>
 8004b9a:	e007      	b.n	8004bac <main+0x9b4>
        }
        else
        {
          Segment_Set(2, 'N');
 8004b9c:	214e      	movs	r1, #78	@ 0x4e
 8004b9e:	2002      	movs	r0, #2
 8004ba0:	f7ff f8b6 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8004ba4:	214e      	movs	r1, #78	@ 0x4e
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	f7ff f8b2 	bl	8003d10 <Segment_Set>
        }

        irRemote = Ir_GetData();
 8004bac:	f7fe f8b4 	bl	8002d18 <Ir_GetData>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8004da8 <main+0xbb0>)
 8004bb6:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8004bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8004da8 <main+0xbb0>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8142 	beq.w	8004e46 <main+0xc4e>
        {
          Haamin_Remote(irRemote, work_Mode);
 8004bc2:	4b79      	ldr	r3, [pc, #484]	@ (8004da8 <main+0xbb0>)
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	4a71      	ldr	r2, [pc, #452]	@ (8004d8c <main+0xb94>)
 8004bc8:	7812      	ldrb	r2, [r2, #0]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fc fa6f 	bl	80010b0 <Haamin_Remote>
 8004bd2:	e138      	b.n	8004e46 <main+0xc4e>
        }
      }

      else if (timer_Mode == MAIN_FUNCTION)
 8004bd4:	4b6e      	ldr	r3, [pc, #440]	@ (8004d90 <main+0xb98>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b66      	cmp	r3, #102	@ 0x66
 8004bda:	f040 8134 	bne.w	8004e46 <main+0xc4e>
      {
        time_Out = 0;
 8004bde:	4b73      	ldr	r3, [pc, #460]	@ (8004dac <main+0xbb4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
        if (timer_StartUp)
 8004be4:	4b72      	ldr	r3, [pc, #456]	@ (8004db0 <main+0xbb8>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d030      	beq.n	8004c4e <main+0xa56>
        {
          Segment_Set(0, 'N');
 8004bec:	214e      	movs	r1, #78	@ 0x4e
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7ff f88e 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8004bf4:	214e      	movs	r1, #78	@ 0x4e
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	f7ff f88a 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 8004bfc:	214e      	movs	r1, #78	@ 0x4e
 8004bfe:	2002      	movs	r0, #2
 8004c00:	f7ff f886 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8004c04:	214e      	movs	r1, #78	@ 0x4e
 8004c06:	2003      	movs	r0, #3
 8004c08:	f7ff f882 	bl	8003d10 <Segment_Set>
          Segment_Set(4, timer_TimeStarting / 10);
 8004c0c:	4b69      	ldr	r3, [pc, #420]	@ (8004db4 <main+0xbbc>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4a64      	ldr	r2, [pc, #400]	@ (8004da4 <main+0xbac>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	08db      	lsrs	r3, r3, #3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	2004      	movs	r0, #4
 8004c1e:	f7ff f877 	bl	8003d10 <Segment_Set>
          Segment_Set(5, timer_TimeStarting % 10);
 8004c22:	4b64      	ldr	r3, [pc, #400]	@ (8004db4 <main+0xbbc>)
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	4b5f      	ldr	r3, [pc, #380]	@ (8004da4 <main+0xbac>)
 8004c28:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2c:	08d9      	lsrs	r1, r3, #3
 8004c2e:	460b      	mov	r3, r1
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	2005      	movs	r0, #5
 8004c3e:	f7ff f867 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8004c42:	2200      	movs	r2, #0
 8004c44:	2110      	movs	r1, #16
 8004c46:	485c      	ldr	r0, [pc, #368]	@ (8004db8 <main+0xbc0>)
 8004c48:	f002 fe4d 	bl	80078e6 <HAL_GPIO_WritePin>
 8004c4c:	e04a      	b.n	8004ce4 <main+0xaec>
        }
        else
        {
          Segment_Set(0, 'd');
 8004c4e:	2164      	movs	r1, #100	@ 0x64
 8004c50:	2000      	movs	r0, #0
 8004c52:	f7ff f85d 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'n');
 8004c56:	216e      	movs	r1, #110	@ 0x6e
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7ff f859 	bl	8003d10 <Segment_Set>
          Segment_Set(2, dnTime_Minute / 10);
 8004c5e:	4b57      	ldr	r3, [pc, #348]	@ (8004dbc <main+0xbc4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a4d      	ldr	r2, [pc, #308]	@ (8004d98 <main+0xba0>)
 8004c64:	fb82 1203 	smull	r1, r2, r2, r3
 8004c68:	1092      	asrs	r2, r2, #2
 8004c6a:	17db      	asrs	r3, r3, #31
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	4619      	mov	r1, r3
 8004c72:	2002      	movs	r0, #2
 8004c74:	f7ff f84c 	bl	8003d10 <Segment_Set>
          Segment_Set(3, dnTime_Minute % 10);
 8004c78:	4b50      	ldr	r3, [pc, #320]	@ (8004dbc <main+0xbc4>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b46      	ldr	r3, [pc, #280]	@ (8004d98 <main+0xba0>)
 8004c7e:	fb83 1302 	smull	r1, r3, r3, r2
 8004c82:	1099      	asrs	r1, r3, #2
 8004c84:	17d3      	asrs	r3, r2, #31
 8004c86:	1ac9      	subs	r1, r1, r3
 8004c88:	460b      	mov	r3, r1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	1ad1      	subs	r1, r2, r3
 8004c92:	b2cb      	uxtb	r3, r1
 8004c94:	4619      	mov	r1, r3
 8004c96:	2003      	movs	r0, #3
 8004c98:	f7ff f83a 	bl	8003d10 <Segment_Set>
          Segment_Set(4, dnTime_Second / 10);
 8004c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d94 <main+0xb9c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3d      	ldr	r2, [pc, #244]	@ (8004d98 <main+0xba0>)
 8004ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ca6:	1092      	asrs	r2, r2, #2
 8004ca8:	17db      	asrs	r3, r3, #31
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	2004      	movs	r0, #4
 8004cb2:	f7ff f82d 	bl	8003d10 <Segment_Set>
          Segment_Set(5, dnTime_Second % 10);
 8004cb6:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <main+0xb9c>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b37      	ldr	r3, [pc, #220]	@ (8004d98 <main+0xba0>)
 8004cbc:	fb83 1302 	smull	r1, r3, r3, r2
 8004cc0:	1099      	asrs	r1, r3, #2
 8004cc2:	17d3      	asrs	r3, r2, #31
 8004cc4:	1ac9      	subs	r1, r1, r3
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	1ad1      	subs	r1, r2, r3
 8004cd0:	b2cb      	uxtb	r3, r1
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	2005      	movs	r0, #5
 8004cd6:	f7ff f81b 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2110      	movs	r1, #16
 8004cde:	4836      	ldr	r0, [pc, #216]	@ (8004db8 <main+0xbc0>)
 8004ce0:	f002 fe01 	bl	80078e6 <HAL_GPIO_WritePin>
        }

        if (time_SecBit)
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d9c <main+0xba4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80ac 	beq.w	8004e46 <main+0xc4e>
        {
          time_SecBit = 0;
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <main+0xba4>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
          if (timer_Run || mix_Flag)
 8004cf4:	4b32      	ldr	r3, [pc, #200]	@ (8004dc0 <main+0xbc8>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <main+0xb0e>
 8004cfc:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <main+0xbcc>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a0 	beq.w	8004e46 <main+0xc4e>
          {
            if (mix_Flag)
 8004d06:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc4 <main+0xbcc>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <main+0xb34>
            {
              mix_Flag = 0;
 8004d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <main+0xbcc>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
              mix_Runnig = 1;
 8004d14:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <main+0xbd0>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
              timer_Run = 1;
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <main+0xbc8>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
              timer_SrUpEn = 1;
 8004d20:	4b2a      	ldr	r3, [pc, #168]	@ (8004dcc <main+0xbd4>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
              timer_TimeStarting = 11;
 8004d26:	4b23      	ldr	r3, [pc, #140]	@ (8004db4 <main+0xbbc>)
 8004d28:	220b      	movs	r2, #11
 8004d2a:	701a      	strb	r2, [r3, #0]
            }
            if (timer_SrUpEn)
 8004d2c:	4b27      	ldr	r3, [pc, #156]	@ (8004dcc <main+0xbd4>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d04f      	beq.n	8004dd4 <main+0xbdc>
            {
              timer_StartUp = 1;
 8004d34:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <main+0xbb8>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
              timer_TimeStarting--;
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8004db4 <main+0xbbc>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b1c      	ldr	r3, [pc, #112]	@ (8004db4 <main+0xbbc>)
 8004d44:	701a      	strb	r2, [r3, #0]

              if (timer_TimeStarting < 4)
 8004d46:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <main+0xbbc>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d802      	bhi.n	8004d54 <main+0xb5c>
                Buzz(100);
 8004d4e:	2064      	movs	r0, #100	@ 0x64
 8004d50:	f7fd fef8 	bl	8002b44 <Buzz>
              if (timer_TimeStarting < 1)
 8004d54:	4b17      	ldr	r3, [pc, #92]	@ (8004db4 <main+0xbbc>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d174      	bne.n	8004e46 <main+0xc4e>
              {
                timer_SrUpEn = 0;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <main+0xbd4>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
                timer_StartUp = 0;
 8004d62:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <main+0xbb8>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
                dnTime_Minute = dnTime_Minute_Defult;
 8004d68:	4b19      	ldr	r3, [pc, #100]	@ (8004dd0 <main+0xbd8>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4b13      	ldr	r3, [pc, #76]	@ (8004dbc <main+0xbc4>)
 8004d70:	601a      	str	r2, [r3, #0]
                dnTime_Second = 0;
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <main+0xb9c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
                Buzz(100);
 8004d78:	2064      	movs	r0, #100	@ 0x64
 8004d7a:	f7fd fee3 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 8004d7e:	2064      	movs	r0, #100	@ 0x64
 8004d80:	f001 feb8 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8004d84:	2064      	movs	r0, #100	@ 0x64
 8004d86:	f7fd fedd 	bl	8002b44 <Buzz>
 8004d8a:	e05c      	b.n	8004e46 <main+0xc4e>
 8004d8c:	20000001 	.word	0x20000001
 8004d90:	200001ec 	.word	0x200001ec
 8004d94:	200001e0 	.word	0x200001e0
 8004d98:	66666667 	.word	0x66666667
 8004d9c:	200001af 	.word	0x200001af
 8004da0:	200001ef 	.word	0x200001ef
 8004da4:	cccccccd 	.word	0xcccccccd
 8004da8:	200001b4 	.word	0x200001b4
 8004dac:	200001b0 	.word	0x200001b0
 8004db0:	200001ed 	.word	0x200001ed
 8004db4:	200001eb 	.word	0x200001eb
 8004db8:	40010800 	.word	0x40010800
 8004dbc:	200001e4 	.word	0x200001e4
 8004dc0:	200001ee 	.word	0x200001ee
 8004dc4:	200001d5 	.word	0x200001d5
 8004dc8:	200001d6 	.word	0x200001d6
 8004dcc:	20000016 	.word	0x20000016
 8004dd0:	20000015 	.word	0x20000015
              }
            }
            else
            {
              dnTime_Second--;
 8004dd4:	4bac      	ldr	r3, [pc, #688]	@ (8005088 <main+0xe90>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	4aab      	ldr	r2, [pc, #684]	@ (8005088 <main+0xe90>)
 8004ddc:	6013      	str	r3, [r2, #0]
              if (dnTime_Second < 0)
 8004dde:	4baa      	ldr	r3, [pc, #680]	@ (8005088 <main+0xe90>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da2f      	bge.n	8004e46 <main+0xc4e>
              {
                dnTime_Second = 59;
 8004de6:	4ba8      	ldr	r3, [pc, #672]	@ (8005088 <main+0xe90>)
 8004de8:	223b      	movs	r2, #59	@ 0x3b
 8004dea:	601a      	str	r2, [r3, #0]
                dnTime_Minute--;
 8004dec:	4ba7      	ldr	r3, [pc, #668]	@ (800508c <main+0xe94>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4aa6      	ldr	r2, [pc, #664]	@ (800508c <main+0xe94>)
 8004df4:	6013      	str	r3, [r2, #0]
                if (dnTime_Minute < 0)
 8004df6:	4ba5      	ldr	r3, [pc, #660]	@ (800508c <main+0xe94>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da23      	bge.n	8004e46 <main+0xc4e>
                {
                  dnTime_Minute = dnTime_Minute_Defult;
 8004dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8005090 <main+0xe98>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4ba1      	ldr	r3, [pc, #644]	@ (800508c <main+0xe94>)
 8004e06:	601a      	str	r2, [r3, #0]
                  dnTime_Second = 0;
 8004e08:	4b9f      	ldr	r3, [pc, #636]	@ (8005088 <main+0xe90>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
                  timer_Run = 0;
 8004e0e:	4ba1      	ldr	r3, [pc, #644]	@ (8005094 <main+0xe9c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
                  if (mix_Runnig)
 8004e14:	4ba0      	ldr	r3, [pc, #640]	@ (8005098 <main+0xea0>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <main+0xc30>
                  {
                    mix_Runnig = 0;
 8004e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8005098 <main+0xea0>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
                    work_Mode = MIX;
 8004e22:	4b9e      	ldr	r3, [pc, #632]	@ (800509c <main+0xea4>)
 8004e24:	2258      	movs	r2, #88	@ 0x58
 8004e26:	701a      	strb	r2, [r3, #0]
                  }
                  Buzz(100);
 8004e28:	2064      	movs	r0, #100	@ 0x64
 8004e2a:	f7fd fe8b 	bl	8002b44 <Buzz>
                  HAL_Delay(100);
 8004e2e:	2064      	movs	r0, #100	@ 0x64
 8004e30:	f001 fe60 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8004e34:	2064      	movs	r0, #100	@ 0x64
 8004e36:	f7fd fe85 	bl	8002b44 <Buzz>
                  HAL_Delay(100);
 8004e3a:	2064      	movs	r0, #100	@ 0x64
 8004e3c:	f001 fe5a 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8004e40:	2064      	movs	r0, #100	@ 0x64
 8004e42:	f7fd fe7f 	bl	8002b44 <Buzz>
            }
          }
        }
      }

      irRemote = Ir_GetData();
 8004e46:	f7fd ff67 	bl	8002d18 <Ir_GetData>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b94      	ldr	r3, [pc, #592]	@ (80050a0 <main+0xea8>)
 8004e50:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 8004e52:	4b93      	ldr	r3, [pc, #588]	@ (80050a0 <main+0xea8>)
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f43f aa32 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 8004e5c:	4b90      	ldr	r3, [pc, #576]	@ (80050a0 <main+0xea8>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	4a8e      	ldr	r2, [pc, #568]	@ (800509c <main+0xea4>)
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	4611      	mov	r1, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc f922 	bl	80010b0 <Haamin_Remote>
 8004e6c:	f7ff ba28 	b.w	80042c0 <main+0xc8>
      }
    }
    else if (work_Mode == TABATA)
 8004e70:	4b8a      	ldr	r3, [pc, #552]	@ (800509c <main+0xea4>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b74      	cmp	r3, #116	@ 0x74
 8004e76:	f040 82c5 	bne.w	8005404 <main+0x120c>
    {
      Segment_Set(6, 'M');
 8004e7a:	214d      	movs	r1, #77	@ 0x4d
 8004e7c:	2006      	movs	r0, #6
 8004e7e:	f7fe ff47 	bl	8003d10 <Segment_Set>
      if (cross_Mode == MAIN_FUNCTION)
 8004e82:	4b88      	ldr	r3, [pc, #544]	@ (80050a4 <main+0xeac>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b66      	cmp	r3, #102	@ 0x66
 8004e88:	f040 8197 	bne.w	80051ba <main+0xfc2>
      {
        time_Out = 0;
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <main+0xeb0>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
        if (cross_StartUp)
 8004e92:	4b86      	ldr	r3, [pc, #536]	@ (80050ac <main+0xeb4>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d030      	beq.n	8004efc <main+0xd04>
        {
          Segment_Set(0, 'N');
 8004e9a:	214e      	movs	r1, #78	@ 0x4e
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7fe ff37 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8004ea2:	214e      	movs	r1, #78	@ 0x4e
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	f7fe ff33 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 8004eaa:	214e      	movs	r1, #78	@ 0x4e
 8004eac:	2002      	movs	r0, #2
 8004eae:	f7fe ff2f 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8004eb2:	214e      	movs	r1, #78	@ 0x4e
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	f7fe ff2b 	bl	8003d10 <Segment_Set>
          Segment_Set(4, cross_TimeStarting / 10);
 8004eba:	4b7d      	ldr	r3, [pc, #500]	@ (80050b0 <main+0xeb8>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	4a7d      	ldr	r2, [pc, #500]	@ (80050b4 <main+0xebc>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	2004      	movs	r0, #4
 8004ecc:	f7fe ff20 	bl	8003d10 <Segment_Set>
          Segment_Set(5, cross_TimeStarting % 10);
 8004ed0:	4b77      	ldr	r3, [pc, #476]	@ (80050b0 <main+0xeb8>)
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	4b77      	ldr	r3, [pc, #476]	@ (80050b4 <main+0xebc>)
 8004ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8004eda:	08d9      	lsrs	r1, r3, #3
 8004edc:	460b      	mov	r3, r1
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	4619      	mov	r1, r3
 8004eea:	2005      	movs	r0, #5
 8004eec:	f7fe ff10 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	4870      	ldr	r0, [pc, #448]	@ (80050b8 <main+0xec0>)
 8004ef6:	f002 fcf6 	bl	80078e6 <HAL_GPIO_WritePin>
 8004efa:	e055      	b.n	8004fa8 <main+0xdb0>
        }
        else
        {
          Segment_Set(0, tabata_Round / 10);
 8004efc:	4b6f      	ldr	r3, [pc, #444]	@ (80050bc <main+0xec4>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4a6c      	ldr	r2, [pc, #432]	@ (80050b4 <main+0xebc>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	08db      	lsrs	r3, r3, #3
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fe feff 	bl	8003d10 <Segment_Set>
          Segment_Set(1, tabata_Round % 10);
 8004f12:	4b6a      	ldr	r3, [pc, #424]	@ (80050bc <main+0xec4>)
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <main+0xebc>)
 8004f18:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1c:	08d9      	lsrs	r1, r3, #3
 8004f1e:	460b      	mov	r3, r1
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	f7fe feef 	bl	8003d10 <Segment_Set>
          Segment_Set(2, tabata_Act / 10);
 8004f32:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <main+0xec8>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4a5f      	ldr	r2, [pc, #380]	@ (80050b4 <main+0xebc>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	2002      	movs	r0, #2
 8004f44:	f7fe fee4 	bl	8003d10 <Segment_Set>
          Segment_Set(3, tabata_Act % 10);
 8004f48:	4b5d      	ldr	r3, [pc, #372]	@ (80050c0 <main+0xec8>)
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <main+0xebc>)
 8004f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f52:	08d9      	lsrs	r1, r3, #3
 8004f54:	460b      	mov	r3, r1
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	2003      	movs	r0, #3
 8004f64:	f7fe fed4 	bl	8003d10 <Segment_Set>
          Segment_Set(4, tabata_Rest / 10);
 8004f68:	4b56      	ldr	r3, [pc, #344]	@ (80050c4 <main+0xecc>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	@ (80050b4 <main+0xebc>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	08db      	lsrs	r3, r3, #3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	4619      	mov	r1, r3
 8004f78:	2004      	movs	r0, #4
 8004f7a:	f7fe fec9 	bl	8003d10 <Segment_Set>
          Segment_Set(5, tabata_Rest % 10);
 8004f7e:	4b51      	ldr	r3, [pc, #324]	@ (80050c4 <main+0xecc>)
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	4b4c      	ldr	r3, [pc, #304]	@ (80050b4 <main+0xebc>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	08d9      	lsrs	r1, r3, #3
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	4619      	mov	r1, r3
 8004f98:	2005      	movs	r0, #5
 8004f9a:	f7fe feb9 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	4845      	ldr	r0, [pc, #276]	@ (80050b8 <main+0xec0>)
 8004fa4:	f002 fc9f 	bl	80078e6 <HAL_GPIO_WritePin>
        }

        if (time_SecBit)
 8004fa8:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <main+0xed0>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80ef 	beq.w	8005190 <main+0xf98>
        {
          time_SecBit = 0;
 8004fb2:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <main+0xed0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
          if (cross_Run || mix_Flag)
 8004fb8:	4b44      	ldr	r3, [pc, #272]	@ (80050cc <main+0xed4>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <main+0xdd2>
 8004fc0:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <main+0xed8>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80e3 	beq.w	8005190 <main+0xf98>
          {
            if (mix_Flag)
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <main+0xed8>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00e      	beq.n	8004ff0 <main+0xdf8>
            {
              mix_Flag = 0;
 8004fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80050d0 <main+0xed8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
              mix_Runnig = 1;
 8004fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8005098 <main+0xea0>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
              cross_Run = 1;
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <main+0xed4>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
              cross_SrUpEn = 1;
 8004fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80050d4 <main+0xedc>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting = 11;
 8004fea:	4b31      	ldr	r3, [pc, #196]	@ (80050b0 <main+0xeb8>)
 8004fec:	220b      	movs	r2, #11
 8004fee:	701a      	strb	r2, [r3, #0]
            }
            if (cross_SrUpEn)
 8004ff0:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <main+0xedc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <main+0xe52>
            {
              cross_StartUp = 1;
 8004ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80050ac <main+0xeb4>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting--;
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <main+0xeb8>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b2a      	ldr	r3, [pc, #168]	@ (80050b0 <main+0xeb8>)
 8005008:	701a      	strb	r2, [r3, #0]
              if (cross_TimeStarting < 4)
 800500a:	4b29      	ldr	r3, [pc, #164]	@ (80050b0 <main+0xeb8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d802      	bhi.n	8005018 <main+0xe20>
                Buzz(100);
 8005012:	2064      	movs	r0, #100	@ 0x64
 8005014:	f7fd fd96 	bl	8002b44 <Buzz>
              if (cross_TimeStarting < 1)
 8005018:	4b25      	ldr	r3, [pc, #148]	@ (80050b0 <main+0xeb8>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d114      	bne.n	800504a <main+0xe52>
              {
                cross_TimeStarting = 11;
 8005020:	4b23      	ldr	r3, [pc, #140]	@ (80050b0 <main+0xeb8>)
 8005022:	220b      	movs	r2, #11
 8005024:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 8005026:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <main+0xeb4>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 0;
 800502c:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <main+0xedc>)
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
                tabata_Mode = ACT;
 8005032:	4b29      	ldr	r3, [pc, #164]	@ (80050d8 <main+0xee0>)
 8005034:	2269      	movs	r2, #105	@ 0x69
 8005036:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 8005038:	2064      	movs	r0, #100	@ 0x64
 800503a:	f7fd fd83 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 800503e:	2064      	movs	r0, #100	@ 0x64
 8005040:	f001 fd58 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8005044:	2064      	movs	r0, #100	@ 0x64
 8005046:	f7fd fd7d 	bl	8002b44 <Buzz>
              }
            }
            if (tabata_Mode == ACT)
 800504a:	4b23      	ldr	r3, [pc, #140]	@ (80050d8 <main+0xee0>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b69      	cmp	r3, #105	@ 0x69
 8005050:	d146      	bne.n	80050e0 <main+0xee8>
            {
              tabata_Act--;
 8005052:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <main+0xec8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	3b01      	subs	r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <main+0xec8>)
 800505c:	701a      	strb	r2, [r3, #0]
              if (tabata_Act < 1)
 800505e:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <main+0xec8>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d162      	bne.n	800512c <main+0xf34>
              {
                tabata_Mode = REST;
 8005066:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <main+0xee0>)
 8005068:	2245      	movs	r2, #69	@ 0x45
 800506a:	701a      	strb	r2, [r3, #0]
                tabata_Act = tabata_Act_Def;
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <main+0xee4>)
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <main+0xec8>)
 8005072:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 8005074:	2064      	movs	r0, #100	@ 0x64
 8005076:	f7fd fd65 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 800507a:	2064      	movs	r0, #100	@ 0x64
 800507c:	f001 fd3a 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8005080:	2064      	movs	r0, #100	@ 0x64
 8005082:	f7fd fd5f 	bl	8002b44 <Buzz>
 8005086:	e051      	b.n	800512c <main+0xf34>
 8005088:	200001e0 	.word	0x200001e0
 800508c:	200001e4 	.word	0x200001e4
 8005090:	20000015 	.word	0x20000015
 8005094:	200001ee 	.word	0x200001ee
 8005098:	200001d6 	.word	0x200001d6
 800509c:	20000001 	.word	0x20000001
 80050a0:	200001b4 	.word	0x200001b4
 80050a4:	200001d8 	.word	0x200001d8
 80050a8:	200001b0 	.word	0x200001b0
 80050ac:	200001d9 	.word	0x200001d9
 80050b0:	200001d7 	.word	0x200001d7
 80050b4:	cccccccd 	.word	0xcccccccd
 80050b8:	40010800 	.word	0x40010800
 80050bc:	200001bb 	.word	0x200001bb
 80050c0:	200001ba 	.word	0x200001ba
 80050c4:	200001bc 	.word	0x200001bc
 80050c8:	200001af 	.word	0x200001af
 80050cc:	200001da 	.word	0x200001da
 80050d0:	200001d5 	.word	0x200001d5
 80050d4:	200001db 	.word	0x200001db
 80050d8:	200001bd 	.word	0x200001bd
 80050dc:	20000007 	.word	0x20000007
              }
            }
            else if (tabata_Mode == REST)
 80050e0:	4bb6      	ldr	r3, [pc, #728]	@ (80053bc <main+0x11c4>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b45      	cmp	r3, #69	@ 0x45
 80050e6:	d121      	bne.n	800512c <main+0xf34>
            {
              tabata_Rest--;
 80050e8:	4bb5      	ldr	r3, [pc, #724]	@ (80053c0 <main+0x11c8>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4bb3      	ldr	r3, [pc, #716]	@ (80053c0 <main+0x11c8>)
 80050f2:	701a      	strb	r2, [r3, #0]
              if (tabata_Rest < 4)
 80050f4:	4bb2      	ldr	r3, [pc, #712]	@ (80053c0 <main+0x11c8>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d802      	bhi.n	8005102 <main+0xf0a>
                Buzz(100);
 80050fc:	2064      	movs	r0, #100	@ 0x64
 80050fe:	f7fd fd21 	bl	8002b44 <Buzz>
              if (tabata_Rest < 1)
 8005102:	4baf      	ldr	r3, [pc, #700]	@ (80053c0 <main+0x11c8>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d110      	bne.n	800512c <main+0xf34>
              {
                tabata_Mode = ACT;
 800510a:	4bac      	ldr	r3, [pc, #688]	@ (80053bc <main+0x11c4>)
 800510c:	2269      	movs	r2, #105	@ 0x69
 800510e:	701a      	strb	r2, [r3, #0]
                tabata_Rest = tabata_Rest_Def;
 8005110:	4bac      	ldr	r3, [pc, #688]	@ (80053c4 <main+0x11cc>)
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	4baa      	ldr	r3, [pc, #680]	@ (80053c0 <main+0x11c8>)
 8005116:	701a      	strb	r2, [r3, #0]
                tabata_Round--;
 8005118:	4bab      	ldr	r3, [pc, #684]	@ (80053c8 <main+0x11d0>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	4ba9      	ldr	r3, [pc, #676]	@ (80053c8 <main+0x11d0>)
 8005122:	701a      	strb	r2, [r3, #0]
                Buzz(300);
 8005124:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005128:	f7fd fd0c 	bl	8002b44 <Buzz>
              }
            }
            if (tabata_Round < 1)
 800512c:	4ba6      	ldr	r3, [pc, #664]	@ (80053c8 <main+0x11d0>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d12d      	bne.n	8005190 <main+0xf98>
            {
              tabata_Mode = 1;
 8005134:	4ba1      	ldr	r3, [pc, #644]	@ (80053bc <main+0x11c4>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
              tabata_Round = tabata_Round_Def;
 800513a:	4ba4      	ldr	r3, [pc, #656]	@ (80053cc <main+0x11d4>)
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	4ba2      	ldr	r3, [pc, #648]	@ (80053c8 <main+0x11d0>)
 8005140:	701a      	strb	r2, [r3, #0]
              tabata_Act = tabata_Act_Def;
 8005142:	4ba3      	ldr	r3, [pc, #652]	@ (80053d0 <main+0x11d8>)
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	4ba3      	ldr	r3, [pc, #652]	@ (80053d4 <main+0x11dc>)
 8005148:	701a      	strb	r2, [r3, #0]
              tabata_Rest = tabata_Rest_Def;
 800514a:	4b9e      	ldr	r3, [pc, #632]	@ (80053c4 <main+0x11cc>)
 800514c:	781a      	ldrb	r2, [r3, #0]
 800514e:	4b9c      	ldr	r3, [pc, #624]	@ (80053c0 <main+0x11c8>)
 8005150:	701a      	strb	r2, [r3, #0]
              cross_Run = 0;
 8005152:	4ba1      	ldr	r3, [pc, #644]	@ (80053d8 <main+0x11e0>)
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
              cross_SrUpEn = 1;
 8005158:	4ba0      	ldr	r3, [pc, #640]	@ (80053dc <main+0x11e4>)
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
              if (mix_Runnig)
 800515e:	4ba0      	ldr	r3, [pc, #640]	@ (80053e0 <main+0x11e8>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <main+0xf7a>
              {
                mix_Runnig = 0;
 8005166:	4b9e      	ldr	r3, [pc, #632]	@ (80053e0 <main+0x11e8>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
                work_Mode = MIX;
 800516c:	4b9d      	ldr	r3, [pc, #628]	@ (80053e4 <main+0x11ec>)
 800516e:	2258      	movs	r2, #88	@ 0x58
 8005170:	701a      	strb	r2, [r3, #0]
              }
              Buzz(100);
 8005172:	2064      	movs	r0, #100	@ 0x64
 8005174:	f7fd fce6 	bl	8002b44 <Buzz>
              HAL_Delay(150);
 8005178:	2096      	movs	r0, #150	@ 0x96
 800517a:	f001 fcbb 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 800517e:	2064      	movs	r0, #100	@ 0x64
 8005180:	f7fd fce0 	bl	8002b44 <Buzz>
              HAL_Delay(150);
 8005184:	2096      	movs	r0, #150	@ 0x96
 8005186:	f001 fcb5 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 800518a:	2064      	movs	r0, #100	@ 0x64
 800518c:	f7fd fcda 	bl	8002b44 <Buzz>
            }
          }
        }
        irRemote = Ir_GetData();
 8005190:	f7fd fdc2 	bl	8002d18 <Ir_GetData>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	4b93      	ldr	r3, [pc, #588]	@ (80053e8 <main+0x11f0>)
 800519a:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 800519c:	4b92      	ldr	r3, [pc, #584]	@ (80053e8 <main+0x11f0>)
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f43f a88d 	beq.w	80042c0 <main+0xc8>
        {
          Haamin_Remote(irRemote, work_Mode);
 80051a6:	4b90      	ldr	r3, [pc, #576]	@ (80053e8 <main+0x11f0>)
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	4a8e      	ldr	r2, [pc, #568]	@ (80053e4 <main+0x11ec>)
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb ff7d 	bl	80010b0 <Haamin_Remote>
 80051b6:	f7ff b883 	b.w	80042c0 <main+0xc8>
        }
      }
      else if (cross_Mode == SETTING)
 80051ba:	4b8c      	ldr	r3, [pc, #560]	@ (80053ec <main+0x11f4>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b73      	cmp	r3, #115	@ 0x73
 80051c0:	f47f a87e 	bne.w	80042c0 <main+0xc8>
      {
        time_Out = 0;
 80051c4:	4b8a      	ldr	r3, [pc, #552]	@ (80053f0 <main+0x11f8>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(blinky_Point, LOW);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2110      	movs	r1, #16
 80051ce:	4889      	ldr	r0, [pc, #548]	@ (80053f4 <main+0x11fc>)
 80051d0:	f002 fb89 	bl	80078e6 <HAL_GPIO_WritePin>
        if (tabata_Mode == ROUND)
 80051d4:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <main+0x11c4>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b72      	cmp	r3, #114	@ 0x72
 80051da:	d14c      	bne.n	8005276 <main+0x107e>
        {
          Segment_Set(2, 'N');
 80051dc:	214e      	movs	r1, #78	@ 0x4e
 80051de:	2002      	movs	r0, #2
 80051e0:	f7fe fd96 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 80051e4:	214e      	movs	r1, #78	@ 0x4e
 80051e6:	2003      	movs	r0, #3
 80051e8:	f7fe fd92 	bl	8003d10 <Segment_Set>
          Segment_Set(4, 'N');
 80051ec:	214e      	movs	r1, #78	@ 0x4e
 80051ee:	2004      	movs	r0, #4
 80051f0:	f7fe fd8e 	bl	8003d10 <Segment_Set>
          Segment_Set(5, 'N');
 80051f4:	214e      	movs	r1, #78	@ 0x4e
 80051f6:	2005      	movs	r0, #5
 80051f8:	f7fe fd8a 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 80051fc:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <main+0x1200>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <main+0x1044>
          {
            Segment_Set(0, cross_Value / 10);
 8005204:	4b7d      	ldr	r3, [pc, #500]	@ (80053fc <main+0x1204>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4a7d      	ldr	r2, [pc, #500]	@ (8005400 <main+0x1208>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	08db      	lsrs	r3, r3, #3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	2000      	movs	r0, #0
 8005216:	f7fe fd7b 	bl	8003d10 <Segment_Set>
            Segment_Set(1, cross_Value % 10);
 800521a:	4b78      	ldr	r3, [pc, #480]	@ (80053fc <main+0x1204>)
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	4b78      	ldr	r3, [pc, #480]	@ (8005400 <main+0x1208>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	08d9      	lsrs	r1, r3, #3
 8005226:	460b      	mov	r3, r1
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	2001      	movs	r0, #1
 8005236:	f7fe fd6b 	bl	8003d10 <Segment_Set>
 800523a:	e007      	b.n	800524c <main+0x1054>
          }
          else
          {
            Segment_Set(0, 'N');
 800523c:	214e      	movs	r1, #78	@ 0x4e
 800523e:	2000      	movs	r0, #0
 8005240:	f7fe fd66 	bl	8003d10 <Segment_Set>
            Segment_Set(1, 'N');
 8005244:	214e      	movs	r1, #78	@ 0x4e
 8005246:	2001      	movs	r0, #1
 8005248:	f7fe fd62 	bl	8003d10 <Segment_Set>
          }

          irRemote = Ir_GetData();
 800524c:	f7fd fd64 	bl	8002d18 <Ir_GetData>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b64      	ldr	r3, [pc, #400]	@ (80053e8 <main+0x11f0>)
 8005256:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 8005258:	4b63      	ldr	r3, [pc, #396]	@ (80053e8 <main+0x11f0>)
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f43f a82f 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 8005262:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <main+0x11f0>)
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	4a5f      	ldr	r2, [pc, #380]	@ (80053e4 <main+0x11ec>)
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f7fb ff1f 	bl	80010b0 <Haamin_Remote>
 8005272:	f7ff b825 	b.w	80042c0 <main+0xc8>
          }
        }

        else if (tabata_Mode == ACT)
 8005276:	4b51      	ldr	r3, [pc, #324]	@ (80053bc <main+0x11c4>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b69      	cmp	r3, #105	@ 0x69
 800527c:	d14c      	bne.n	8005318 <main+0x1120>
        {
          Segment_Set(0, 'N');
 800527e:	214e      	movs	r1, #78	@ 0x4e
 8005280:	2000      	movs	r0, #0
 8005282:	f7fe fd45 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8005286:	214e      	movs	r1, #78	@ 0x4e
 8005288:	2001      	movs	r0, #1
 800528a:	f7fe fd41 	bl	8003d10 <Segment_Set>
          Segment_Set(4, 'N');
 800528e:	214e      	movs	r1, #78	@ 0x4e
 8005290:	2004      	movs	r0, #4
 8005292:	f7fe fd3d 	bl	8003d10 <Segment_Set>
          Segment_Set(5, 'N');
 8005296:	214e      	movs	r1, #78	@ 0x4e
 8005298:	2005      	movs	r0, #5
 800529a:	f7fe fd39 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 800529e:	4b56      	ldr	r3, [pc, #344]	@ (80053f8 <main+0x1200>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01b      	beq.n	80052de <main+0x10e6>
          {
            Segment_Set(2, cross_Value / 10);
 80052a6:	4b55      	ldr	r3, [pc, #340]	@ (80053fc <main+0x1204>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	4a55      	ldr	r2, [pc, #340]	@ (8005400 <main+0x1208>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	2002      	movs	r0, #2
 80052b8:	f7fe fd2a 	bl	8003d10 <Segment_Set>
            Segment_Set(3, cross_Value % 10);
 80052bc:	4b4f      	ldr	r3, [pc, #316]	@ (80053fc <main+0x1204>)
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <main+0x1208>)
 80052c2:	fba3 1302 	umull	r1, r3, r3, r2
 80052c6:	08d9      	lsrs	r1, r3, #3
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	2003      	movs	r0, #3
 80052d8:	f7fe fd1a 	bl	8003d10 <Segment_Set>
 80052dc:	e007      	b.n	80052ee <main+0x10f6>
          }
          else
          {
            Segment_Set(2, 'N');
 80052de:	214e      	movs	r1, #78	@ 0x4e
 80052e0:	2002      	movs	r0, #2
 80052e2:	f7fe fd15 	bl	8003d10 <Segment_Set>
            Segment_Set(3, 'N');
 80052e6:	214e      	movs	r1, #78	@ 0x4e
 80052e8:	2003      	movs	r0, #3
 80052ea:	f7fe fd11 	bl	8003d10 <Segment_Set>
          }

          irRemote = Ir_GetData();
 80052ee:	f7fd fd13 	bl	8002d18 <Ir_GetData>
 80052f2:	4603      	mov	r3, r0
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b3c      	ldr	r3, [pc, #240]	@ (80053e8 <main+0x11f0>)
 80052f8:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <main+0x11f0>)
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f43e afde 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 8005304:	4b38      	ldr	r3, [pc, #224]	@ (80053e8 <main+0x11f0>)
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	4a36      	ldr	r2, [pc, #216]	@ (80053e4 <main+0x11ec>)
 800530a:	7812      	ldrb	r2, [r2, #0]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb fece 	bl	80010b0 <Haamin_Remote>
 8005314:	f7fe bfd4 	b.w	80042c0 <main+0xc8>
          }
        }

        else if (tabata_Mode == REST)
 8005318:	4b28      	ldr	r3, [pc, #160]	@ (80053bc <main+0x11c4>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b45      	cmp	r3, #69	@ 0x45
 800531e:	f47e afcf 	bne.w	80042c0 <main+0xc8>
        {
          Segment_Set(0, 'N');
 8005322:	214e      	movs	r1, #78	@ 0x4e
 8005324:	2000      	movs	r0, #0
 8005326:	f7fe fcf3 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 800532a:	214e      	movs	r1, #78	@ 0x4e
 800532c:	2001      	movs	r0, #1
 800532e:	f7fe fcef 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 8005332:	214e      	movs	r1, #78	@ 0x4e
 8005334:	2002      	movs	r0, #2
 8005336:	f7fe fceb 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 800533a:	214e      	movs	r1, #78	@ 0x4e
 800533c:	2003      	movs	r0, #3
 800533e:	f7fe fce7 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 8005342:	4b2d      	ldr	r3, [pc, #180]	@ (80053f8 <main+0x1200>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01b      	beq.n	8005382 <main+0x118a>
          {
            Segment_Set(4, cross_Value / 10);
 800534a:	4b2c      	ldr	r3, [pc, #176]	@ (80053fc <main+0x1204>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	4a2c      	ldr	r2, [pc, #176]	@ (8005400 <main+0x1208>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	08db      	lsrs	r3, r3, #3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	2004      	movs	r0, #4
 800535c:	f7fe fcd8 	bl	8003d10 <Segment_Set>
            Segment_Set(5, cross_Value % 10);
 8005360:	4b26      	ldr	r3, [pc, #152]	@ (80053fc <main+0x1204>)
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <main+0x1208>)
 8005366:	fba3 1302 	umull	r1, r3, r3, r2
 800536a:	08d9      	lsrs	r1, r3, #3
 800536c:	460b      	mov	r3, r1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	2005      	movs	r0, #5
 800537c:	f7fe fcc8 	bl	8003d10 <Segment_Set>
 8005380:	e007      	b.n	8005392 <main+0x119a>
          }
          else
          {
            Segment_Set(4, 'N');
 8005382:	214e      	movs	r1, #78	@ 0x4e
 8005384:	2004      	movs	r0, #4
 8005386:	f7fe fcc3 	bl	8003d10 <Segment_Set>
            Segment_Set(5, 'N');
 800538a:	214e      	movs	r1, #78	@ 0x4e
 800538c:	2005      	movs	r0, #5
 800538e:	f7fe fcbf 	bl	8003d10 <Segment_Set>
          }

          irRemote = Ir_GetData();
 8005392:	f7fd fcc1 	bl	8002d18 <Ir_GetData>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <main+0x11f0>)
 800539c:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <main+0x11f0>)
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f43e af8c 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 80053a8:	4b0f      	ldr	r3, [pc, #60]	@ (80053e8 <main+0x11f0>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <main+0x11ec>)
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	4611      	mov	r1, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb fe7c 	bl	80010b0 <Haamin_Remote>
 80053b8:	f7fe bf82 	b.w	80042c0 <main+0xc8>
 80053bc:	200001bd 	.word	0x200001bd
 80053c0:	200001bc 	.word	0x200001bc
 80053c4:	20000009 	.word	0x20000009
 80053c8:	200001bb 	.word	0x200001bb
 80053cc:	20000008 	.word	0x20000008
 80053d0:	20000007 	.word	0x20000007
 80053d4:	200001ba 	.word	0x200001ba
 80053d8:	200001da 	.word	0x200001da
 80053dc:	200001db 	.word	0x200001db
 80053e0:	200001d6 	.word	0x200001d6
 80053e4:	20000001 	.word	0x20000001
 80053e8:	200001b4 	.word	0x200001b4
 80053ec:	200001d8 	.word	0x200001d8
 80053f0:	200001b0 	.word	0x200001b0
 80053f4:	40010800 	.word	0x40010800
 80053f8:	200001af 	.word	0x200001af
 80053fc:	200001dc 	.word	0x200001dc
 8005400:	cccccccd 	.word	0xcccccccd
          }
        }
      }
    }
    else if (work_Mode == EMOM)
 8005404:	4b22      	ldr	r3, [pc, #136]	@ (8005490 <main+0x1298>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b65      	cmp	r3, #101	@ 0x65
 800540a:	f040 826b 	bne.w	80058e4 <main+0x16ec>
    {
      Segment_Set(6, 'T');
 800540e:	2154      	movs	r1, #84	@ 0x54
 8005410:	2006      	movs	r0, #6
 8005412:	f7fe fc7d 	bl	8003d10 <Segment_Set>
      if (cross_Mode == MAIN_FUNCTION)
 8005416:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <main+0x129c>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b66      	cmp	r3, #102	@ 0x66
 800541c:	f040 81b2 	bne.w	8005784 <main+0x158c>
      {
        time_Out = 0;
 8005420:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <main+0x12a0>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
        if (cross_StartUp)
 8005426:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <main+0x12a4>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d03e      	beq.n	80054ac <main+0x12b4>
        {
          Segment_Set(0, 'N');
 800542e:	214e      	movs	r1, #78	@ 0x4e
 8005430:	2000      	movs	r0, #0
 8005432:	f7fe fc6d 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8005436:	214e      	movs	r1, #78	@ 0x4e
 8005438:	2001      	movs	r0, #1
 800543a:	f7fe fc69 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 800543e:	214e      	movs	r1, #78	@ 0x4e
 8005440:	2002      	movs	r0, #2
 8005442:	f7fe fc65 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8005446:	214e      	movs	r1, #78	@ 0x4e
 8005448:	2003      	movs	r0, #3
 800544a:	f7fe fc61 	bl	8003d10 <Segment_Set>
          Segment_Set(4, cross_TimeStarting / 10);
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <main+0x12a8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <main+0x12ac>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	2004      	movs	r0, #4
 8005460:	f7fe fc56 	bl	8003d10 <Segment_Set>
          Segment_Set(5, cross_TimeStarting % 10);
 8005464:	4b0e      	ldr	r3, [pc, #56]	@ (80054a0 <main+0x12a8>)
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	4b0e      	ldr	r3, [pc, #56]	@ (80054a4 <main+0x12ac>)
 800546a:	fba3 1302 	umull	r1, r3, r3, r2
 800546e:	08d9      	lsrs	r1, r3, #3
 8005470:	460b      	mov	r3, r1
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	2005      	movs	r0, #5
 8005480:	f7fe fc46 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8005484:	2200      	movs	r2, #0
 8005486:	2110      	movs	r1, #16
 8005488:	4807      	ldr	r0, [pc, #28]	@ (80054a8 <main+0x12b0>)
 800548a:	f002 fa2c 	bl	80078e6 <HAL_GPIO_WritePin>
 800548e:	e063      	b.n	8005558 <main+0x1360>
 8005490:	20000001 	.word	0x20000001
 8005494:	200001d8 	.word	0x200001d8
 8005498:	200001b0 	.word	0x200001b0
 800549c:	200001d9 	.word	0x200001d9
 80054a0:	200001d7 	.word	0x200001d7
 80054a4:	cccccccd 	.word	0xcccccccd
 80054a8:	40010800 	.word	0x40010800
        }
        else
        {
          Segment_Set(0, emom_Round / 10);
 80054ac:	4ba0      	ldr	r3, [pc, #640]	@ (8005730 <main+0x1538>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4aa0      	ldr	r2, [pc, #640]	@ (8005734 <main+0x153c>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	4619      	mov	r1, r3
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fe fc27 	bl	8003d10 <Segment_Set>
          Segment_Set(1, emom_Round % 10);
 80054c2:	4b9b      	ldr	r3, [pc, #620]	@ (8005730 <main+0x1538>)
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	4b9b      	ldr	r3, [pc, #620]	@ (8005734 <main+0x153c>)
 80054c8:	fba3 1302 	umull	r1, r3, r3, r2
 80054cc:	08d9      	lsrs	r1, r3, #3
 80054ce:	460b      	mov	r3, r1
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	4619      	mov	r1, r3
 80054dc:	2001      	movs	r0, #1
 80054de:	f7fe fc17 	bl	8003d10 <Segment_Set>
          Segment_Set(2, emom_Time / 10);
 80054e2:	4b95      	ldr	r3, [pc, #596]	@ (8005738 <main+0x1540>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4a93      	ldr	r2, [pc, #588]	@ (8005734 <main+0x153c>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	08db      	lsrs	r3, r3, #3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	2002      	movs	r0, #2
 80054f4:	f7fe fc0c 	bl	8003d10 <Segment_Set>
          Segment_Set(3, emom_Time % 10);
 80054f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005738 <main+0x1540>)
 80054fa:	781a      	ldrb	r2, [r3, #0]
 80054fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005734 <main+0x153c>)
 80054fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005502:	08d9      	lsrs	r1, r3, #3
 8005504:	460b      	mov	r3, r1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	2003      	movs	r0, #3
 8005514:	f7fe fbfc 	bl	8003d10 <Segment_Set>
          Segment_Set(4, emom_Act / 10);
 8005518:	4b88      	ldr	r3, [pc, #544]	@ (800573c <main+0x1544>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	4a85      	ldr	r2, [pc, #532]	@ (8005734 <main+0x153c>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	08db      	lsrs	r3, r3, #3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	4619      	mov	r1, r3
 8005528:	2004      	movs	r0, #4
 800552a:	f7fe fbf1 	bl	8003d10 <Segment_Set>
          Segment_Set(5, emom_Act % 10);
 800552e:	4b83      	ldr	r3, [pc, #524]	@ (800573c <main+0x1544>)
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	4b80      	ldr	r3, [pc, #512]	@ (8005734 <main+0x153c>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	08d9      	lsrs	r1, r3, #3
 800553a:	460b      	mov	r3, r1
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b2db      	uxtb	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	2005      	movs	r0, #5
 800554a:	f7fe fbe1 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 800554e:	2201      	movs	r2, #1
 8005550:	2110      	movs	r1, #16
 8005552:	487b      	ldr	r0, [pc, #492]	@ (8005740 <main+0x1548>)
 8005554:	f002 f9c7 	bl	80078e6 <HAL_GPIO_WritePin>
        }

        if (time_SecBit)
 8005558:	4b7a      	ldr	r3, [pc, #488]	@ (8005744 <main+0x154c>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80d2 	beq.w	8005706 <main+0x150e>
        {
          time_SecBit = 0;
 8005562:	4b78      	ldr	r3, [pc, #480]	@ (8005744 <main+0x154c>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
          if (cross_Run || mix_Flag)
 8005568:	4b77      	ldr	r3, [pc, #476]	@ (8005748 <main+0x1550>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <main+0x1382>
 8005570:	4b76      	ldr	r3, [pc, #472]	@ (800574c <main+0x1554>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80c6 	beq.w	8005706 <main+0x150e>
          {
            if (mix_Flag)
 800557a:	4b74      	ldr	r3, [pc, #464]	@ (800574c <main+0x1554>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00e      	beq.n	80055a0 <main+0x13a8>
            {
              mix_Flag = 0;
 8005582:	4b72      	ldr	r3, [pc, #456]	@ (800574c <main+0x1554>)
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
              mix_Runnig = 1;
 8005588:	4b71      	ldr	r3, [pc, #452]	@ (8005750 <main+0x1558>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
              cross_Run = 1;
 800558e:	4b6e      	ldr	r3, [pc, #440]	@ (8005748 <main+0x1550>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
              cross_SrUpEn = 1;
 8005594:	4b6f      	ldr	r3, [pc, #444]	@ (8005754 <main+0x155c>)
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting = 11;
 800559a:	4b6f      	ldr	r3, [pc, #444]	@ (8005758 <main+0x1560>)
 800559c:	220b      	movs	r2, #11
 800559e:	701a      	strb	r2, [r3, #0]
            }
            if (cross_SrUpEn)
 80055a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005754 <main+0x155c>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d031      	beq.n	800560c <main+0x1414>
            {
              cross_StartUp = 1;
 80055a8:	4b6c      	ldr	r3, [pc, #432]	@ (800575c <main+0x1564>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting--;
 80055ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005758 <main+0x1560>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	4b68      	ldr	r3, [pc, #416]	@ (8005758 <main+0x1560>)
 80055b8:	701a      	strb	r2, [r3, #0]
              if (cross_TimeStarting < 4)
 80055ba:	4b67      	ldr	r3, [pc, #412]	@ (8005758 <main+0x1560>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d802      	bhi.n	80055c8 <main+0x13d0>
                Buzz(100);
 80055c2:	2064      	movs	r0, #100	@ 0x64
 80055c4:	f7fd fabe 	bl	8002b44 <Buzz>
              if (cross_TimeStarting < 1)
 80055c8:	4b63      	ldr	r3, [pc, #396]	@ (8005758 <main+0x1560>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11d      	bne.n	800560c <main+0x1414>
              {
                cross_TimeStarting = 11;
 80055d0:	4b61      	ldr	r3, [pc, #388]	@ (8005758 <main+0x1560>)
 80055d2:	220b      	movs	r2, #11
 80055d4:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 80055d6:	4b61      	ldr	r3, [pc, #388]	@ (800575c <main+0x1564>)
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 0;
 80055dc:	4b5d      	ldr	r3, [pc, #372]	@ (8005754 <main+0x155c>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
                emom_Mode = ACT;
 80055e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005760 <main+0x1568>)
 80055e4:	2269      	movs	r2, #105	@ 0x69
 80055e6:	701a      	strb	r2, [r3, #0]
                emom_Time_tmp = emom_Time * 60;
 80055e8:	4b53      	ldr	r3, [pc, #332]	@ (8005738 <main+0x1540>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005764 <main+0x156c>)
 80055f8:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 80055fa:	2064      	movs	r0, #100	@ 0x64
 80055fc:	f7fd faa2 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 8005600:	2064      	movs	r0, #100	@ 0x64
 8005602:	f001 fa77 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8005606:	2064      	movs	r0, #100	@ 0x64
 8005608:	f7fd fa9c 	bl	8002b44 <Buzz>
              }
            }
            if (emom_Mode == ACT)
 800560c:	4b54      	ldr	r3, [pc, #336]	@ (8005760 <main+0x1568>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b69      	cmp	r3, #105	@ 0x69
 8005612:	d13a      	bne.n	800568a <main+0x1492>
            {
              emom_Time_tmp--;
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <main+0x156c>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	b2da      	uxtb	r2, r3
 800561c:	4b51      	ldr	r3, [pc, #324]	@ (8005764 <main+0x156c>)
 800561e:	701a      	strb	r2, [r3, #0]
              emom_Act--;
 8005620:	4b46      	ldr	r3, [pc, #280]	@ (800573c <main+0x1544>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	3b01      	subs	r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	4b44      	ldr	r3, [pc, #272]	@ (800573c <main+0x1544>)
 800562a:	701a      	strb	r2, [r3, #0]
              if (emom_Time_tmp % 60 == 0)
 800562c:	4b4d      	ldr	r3, [pc, #308]	@ (8005764 <main+0x156c>)
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	4b4d      	ldr	r3, [pc, #308]	@ (8005768 <main+0x1570>)
 8005632:	fba3 1302 	umull	r1, r3, r3, r2
 8005636:	0959      	lsrs	r1, r3, #5
 8005638:	460b      	mov	r3, r1
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	1a5b      	subs	r3, r3, r1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <main+0x145c>
                emom_Time--;
 8005648:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <main+0x1540>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	3b01      	subs	r3, #1
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b39      	ldr	r3, [pc, #228]	@ (8005738 <main+0x1540>)
 8005652:	701a      	strb	r2, [r3, #0]
              if (emom_Act < 4)
 8005654:	4b39      	ldr	r3, [pc, #228]	@ (800573c <main+0x1544>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d802      	bhi.n	8005662 <main+0x146a>
                Buzz(100);
 800565c:	2064      	movs	r0, #100	@ 0x64
 800565e:	f7fd fa71 	bl	8002b44 <Buzz>
              if (emom_Act < 1)
 8005662:	4b36      	ldr	r3, [pc, #216]	@ (800573c <main+0x1544>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <main+0x1492>
              {
                tabata_Mode = REST;
 800566a:	4b40      	ldr	r3, [pc, #256]	@ (800576c <main+0x1574>)
 800566c:	2245      	movs	r2, #69	@ 0x45
 800566e:	701a      	strb	r2, [r3, #0]
                emom_Act = emom_Act_Def;
 8005670:	4b3f      	ldr	r3, [pc, #252]	@ (8005770 <main+0x1578>)
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	4b31      	ldr	r3, [pc, #196]	@ (800573c <main+0x1544>)
 8005676:	701a      	strb	r2, [r3, #0]
                emom_Round--;
 8005678:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <main+0x1538>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3b01      	subs	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b2b      	ldr	r3, [pc, #172]	@ (8005730 <main+0x1538>)
 8005682:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 8005684:	2064      	movs	r0, #100	@ 0x64
 8005686:	f7fd fa5d 	bl	8002b44 <Buzz>
              }
            }

            if (emom_Round < 1)
 800568a:	4b29      	ldr	r3, [pc, #164]	@ (8005730 <main+0x1538>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d139      	bne.n	8005706 <main+0x150e>
            {
              emom_Mode = 1;
 8005692:	4b33      	ldr	r3, [pc, #204]	@ (8005760 <main+0x1568>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
              emom_Round = emom_Round_Def;
 8005698:	4b36      	ldr	r3, [pc, #216]	@ (8005774 <main+0x157c>)
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	4b24      	ldr	r3, [pc, #144]	@ (8005730 <main+0x1538>)
 800569e:	701a      	strb	r2, [r3, #0]
              emom_Act = emom_Act_Def;
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <main+0x1578>)
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	4b25      	ldr	r3, [pc, #148]	@ (800573c <main+0x1544>)
 80056a6:	701a      	strb	r2, [r3, #0]
              emom_Time = emom_Time_Def;
 80056a8:	4b33      	ldr	r3, [pc, #204]	@ (8005778 <main+0x1580>)
 80056aa:	781a      	ldrb	r2, [r3, #0]
 80056ac:	4b22      	ldr	r3, [pc, #136]	@ (8005738 <main+0x1540>)
 80056ae:	701a      	strb	r2, [r3, #0]
              emom_Time_tmp = (emom_Time * 60);
 80056b0:	4b21      	ldr	r3, [pc, #132]	@ (8005738 <main+0x1540>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	4b29      	ldr	r3, [pc, #164]	@ (8005764 <main+0x156c>)
 80056c0:	701a      	strb	r2, [r3, #0]
              cross_Run = 0;
 80056c2:	4b21      	ldr	r3, [pc, #132]	@ (8005748 <main+0x1550>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
              cross_SrUpEn = 1;
 80056c8:	4b22      	ldr	r3, [pc, #136]	@ (8005754 <main+0x155c>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting = 11;
 80056ce:	4b22      	ldr	r3, [pc, #136]	@ (8005758 <main+0x1560>)
 80056d0:	220b      	movs	r2, #11
 80056d2:	701a      	strb	r2, [r3, #0]
              if (mix_Runnig)
 80056d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <main+0x1558>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <main+0x14f0>
              {
                mix_Runnig = 0;
 80056dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005750 <main+0x1558>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
                work_Mode = MIX;
 80056e2:	4b26      	ldr	r3, [pc, #152]	@ (800577c <main+0x1584>)
 80056e4:	2258      	movs	r2, #88	@ 0x58
 80056e6:	701a      	strb	r2, [r3, #0]
              }
              Buzz(100);
 80056e8:	2064      	movs	r0, #100	@ 0x64
 80056ea:	f7fd fa2b 	bl	8002b44 <Buzz>
              HAL_Delay(150);
 80056ee:	2096      	movs	r0, #150	@ 0x96
 80056f0:	f001 fa00 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 80056f4:	2064      	movs	r0, #100	@ 0x64
 80056f6:	f7fd fa25 	bl	8002b44 <Buzz>
              HAL_Delay(150);
 80056fa:	2096      	movs	r0, #150	@ 0x96
 80056fc:	f001 f9fa 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 8005700:	2064      	movs	r0, #100	@ 0x64
 8005702:	f7fd fa1f 	bl	8002b44 <Buzz>
            }
          }
        }

        irRemote = Ir_GetData();
 8005706:	f7fd fb07 	bl	8002d18 <Ir_GetData>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <main+0x1588>)
 8005710:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8005712:	4b1b      	ldr	r3, [pc, #108]	@ (8005780 <main+0x1588>)
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f43e add2 	beq.w	80042c0 <main+0xc8>
        {
          Haamin_Remote(irRemote, work_Mode);
 800571c:	4b18      	ldr	r3, [pc, #96]	@ (8005780 <main+0x1588>)
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	4a16      	ldr	r2, [pc, #88]	@ (800577c <main+0x1584>)
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f7fb fcc2 	bl	80010b0 <Haamin_Remote>
 800572c:	f7fe bdc8 	b.w	80042c0 <main+0xc8>
 8005730:	200001bf 	.word	0x200001bf
 8005734:	cccccccd 	.word	0xcccccccd
 8005738:	200001c0 	.word	0x200001c0
 800573c:	200001be 	.word	0x200001be
 8005740:	40010800 	.word	0x40010800
 8005744:	200001af 	.word	0x200001af
 8005748:	200001da 	.word	0x200001da
 800574c:	200001d5 	.word	0x200001d5
 8005750:	200001d6 	.word	0x200001d6
 8005754:	200001db 	.word	0x200001db
 8005758:	200001d7 	.word	0x200001d7
 800575c:	200001d9 	.word	0x200001d9
 8005760:	200001c3 	.word	0x200001c3
 8005764:	200001c2 	.word	0x200001c2
 8005768:	88888889 	.word	0x88888889
 800576c:	200001bd 	.word	0x200001bd
 8005770:	200001c1 	.word	0x200001c1
 8005774:	2000000a 	.word	0x2000000a
 8005778:	2000000b 	.word	0x2000000b
 800577c:	20000001 	.word	0x20000001
 8005780:	200001b4 	.word	0x200001b4
        }
      }
      else if (cross_Mode == SETTING)
 8005784:	4b7a      	ldr	r3, [pc, #488]	@ (8005970 <main+0x1778>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b73      	cmp	r3, #115	@ 0x73
 800578a:	f47e ad99 	bne.w	80042c0 <main+0xc8>
      {
        time_Out = 0;
 800578e:	4b79      	ldr	r3, [pc, #484]	@ (8005974 <main+0x177c>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(blinky_Point, LOW);
 8005794:	2200      	movs	r2, #0
 8005796:	2110      	movs	r1, #16
 8005798:	4877      	ldr	r0, [pc, #476]	@ (8005978 <main+0x1780>)
 800579a:	f002 f8a4 	bl	80078e6 <HAL_GPIO_WritePin>
        if (emom_Mode == ROUND)
 800579e:	4b77      	ldr	r3, [pc, #476]	@ (800597c <main+0x1784>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b72      	cmp	r3, #114	@ 0x72
 80057a4:	d14c      	bne.n	8005840 <main+0x1648>
        {
          Segment_Set(2, 'N');
 80057a6:	214e      	movs	r1, #78	@ 0x4e
 80057a8:	2002      	movs	r0, #2
 80057aa:	f7fe fab1 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 80057ae:	214e      	movs	r1, #78	@ 0x4e
 80057b0:	2003      	movs	r0, #3
 80057b2:	f7fe faad 	bl	8003d10 <Segment_Set>
          Segment_Set(4, 'N');
 80057b6:	214e      	movs	r1, #78	@ 0x4e
 80057b8:	2004      	movs	r0, #4
 80057ba:	f7fe faa9 	bl	8003d10 <Segment_Set>
          Segment_Set(5, 'N');
 80057be:	214e      	movs	r1, #78	@ 0x4e
 80057c0:	2005      	movs	r0, #5
 80057c2:	f7fe faa5 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 80057c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005980 <main+0x1788>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01b      	beq.n	8005806 <main+0x160e>
          {
            Segment_Set(0, cross_Value / 10);
 80057ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005984 <main+0x178c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	4a6d      	ldr	r2, [pc, #436]	@ (8005988 <main+0x1790>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	08db      	lsrs	r3, r3, #3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4619      	mov	r1, r3
 80057de:	2000      	movs	r0, #0
 80057e0:	f7fe fa96 	bl	8003d10 <Segment_Set>
            Segment_Set(1, cross_Value % 10);
 80057e4:	4b67      	ldr	r3, [pc, #412]	@ (8005984 <main+0x178c>)
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	4b67      	ldr	r3, [pc, #412]	@ (8005988 <main+0x1790>)
 80057ea:	fba3 1302 	umull	r1, r3, r3, r2
 80057ee:	08d9      	lsrs	r1, r3, #3
 80057f0:	460b      	mov	r3, r1
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	2001      	movs	r0, #1
 8005800:	f7fe fa86 	bl	8003d10 <Segment_Set>
 8005804:	e007      	b.n	8005816 <main+0x161e>
          }
          else
          {
            Segment_Set(0, 'N');
 8005806:	214e      	movs	r1, #78	@ 0x4e
 8005808:	2000      	movs	r0, #0
 800580a:	f7fe fa81 	bl	8003d10 <Segment_Set>
            Segment_Set(1, 'N');
 800580e:	214e      	movs	r1, #78	@ 0x4e
 8005810:	2001      	movs	r0, #1
 8005812:	f7fe fa7d 	bl	8003d10 <Segment_Set>
          }

          irRemote = Ir_GetData();
 8005816:	f7fd fa7f 	bl	8002d18 <Ir_GetData>
 800581a:	4603      	mov	r3, r0
 800581c:	461a      	mov	r2, r3
 800581e:	4b5b      	ldr	r3, [pc, #364]	@ (800598c <main+0x1794>)
 8005820:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 8005822:	4b5a      	ldr	r3, [pc, #360]	@ (800598c <main+0x1794>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f43e ad4a 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 800582c:	4b57      	ldr	r3, [pc, #348]	@ (800598c <main+0x1794>)
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	4a57      	ldr	r2, [pc, #348]	@ (8005990 <main+0x1798>)
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f7fb fc3a 	bl	80010b0 <Haamin_Remote>
 800583c:	f7fe bd40 	b.w	80042c0 <main+0xc8>
          }
        }

        else if (emom_Mode == ACT)
 8005840:	4b4e      	ldr	r3, [pc, #312]	@ (800597c <main+0x1784>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b69      	cmp	r3, #105	@ 0x69
 8005846:	f47e ad3b 	bne.w	80042c0 <main+0xc8>
        {
          Segment_Set(0, 'N');
 800584a:	214e      	movs	r1, #78	@ 0x4e
 800584c:	2000      	movs	r0, #0
 800584e:	f7fe fa5f 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8005852:	214e      	movs	r1, #78	@ 0x4e
 8005854:	2001      	movs	r0, #1
 8005856:	f7fe fa5b 	bl	8003d10 <Segment_Set>
          Segment_Set(4, 'N');
 800585a:	214e      	movs	r1, #78	@ 0x4e
 800585c:	2004      	movs	r0, #4
 800585e:	f7fe fa57 	bl	8003d10 <Segment_Set>
          Segment_Set(5, 'N');
 8005862:	214e      	movs	r1, #78	@ 0x4e
 8005864:	2005      	movs	r0, #5
 8005866:	f7fe fa53 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 800586a:	4b45      	ldr	r3, [pc, #276]	@ (8005980 <main+0x1788>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01b      	beq.n	80058aa <main+0x16b2>
          {
            Segment_Set(2, cross_Value / 10);
 8005872:	4b44      	ldr	r3, [pc, #272]	@ (8005984 <main+0x178c>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	4a44      	ldr	r2, [pc, #272]	@ (8005988 <main+0x1790>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	08db      	lsrs	r3, r3, #3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	4619      	mov	r1, r3
 8005882:	2002      	movs	r0, #2
 8005884:	f7fe fa44 	bl	8003d10 <Segment_Set>
            Segment_Set(3, cross_Value % 10);
 8005888:	4b3e      	ldr	r3, [pc, #248]	@ (8005984 <main+0x178c>)
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	4b3e      	ldr	r3, [pc, #248]	@ (8005988 <main+0x1790>)
 800588e:	fba3 1302 	umull	r1, r3, r3, r2
 8005892:	08d9      	lsrs	r1, r3, #3
 8005894:	460b      	mov	r3, r1
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	4619      	mov	r1, r3
 80058a2:	2003      	movs	r0, #3
 80058a4:	f7fe fa34 	bl	8003d10 <Segment_Set>
 80058a8:	e007      	b.n	80058ba <main+0x16c2>
          }
          else
          {
            Segment_Set(2, 'N');
 80058aa:	214e      	movs	r1, #78	@ 0x4e
 80058ac:	2002      	movs	r0, #2
 80058ae:	f7fe fa2f 	bl	8003d10 <Segment_Set>
            Segment_Set(3, 'N');
 80058b2:	214e      	movs	r1, #78	@ 0x4e
 80058b4:	2003      	movs	r0, #3
 80058b6:	f7fe fa2b 	bl	8003d10 <Segment_Set>
          }

          irRemote = Ir_GetData();
 80058ba:	f7fd fa2d 	bl	8002d18 <Ir_GetData>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	4b32      	ldr	r3, [pc, #200]	@ (800598c <main+0x1794>)
 80058c4:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 80058c6:	4b31      	ldr	r3, [pc, #196]	@ (800598c <main+0x1794>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f43e acf8 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 80058d0:	4b2e      	ldr	r3, [pc, #184]	@ (800598c <main+0x1794>)
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005990 <main+0x1798>)
 80058d6:	7812      	ldrb	r2, [r2, #0]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fb fbe8 	bl	80010b0 <Haamin_Remote>
 80058e0:	f7fe bcee 	b.w	80042c0 <main+0xc8>
          }
        }
      }
    }
    else if (work_Mode == AMRAP)
 80058e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005990 <main+0x1798>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b61      	cmp	r3, #97	@ 0x61
 80058ea:	f040 8235 	bne.w	8005d58 <main+0x1b60>
    {
      Segment_Set(6, 'W');
 80058ee:	2157      	movs	r1, #87	@ 0x57
 80058f0:	2006      	movs	r0, #6
 80058f2:	f7fe fa0d 	bl	8003d10 <Segment_Set>
      if (cross_Mode == MAIN_FUNCTION)
 80058f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005970 <main+0x1778>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b66      	cmp	r3, #102	@ 0x66
 80058fc:	f040 8151 	bne.w	8005ba2 <main+0x19aa>
      {
        time_Out = 0;
 8005900:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <main+0x177c>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
        if (cross_StartUp)
 8005906:	4b23      	ldr	r3, [pc, #140]	@ (8005994 <main+0x179c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d046      	beq.n	800599c <main+0x17a4>
        {
          Segment_Set(0, 'N');
 800590e:	214e      	movs	r1, #78	@ 0x4e
 8005910:	2000      	movs	r0, #0
 8005912:	f7fe f9fd 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'N');
 8005916:	214e      	movs	r1, #78	@ 0x4e
 8005918:	2001      	movs	r0, #1
 800591a:	f7fe f9f9 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 800591e:	214e      	movs	r1, #78	@ 0x4e
 8005920:	2002      	movs	r0, #2
 8005922:	f7fe f9f5 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8005926:	214e      	movs	r1, #78	@ 0x4e
 8005928:	2003      	movs	r0, #3
 800592a:	f7fe f9f1 	bl	8003d10 <Segment_Set>
          Segment_Set(4, cross_TimeStarting / 10);
 800592e:	4b1a      	ldr	r3, [pc, #104]	@ (8005998 <main+0x17a0>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <main+0x1790>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	4619      	mov	r1, r3
 800593e:	2004      	movs	r0, #4
 8005940:	f7fe f9e6 	bl	8003d10 <Segment_Set>
          Segment_Set(5, cross_TimeStarting % 10);
 8005944:	4b14      	ldr	r3, [pc, #80]	@ (8005998 <main+0x17a0>)
 8005946:	781a      	ldrb	r2, [r3, #0]
 8005948:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <main+0x1790>)
 800594a:	fba3 1302 	umull	r1, r3, r3, r2
 800594e:	08d9      	lsrs	r1, r3, #3
 8005950:	460b      	mov	r3, r1
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	2005      	movs	r0, #5
 8005960:	f7fe f9d6 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8005964:	2200      	movs	r2, #0
 8005966:	2110      	movs	r1, #16
 8005968:	4803      	ldr	r0, [pc, #12]	@ (8005978 <main+0x1780>)
 800596a:	f001 ffbc 	bl	80078e6 <HAL_GPIO_WritePin>
 800596e:	e060      	b.n	8005a32 <main+0x183a>
 8005970:	200001d8 	.word	0x200001d8
 8005974:	200001b0 	.word	0x200001b0
 8005978:	40010800 	.word	0x40010800
 800597c:	200001c3 	.word	0x200001c3
 8005980:	200001af 	.word	0x200001af
 8005984:	200001dc 	.word	0x200001dc
 8005988:	cccccccd 	.word	0xcccccccd
 800598c:	200001b4 	.word	0x200001b4
 8005990:	20000001 	.word	0x20000001
 8005994:	200001d9 	.word	0x200001d9
 8005998:	200001d7 	.word	0x200001d7
        }
        else
        {
          Segment_Set(0, 'A');
 800599c:	2141      	movs	r1, #65	@ 0x41
 800599e:	2000      	movs	r0, #0
 80059a0:	f7fe f9b6 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'r');
 80059a4:	2172      	movs	r1, #114	@ 0x72
 80059a6:	2001      	movs	r0, #1
 80059a8:	f7fe f9b2 	bl	8003d10 <Segment_Set>
          Segment_Set(2, amrap_Minute / 10);
 80059ac:	4bac      	ldr	r3, [pc, #688]	@ (8005c60 <main+0x1a68>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4aac      	ldr	r2, [pc, #688]	@ (8005c64 <main+0x1a6c>)
 80059b2:	fb82 1203 	smull	r1, r2, r2, r3
 80059b6:	1092      	asrs	r2, r2, #2
 80059b8:	17db      	asrs	r3, r3, #31
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	4619      	mov	r1, r3
 80059c0:	2002      	movs	r0, #2
 80059c2:	f7fe f9a5 	bl	8003d10 <Segment_Set>
          Segment_Set(3, amrap_Minute % 10);
 80059c6:	4ba6      	ldr	r3, [pc, #664]	@ (8005c60 <main+0x1a68>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4ba6      	ldr	r3, [pc, #664]	@ (8005c64 <main+0x1a6c>)
 80059cc:	fb83 1302 	smull	r1, r3, r3, r2
 80059d0:	1099      	asrs	r1, r3, #2
 80059d2:	17d3      	asrs	r3, r2, #31
 80059d4:	1ac9      	subs	r1, r1, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	1ad1      	subs	r1, r2, r3
 80059e0:	b2cb      	uxtb	r3, r1
 80059e2:	4619      	mov	r1, r3
 80059e4:	2003      	movs	r0, #3
 80059e6:	f7fe f993 	bl	8003d10 <Segment_Set>
          Segment_Set(4, amrap_Second / 10);
 80059ea:	4b9f      	ldr	r3, [pc, #636]	@ (8005c68 <main+0x1a70>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a9d      	ldr	r2, [pc, #628]	@ (8005c64 <main+0x1a6c>)
 80059f0:	fb82 1203 	smull	r1, r2, r2, r3
 80059f4:	1092      	asrs	r2, r2, #2
 80059f6:	17db      	asrs	r3, r3, #31
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	2004      	movs	r0, #4
 8005a00:	f7fe f986 	bl	8003d10 <Segment_Set>
          Segment_Set(5, amrap_Second % 10);
 8005a04:	4b98      	ldr	r3, [pc, #608]	@ (8005c68 <main+0x1a70>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b96      	ldr	r3, [pc, #600]	@ (8005c64 <main+0x1a6c>)
 8005a0a:	fb83 1302 	smull	r1, r3, r3, r2
 8005a0e:	1099      	asrs	r1, r3, #2
 8005a10:	17d3      	asrs	r3, r2, #31
 8005a12:	1ac9      	subs	r1, r1, r3
 8005a14:	460b      	mov	r3, r1
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	1ad1      	subs	r1, r2, r3
 8005a1e:	b2cb      	uxtb	r3, r1
 8005a20:	4619      	mov	r1, r3
 8005a22:	2005      	movs	r0, #5
 8005a24:	f7fe f974 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 8005a28:	2201      	movs	r2, #1
 8005a2a:	2110      	movs	r1, #16
 8005a2c:	488f      	ldr	r0, [pc, #572]	@ (8005c6c <main+0x1a74>)
 8005a2e:	f001 ff5a 	bl	80078e6 <HAL_GPIO_WritePin>
        }
        if (time_SecBit)
 8005a32:	4b8f      	ldr	r3, [pc, #572]	@ (8005c70 <main+0x1a78>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 809e 	beq.w	8005b78 <main+0x1980>
        {
          time_SecBit = 0;
 8005a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005c70 <main+0x1a78>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
          if (cross_Run || mix_Flag)
 8005a42:	4b8c      	ldr	r3, [pc, #560]	@ (8005c74 <main+0x1a7c>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <main+0x185c>
 8005a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8005c78 <main+0x1a80>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 8092 	beq.w	8005b78 <main+0x1980>
          {
            if (mix_Flag)
 8005a54:	4b88      	ldr	r3, [pc, #544]	@ (8005c78 <main+0x1a80>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d018      	beq.n	8005a8e <main+0x1896>
            {
              mix_Flag = 0;
 8005a5c:	4b86      	ldr	r3, [pc, #536]	@ (8005c78 <main+0x1a80>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
              mix_Runnig = 1;
 8005a62:	4b86      	ldr	r3, [pc, #536]	@ (8005c7c <main+0x1a84>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
              cross_Run = 1;
 8005a68:	4b82      	ldr	r3, [pc, #520]	@ (8005c74 <main+0x1a7c>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
              cross_SrUpEn = 1;
 8005a6e:	4b84      	ldr	r3, [pc, #528]	@ (8005c80 <main+0x1a88>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting = 11;
 8005a74:	4b83      	ldr	r3, [pc, #524]	@ (8005c84 <main+0x1a8c>)
 8005a76:	220b      	movs	r2, #11
 8005a78:	701a      	strb	r2, [r3, #0]
              amrap_Minute = amrap_Minute_Def;
 8005a7a:	4b83      	ldr	r3, [pc, #524]	@ (8005c88 <main+0x1a90>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b77      	ldr	r3, [pc, #476]	@ (8005c60 <main+0x1a68>)
 8005a82:	601a      	str	r2, [r3, #0]
              amrap_Second = amrap_Second_Def;
 8005a84:	4b81      	ldr	r3, [pc, #516]	@ (8005c8c <main+0x1a94>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b77      	ldr	r3, [pc, #476]	@ (8005c68 <main+0x1a70>)
 8005a8c:	601a      	str	r2, [r3, #0]
            }
            if (cross_SrUpEn)
 8005a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c80 <main+0x1a88>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d028      	beq.n	8005ae8 <main+0x18f0>
            {
              cross_StartUp = 1;
 8005a96:	4b7e      	ldr	r3, [pc, #504]	@ (8005c90 <main+0x1a98>)
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
              cross_TimeStarting--;
 8005a9c:	4b79      	ldr	r3, [pc, #484]	@ (8005c84 <main+0x1a8c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b77      	ldr	r3, [pc, #476]	@ (8005c84 <main+0x1a8c>)
 8005aa6:	701a      	strb	r2, [r3, #0]
              if (cross_TimeStarting < 4)
 8005aa8:	4b76      	ldr	r3, [pc, #472]	@ (8005c84 <main+0x1a8c>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d802      	bhi.n	8005ab6 <main+0x18be>
                Buzz(100);
 8005ab0:	2064      	movs	r0, #100	@ 0x64
 8005ab2:	f7fd f847 	bl	8002b44 <Buzz>
              if (cross_TimeStarting < 1)
 8005ab6:	4b73      	ldr	r3, [pc, #460]	@ (8005c84 <main+0x1a8c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d114      	bne.n	8005ae8 <main+0x18f0>
              {
                cross_TimeStarting = 11;
 8005abe:	4b71      	ldr	r3, [pc, #452]	@ (8005c84 <main+0x1a8c>)
 8005ac0:	220b      	movs	r2, #11
 8005ac2:	701a      	strb	r2, [r3, #0]
                cross_StartUp = 0;
 8005ac4:	4b72      	ldr	r3, [pc, #456]	@ (8005c90 <main+0x1a98>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
                cross_SrUpEn = 0;
 8005aca:	4b6d      	ldr	r3, [pc, #436]	@ (8005c80 <main+0x1a88>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
                amrap_Act = 1;
 8005ad0:	4b70      	ldr	r3, [pc, #448]	@ (8005c94 <main+0x1a9c>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]
                Buzz(100);
 8005ad6:	2064      	movs	r0, #100	@ 0x64
 8005ad8:	f7fd f834 	bl	8002b44 <Buzz>
                HAL_Delay(100);
 8005adc:	2064      	movs	r0, #100	@ 0x64
 8005ade:	f001 f809 	bl	8006af4 <HAL_Delay>
                Buzz(100);
 8005ae2:	2064      	movs	r0, #100	@ 0x64
 8005ae4:	f7fd f82e 	bl	8002b44 <Buzz>
              }
            }
            if (amrap_Act)
 8005ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c94 <main+0x1a9c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d043      	beq.n	8005b78 <main+0x1980>
            {
              amrap_Second--;
 8005af0:	4b5d      	ldr	r3, [pc, #372]	@ (8005c68 <main+0x1a70>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	4a5c      	ldr	r2, [pc, #368]	@ (8005c68 <main+0x1a70>)
 8005af8:	6013      	str	r3, [r2, #0]
              if (amrap_Second == 0)
 8005afa:	4b5b      	ldr	r3, [pc, #364]	@ (8005c68 <main+0x1a70>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d13a      	bne.n	8005b78 <main+0x1980>
              {
                amrap_Second = 59;
 8005b02:	4b59      	ldr	r3, [pc, #356]	@ (8005c68 <main+0x1a70>)
 8005b04:	223b      	movs	r2, #59	@ 0x3b
 8005b06:	601a      	str	r2, [r3, #0]
                amrap_Minute--;
 8005b08:	4b55      	ldr	r3, [pc, #340]	@ (8005c60 <main+0x1a68>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	4a54      	ldr	r2, [pc, #336]	@ (8005c60 <main+0x1a68>)
 8005b10:	6013      	str	r3, [r2, #0]
                if (amrap_Minute < 0)
 8005b12:	4b53      	ldr	r3, [pc, #332]	@ (8005c60 <main+0x1a68>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da2e      	bge.n	8005b78 <main+0x1980>
                {
                  amrap_Minute = amrap_Minute_Def;
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c88 <main+0x1a90>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b4f      	ldr	r3, [pc, #316]	@ (8005c60 <main+0x1a68>)
 8005b22:	601a      	str	r2, [r3, #0]
                  amrap_Second = amrap_Second_Def;
 8005b24:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <main+0x1a94>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c68 <main+0x1a70>)
 8005b2c:	601a      	str	r2, [r3, #0]
                  cross_Run = 0;
 8005b2e:	4b51      	ldr	r3, [pc, #324]	@ (8005c74 <main+0x1a7c>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
                  cross_SrUpEn = 1;
 8005b34:	4b52      	ldr	r3, [pc, #328]	@ (8005c80 <main+0x1a88>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
                  cross_TimeStarting = 11;
 8005b3a:	4b52      	ldr	r3, [pc, #328]	@ (8005c84 <main+0x1a8c>)
 8005b3c:	220b      	movs	r2, #11
 8005b3e:	701a      	strb	r2, [r3, #0]
                  amrap_Act = 0;
 8005b40:	4b54      	ldr	r3, [pc, #336]	@ (8005c94 <main+0x1a9c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
                  if (mix_Runnig)
 8005b46:	4b4d      	ldr	r3, [pc, #308]	@ (8005c7c <main+0x1a84>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <main+0x1962>
                  {
                    mix_Runnig = 0;
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c7c <main+0x1a84>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
                    work_Mode = MIX;
 8005b54:	4b50      	ldr	r3, [pc, #320]	@ (8005c98 <main+0x1aa0>)
 8005b56:	2258      	movs	r2, #88	@ 0x58
 8005b58:	701a      	strb	r2, [r3, #0]
                  }
                  Buzz(100);
 8005b5a:	2064      	movs	r0, #100	@ 0x64
 8005b5c:	f7fc fff2 	bl	8002b44 <Buzz>
                  HAL_Delay(150);
 8005b60:	2096      	movs	r0, #150	@ 0x96
 8005b62:	f000 ffc7 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8005b66:	2064      	movs	r0, #100	@ 0x64
 8005b68:	f7fc ffec 	bl	8002b44 <Buzz>
                  HAL_Delay(150);
 8005b6c:	2096      	movs	r0, #150	@ 0x96
 8005b6e:	f000 ffc1 	bl	8006af4 <HAL_Delay>
                  Buzz(100);
 8005b72:	2064      	movs	r0, #100	@ 0x64
 8005b74:	f7fc ffe6 	bl	8002b44 <Buzz>
              }
            }
          }
        }

        irRemote = Ir_GetData();
 8005b78:	f7fd f8ce 	bl	8002d18 <Ir_GetData>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b46      	ldr	r3, [pc, #280]	@ (8005c9c <main+0x1aa4>)
 8005b82:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8005b84:	4b45      	ldr	r3, [pc, #276]	@ (8005c9c <main+0x1aa4>)
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f43e ab99 	beq.w	80042c0 <main+0xc8>
        {
          Haamin_Remote(irRemote, work_Mode);
 8005b8e:	4b43      	ldr	r3, [pc, #268]	@ (8005c9c <main+0x1aa4>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	4a41      	ldr	r2, [pc, #260]	@ (8005c98 <main+0x1aa0>)
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fb fa89 	bl	80010b0 <Haamin_Remote>
 8005b9e:	f7fe bb8f 	b.w	80042c0 <main+0xc8>
        }
      }
      else if (cross_Mode == SETTING)
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ca0 <main+0x1aa8>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b73      	cmp	r3, #115	@ 0x73
 8005ba8:	f47e ab8a 	bne.w	80042c0 <main+0xc8>
      {
        time_Out = 0;
 8005bac:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca4 <main+0x1aac>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(blinky_Point, LOW);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2110      	movs	r1, #16
 8005bb6:	482d      	ldr	r0, [pc, #180]	@ (8005c6c <main+0x1a74>)
 8005bb8:	f001 fe95 	bl	80078e6 <HAL_GPIO_WritePin>
        if (amrap_Mode == SET_MIN)
 8005bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8005ca8 <main+0x1ab0>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b4d      	cmp	r3, #77	@ 0x4d
 8005bc2:	d177      	bne.n	8005cb4 <main+0x1abc>
        {
          Segment_Set(0, 'A');
 8005bc4:	2141      	movs	r1, #65	@ 0x41
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fe f8a2 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'r');
 8005bcc:	2172      	movs	r1, #114	@ 0x72
 8005bce:	2001      	movs	r0, #1
 8005bd0:	f7fe f89e 	bl	8003d10 <Segment_Set>
          Segment_Set(4, 'N');
 8005bd4:	214e      	movs	r1, #78	@ 0x4e
 8005bd6:	2004      	movs	r0, #4
 8005bd8:	f7fe f89a 	bl	8003d10 <Segment_Set>
          Segment_Set(5, 'N');
 8005bdc:	214e      	movs	r1, #78	@ 0x4e
 8005bde:	2005      	movs	r0, #5
 8005be0:	f7fe f896 	bl	8003d10 <Segment_Set>

          if (time_SecBit)
 8005be4:	4b22      	ldr	r3, [pc, #136]	@ (8005c70 <main+0x1a78>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <main+0x1a2c>
          {
            Segment_Set(2, cross_Value / 10);
 8005bec:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <main+0x1ab4>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb0 <main+0x1ab8>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f7fe f887 	bl	8003d10 <Segment_Set>
            Segment_Set(3, cross_Value % 10);
 8005c02:	4b2a      	ldr	r3, [pc, #168]	@ (8005cac <main+0x1ab4>)
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	4b2a      	ldr	r3, [pc, #168]	@ (8005cb0 <main+0x1ab8>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	08d9      	lsrs	r1, r3, #3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	2003      	movs	r0, #3
 8005c1e:	f7fe f877 	bl	8003d10 <Segment_Set>
 8005c22:	e007      	b.n	8005c34 <main+0x1a3c>
          }
          else
          {
            Segment_Set(2, 'N');
 8005c24:	214e      	movs	r1, #78	@ 0x4e
 8005c26:	2002      	movs	r0, #2
 8005c28:	f7fe f872 	bl	8003d10 <Segment_Set>
            Segment_Set(3, 'N');
 8005c2c:	214e      	movs	r1, #78	@ 0x4e
 8005c2e:	2003      	movs	r0, #3
 8005c30:	f7fe f86e 	bl	8003d10 <Segment_Set>
          }
          irRemote = Ir_GetData();
 8005c34:	f7fd f870 	bl	8002d18 <Ir_GetData>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <main+0x1aa4>)
 8005c3e:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 8005c40:	4b16      	ldr	r3, [pc, #88]	@ (8005c9c <main+0x1aa4>)
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f43e ab3b 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <main+0x1aa4>)
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	@ (8005c98 <main+0x1aa0>)
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fb fa2b 	bl	80010b0 <Haamin_Remote>
 8005c5a:	f7fe bb31 	b.w	80042c0 <main+0xc8>
 8005c5e:	bf00      	nop
 8005c60:	200001c8 	.word	0x200001c8
 8005c64:	66666667 	.word	0x66666667
 8005c68:	200001c4 	.word	0x200001c4
 8005c6c:	40010800 	.word	0x40010800
 8005c70:	200001af 	.word	0x200001af
 8005c74:	200001da 	.word	0x200001da
 8005c78:	200001d5 	.word	0x200001d5
 8005c7c:	200001d6 	.word	0x200001d6
 8005c80:	200001db 	.word	0x200001db
 8005c84:	200001d7 	.word	0x200001d7
 8005c88:	2000000d 	.word	0x2000000d
 8005c8c:	2000000c 	.word	0x2000000c
 8005c90:	200001d9 	.word	0x200001d9
 8005c94:	200001cc 	.word	0x200001cc
 8005c98:	20000001 	.word	0x20000001
 8005c9c:	200001b4 	.word	0x200001b4
 8005ca0:	200001d8 	.word	0x200001d8
 8005ca4:	200001b0 	.word	0x200001b0
 8005ca8:	200001cd 	.word	0x200001cd
 8005cac:	200001dc 	.word	0x200001dc
 8005cb0:	cccccccd 	.word	0xcccccccd
          }
        }
        else if (amrap_Mode == SET_SEC)
 8005cb4:	4bb7      	ldr	r3, [pc, #732]	@ (8005f94 <main+0x1d9c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b53      	cmp	r3, #83	@ 0x53
 8005cba:	f47e ab01 	bne.w	80042c0 <main+0xc8>
        {
          Segment_Set(0, 'A');
 8005cbe:	2141      	movs	r1, #65	@ 0x41
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fe f825 	bl	8003d10 <Segment_Set>
          Segment_Set(1, 'r');
 8005cc6:	2172      	movs	r1, #114	@ 0x72
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7fe f821 	bl	8003d10 <Segment_Set>
          Segment_Set(2, 'N');
 8005cce:	214e      	movs	r1, #78	@ 0x4e
 8005cd0:	2002      	movs	r0, #2
 8005cd2:	f7fe f81d 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8005cd6:	214e      	movs	r1, #78	@ 0x4e
 8005cd8:	2003      	movs	r0, #3
 8005cda:	f7fe f819 	bl	8003d10 <Segment_Set>

          if (time_SecBit)
 8005cde:	4bae      	ldr	r3, [pc, #696]	@ (8005f98 <main+0x1da0>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01b      	beq.n	8005d1e <main+0x1b26>
          {
            Segment_Set(4, cross_Value / 10);
 8005ce6:	4bad      	ldr	r3, [pc, #692]	@ (8005f9c <main+0x1da4>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	4aad      	ldr	r2, [pc, #692]	@ (8005fa0 <main+0x1da8>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	08db      	lsrs	r3, r3, #3
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	2004      	movs	r0, #4
 8005cf8:	f7fe f80a 	bl	8003d10 <Segment_Set>
            Segment_Set(5, cross_Value % 10);
 8005cfc:	4ba7      	ldr	r3, [pc, #668]	@ (8005f9c <main+0x1da4>)
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	4ba7      	ldr	r3, [pc, #668]	@ (8005fa0 <main+0x1da8>)
 8005d02:	fba3 1302 	umull	r1, r3, r3, r2
 8005d06:	08d9      	lsrs	r1, r3, #3
 8005d08:	460b      	mov	r3, r1
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	2005      	movs	r0, #5
 8005d18:	f7fd fffa 	bl	8003d10 <Segment_Set>
 8005d1c:	e007      	b.n	8005d2e <main+0x1b36>
          }
          else
          {
            Segment_Set(4, 'N');
 8005d1e:	214e      	movs	r1, #78	@ 0x4e
 8005d20:	2004      	movs	r0, #4
 8005d22:	f7fd fff5 	bl	8003d10 <Segment_Set>
            Segment_Set(5, 'N');
 8005d26:	214e      	movs	r1, #78	@ 0x4e
 8005d28:	2005      	movs	r0, #5
 8005d2a:	f7fd fff1 	bl	8003d10 <Segment_Set>
          }
          irRemote = Ir_GetData();
 8005d2e:	f7fc fff3 	bl	8002d18 <Ir_GetData>
 8005d32:	4603      	mov	r3, r0
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b9b      	ldr	r3, [pc, #620]	@ (8005fa4 <main+0x1dac>)
 8005d38:	801a      	strh	r2, [r3, #0]
          if (irRemote != 0)
 8005d3a:	4b9a      	ldr	r3, [pc, #616]	@ (8005fa4 <main+0x1dac>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f43e aabe 	beq.w	80042c0 <main+0xc8>
          {
            Haamin_Remote(irRemote, work_Mode);
 8005d44:	4b97      	ldr	r3, [pc, #604]	@ (8005fa4 <main+0x1dac>)
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	4a97      	ldr	r2, [pc, #604]	@ (8005fa8 <main+0x1db0>)
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fb f9ae 	bl	80010b0 <Haamin_Remote>
 8005d54:	f7fe bab4 	b.w	80042c0 <main+0xc8>
          }
        }
      }
    }
    else if (work_Mode == SET_MIX)
 8005d58:	4b93      	ldr	r3, [pc, #588]	@ (8005fa8 <main+0x1db0>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b78      	cmp	r3, #120	@ 0x78
 8005d5e:	f040 8180 	bne.w	8006062 <main+0x1e6a>
    {
      Segment_Set(0, 'N');
 8005d62:	214e      	movs	r1, #78	@ 0x4e
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7fd ffd3 	bl	8003d10 <Segment_Set>
      Segment_Set(1, 'N');
 8005d6a:	214e      	movs	r1, #78	@ 0x4e
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f7fd ffcf 	bl	8003d10 <Segment_Set>
      Segment_Set(6, 't');
 8005d72:	2174      	movs	r1, #116	@ 0x74
 8005d74:	2006      	movs	r0, #6
 8005d76:	f7fd ffcb 	bl	8003d10 <Segment_Set>
      if (cross_Mode == MAIN_FUNCTION)
 8005d7a:	4b8c      	ldr	r3, [pc, #560]	@ (8005fac <main+0x1db4>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b66      	cmp	r3, #102	@ 0x66
 8005d80:	d12e      	bne.n	8005de0 <main+0x1be8>
      {
        time_Out = 0;
 8005d82:	4b8b      	ldr	r3, [pc, #556]	@ (8005fb0 <main+0x1db8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(blinky_Point, LOW);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2110      	movs	r1, #16
 8005d8c:	4889      	ldr	r0, [pc, #548]	@ (8005fb4 <main+0x1dbc>)
 8005d8e:	f001 fdaa 	bl	80078e6 <HAL_GPIO_WritePin>
        Segment_Set(2, 'N');
 8005d92:	214e      	movs	r1, #78	@ 0x4e
 8005d94:	2002      	movs	r0, #2
 8005d96:	f7fd ffbb 	bl	8003d10 <Segment_Set>
        Segment_Set(3, 'N');
 8005d9a:	214e      	movs	r1, #78	@ 0x4e
 8005d9c:	2003      	movs	r0, #3
 8005d9e:	f7fd ffb7 	bl	8003d10 <Segment_Set>
        Segment_Set(4, 'f');
 8005da2:	2166      	movs	r1, #102	@ 0x66
 8005da4:	2004      	movs	r0, #4
 8005da6:	f7fd ffb3 	bl	8003d10 <Segment_Set>
        Segment_Set(5, first_Set);
 8005daa:	4b83      	ldr	r3, [pc, #524]	@ (8005fb8 <main+0x1dc0>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	4619      	mov	r1, r3
 8005db0:	2005      	movs	r0, #5
 8005db2:	f7fd ffad 	bl	8003d10 <Segment_Set>
        irRemote = Ir_GetData();
 8005db6:	f7fc ffaf 	bl	8002d18 <Ir_GetData>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b79      	ldr	r3, [pc, #484]	@ (8005fa4 <main+0x1dac>)
 8005dc0:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8005dc2:	4b78      	ldr	r3, [pc, #480]	@ (8005fa4 <main+0x1dac>)
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f43e aa7a 	beq.w	80042c0 <main+0xc8>
        {
          Haamin_Remote(irRemote, work_Mode);
 8005dcc:	4b75      	ldr	r3, [pc, #468]	@ (8005fa4 <main+0x1dac>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	4a75      	ldr	r2, [pc, #468]	@ (8005fa8 <main+0x1db0>)
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fb f96a 	bl	80010b0 <Haamin_Remote>
 8005ddc:	f7fe ba70 	b.w	80042c0 <main+0xc8>
        }
      }
      else if (cross_Mode == SETTING)
 8005de0:	4b72      	ldr	r3, [pc, #456]	@ (8005fac <main+0x1db4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b73      	cmp	r3, #115	@ 0x73
 8005de6:	f47e aa6b 	bne.w	80042c0 <main+0xc8>
      {
        if (mix_Step == PART_1)
 8005dea:	4b74      	ldr	r3, [pc, #464]	@ (8005fbc <main+0x1dc4>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d132      	bne.n	8005e58 <main+0x1c60>
        {
          Segment_Set(2, 'N');
 8005df2:	214e      	movs	r1, #78	@ 0x4e
 8005df4:	2002      	movs	r0, #2
 8005df6:	f7fd ff8b 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8005dfa:	214e      	movs	r1, #78	@ 0x4e
 8005dfc:	2003      	movs	r0, #3
 8005dfe:	f7fd ff87 	bl	8003d10 <Segment_Set>
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2110      	movs	r1, #16
 8005e06:	486b      	ldr	r0, [pc, #428]	@ (8005fb4 <main+0x1dbc>)
 8005e08:	f001 fd6d 	bl	80078e6 <HAL_GPIO_WritePin>
          if (time_SecBit)
 8005e0c:	4b62      	ldr	r3, [pc, #392]	@ (8005f98 <main+0x1da0>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <main+0x1c32>
          {
            Segment_Set(4, 'f');
 8005e14:	2166      	movs	r1, #102	@ 0x66
 8005e16:	2004      	movs	r0, #4
 8005e18:	f7fd ff7a 	bl	8003d10 <Segment_Set>
            Segment_Set(5, first_Set);
 8005e1c:	4b66      	ldr	r3, [pc, #408]	@ (8005fb8 <main+0x1dc0>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	2005      	movs	r0, #5
 8005e24:	f7fd ff74 	bl	8003d10 <Segment_Set>
 8005e28:	e007      	b.n	8005e3a <main+0x1c42>
          }
          else
          {
            Segment_Set(4, 'N');
 8005e2a:	214e      	movs	r1, #78	@ 0x4e
 8005e2c:	2004      	movs	r0, #4
 8005e2e:	f7fd ff6f 	bl	8003d10 <Segment_Set>
            Segment_Set(5, 'N');
 8005e32:	214e      	movs	r1, #78	@ 0x4e
 8005e34:	2005      	movs	r0, #5
 8005e36:	f7fd ff6b 	bl	8003d10 <Segment_Set>
          }
          if ((cross_Value >= 1) && (cross_Value <= 5))
 8005e3a:	4b58      	ldr	r3, [pc, #352]	@ (8005f9c <main+0x1da4>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80fa 	beq.w	8006038 <main+0x1e40>
 8005e44:	4b55      	ldr	r3, [pc, #340]	@ (8005f9c <main+0x1da4>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	f200 80f5 	bhi.w	8006038 <main+0x1e40>
            first_Set = cross_Value;
 8005e4e:	4b53      	ldr	r3, [pc, #332]	@ (8005f9c <main+0x1da4>)
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	4b59      	ldr	r3, [pc, #356]	@ (8005fb8 <main+0x1dc0>)
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	e0ef      	b.n	8006038 <main+0x1e40>
        }
        else if (mix_Step == PART_2)
 8005e58:	4b58      	ldr	r3, [pc, #352]	@ (8005fbc <main+0x1dc4>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	f040 80b7 	bne.w	8005fd0 <main+0x1dd8>
        {
          HAL_GPIO_WritePin(blinky_Point, HIGH);
 8005e62:	2201      	movs	r2, #1
 8005e64:	2110      	movs	r1, #16
 8005e66:	4853      	ldr	r0, [pc, #332]	@ (8005fb4 <main+0x1dbc>)
 8005e68:	f001 fd3d 	bl	80078e6 <HAL_GPIO_WritePin>
          if (mix_Mode == SET_MIN)
 8005e6c:	4b54      	ldr	r3, [pc, #336]	@ (8005fc0 <main+0x1dc8>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b4d      	cmp	r3, #77	@ 0x4d
 8005e72:	d142      	bne.n	8005efa <main+0x1d02>
          {
            Segment_Set(4, mix_Second / 10);
 8005e74:	4b53      	ldr	r3, [pc, #332]	@ (8005fc4 <main+0x1dcc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a53      	ldr	r2, [pc, #332]	@ (8005fc8 <main+0x1dd0>)
 8005e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8005e7e:	1092      	asrs	r2, r2, #2
 8005e80:	17db      	asrs	r3, r3, #31
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	4619      	mov	r1, r3
 8005e88:	2004      	movs	r0, #4
 8005e8a:	f7fd ff41 	bl	8003d10 <Segment_Set>
            Segment_Set(5, mix_Second / 10);
 8005e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fc4 <main+0x1dcc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4d      	ldr	r2, [pc, #308]	@ (8005fc8 <main+0x1dd0>)
 8005e94:	fb82 1203 	smull	r1, r2, r2, r3
 8005e98:	1092      	asrs	r2, r2, #2
 8005e9a:	17db      	asrs	r3, r3, #31
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2005      	movs	r0, #5
 8005ea4:	f7fd ff34 	bl	8003d10 <Segment_Set>
            if (time_SecBit)
 8005ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <main+0x1da0>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <main+0x1cf0>
            {
              Segment_Set(2, cross_Value / 10);
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8005f9c <main+0x1da4>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa0 <main+0x1da8>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	f7fd ff25 	bl	8003d10 <Segment_Set>
              Segment_Set(3, cross_Value % 10);
 8005ec6:	4b35      	ldr	r3, [pc, #212]	@ (8005f9c <main+0x1da4>)
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	4b35      	ldr	r3, [pc, #212]	@ (8005fa0 <main+0x1da8>)
 8005ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed0:	08d9      	lsrs	r1, r3, #3
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	2003      	movs	r0, #3
 8005ee2:	f7fd ff15 	bl	8003d10 <Segment_Set>
 8005ee6:	e0a7      	b.n	8006038 <main+0x1e40>
            }
            else
            {
              Segment_Set(2, 'N');
 8005ee8:	214e      	movs	r1, #78	@ 0x4e
 8005eea:	2002      	movs	r0, #2
 8005eec:	f7fd ff10 	bl	8003d10 <Segment_Set>
              Segment_Set(3, 'N');
 8005ef0:	214e      	movs	r1, #78	@ 0x4e
 8005ef2:	2003      	movs	r0, #3
 8005ef4:	f7fd ff0c 	bl	8003d10 <Segment_Set>
 8005ef8:	e09e      	b.n	8006038 <main+0x1e40>
            }
          }
          else if (mix_Mode == SET_SEC)
 8005efa:	4b31      	ldr	r3, [pc, #196]	@ (8005fc0 <main+0x1dc8>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b53      	cmp	r3, #83	@ 0x53
 8005f00:	f040 809a 	bne.w	8006038 <main+0x1e40>
          {
            Segment_Set(2, mix_Minute / 10);
 8005f04:	4b31      	ldr	r3, [pc, #196]	@ (8005fcc <main+0x1dd4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc8 <main+0x1dd0>)
 8005f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8005f0e:	1092      	asrs	r2, r2, #2
 8005f10:	17db      	asrs	r3, r3, #31
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	2002      	movs	r0, #2
 8005f1a:	f7fd fef9 	bl	8003d10 <Segment_Set>
            Segment_Set(3, mix_Minute % 10);
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fcc <main+0x1dd4>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <main+0x1dd0>)
 8005f24:	fb83 1302 	smull	r1, r3, r3, r2
 8005f28:	1099      	asrs	r1, r3, #2
 8005f2a:	17d3      	asrs	r3, r2, #31
 8005f2c:	1ac9      	subs	r1, r1, r3
 8005f2e:	460b      	mov	r3, r1
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	1ad1      	subs	r1, r2, r3
 8005f38:	b2cb      	uxtb	r3, r1
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	2003      	movs	r0, #3
 8005f3e:	f7fd fee7 	bl	8003d10 <Segment_Set>
            if (time_SecBit)
 8005f42:	4b15      	ldr	r3, [pc, #84]	@ (8005f98 <main+0x1da0>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01b      	beq.n	8005f82 <main+0x1d8a>
            {
              Segment_Set(4, cross_Value / 10);
 8005f4a:	4b14      	ldr	r3, [pc, #80]	@ (8005f9c <main+0x1da4>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4a14      	ldr	r2, [pc, #80]	@ (8005fa0 <main+0x1da8>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2004      	movs	r0, #4
 8005f5c:	f7fd fed8 	bl	8003d10 <Segment_Set>
              Segment_Set(5, cross_Value % 10);
 8005f60:	4b0e      	ldr	r3, [pc, #56]	@ (8005f9c <main+0x1da4>)
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa0 <main+0x1da8>)
 8005f66:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6a:	08d9      	lsrs	r1, r3, #3
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4619      	mov	r1, r3
 8005f7a:	2005      	movs	r0, #5
 8005f7c:	f7fd fec8 	bl	8003d10 <Segment_Set>
 8005f80:	e05a      	b.n	8006038 <main+0x1e40>
            }
            else
            {
              Segment_Set(4, 'N');
 8005f82:	214e      	movs	r1, #78	@ 0x4e
 8005f84:	2004      	movs	r0, #4
 8005f86:	f7fd fec3 	bl	8003d10 <Segment_Set>
              Segment_Set(5, 'N');
 8005f8a:	214e      	movs	r1, #78	@ 0x4e
 8005f8c:	2005      	movs	r0, #5
 8005f8e:	f7fd febf 	bl	8003d10 <Segment_Set>
 8005f92:	e051      	b.n	8006038 <main+0x1e40>
 8005f94:	200001cd 	.word	0x200001cd
 8005f98:	200001af 	.word	0x200001af
 8005f9c:	200001dc 	.word	0x200001dc
 8005fa0:	cccccccd 	.word	0xcccccccd
 8005fa4:	200001b4 	.word	0x200001b4
 8005fa8:	20000001 	.word	0x20000001
 8005fac:	200001d8 	.word	0x200001d8
 8005fb0:	200001b0 	.word	0x200001b0
 8005fb4:	40010800 	.word	0x40010800
 8005fb8:	2000000e 	.word	0x2000000e
 8005fbc:	200001ce 	.word	0x200001ce
 8005fc0:	200001d4 	.word	0x200001d4
 8005fc4:	200001d0 	.word	0x200001d0
 8005fc8:	66666667 	.word	0x66666667
 8005fcc:	20000010 	.word	0x20000010
            }
          }
        }
        else if (mix_Step == PART_3)
 8005fd0:	4bb4      	ldr	r3, [pc, #720]	@ (80062a4 <main+0x20ac>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d12f      	bne.n	8006038 <main+0x1e40>
        {
          HAL_GPIO_WritePin(blinky_Point, LOW);
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2110      	movs	r1, #16
 8005fdc:	48b2      	ldr	r0, [pc, #712]	@ (80062a8 <main+0x20b0>)
 8005fde:	f001 fc82 	bl	80078e6 <HAL_GPIO_WritePin>
          Segment_Set(2, 'N');
 8005fe2:	214e      	movs	r1, #78	@ 0x4e
 8005fe4:	2002      	movs	r0, #2
 8005fe6:	f7fd fe93 	bl	8003d10 <Segment_Set>
          Segment_Set(3, 'N');
 8005fea:	214e      	movs	r1, #78	@ 0x4e
 8005fec:	2003      	movs	r0, #3
 8005fee:	f7fd fe8f 	bl	8003d10 <Segment_Set>
          if (time_SecBit)
 8005ff2:	4bae      	ldr	r3, [pc, #696]	@ (80062ac <main+0x20b4>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <main+0x1e18>
          {
            Segment_Set(4, 'f');
 8005ffa:	2166      	movs	r1, #102	@ 0x66
 8005ffc:	2004      	movs	r0, #4
 8005ffe:	f7fd fe87 	bl	8003d10 <Segment_Set>
            Segment_Set(5, second_Set);
 8006002:	4bab      	ldr	r3, [pc, #684]	@ (80062b0 <main+0x20b8>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	4619      	mov	r1, r3
 8006008:	2005      	movs	r0, #5
 800600a:	f7fd fe81 	bl	8003d10 <Segment_Set>
 800600e:	e007      	b.n	8006020 <main+0x1e28>
          }
          else
          {
            Segment_Set(4, 'N');
 8006010:	214e      	movs	r1, #78	@ 0x4e
 8006012:	2004      	movs	r0, #4
 8006014:	f7fd fe7c 	bl	8003d10 <Segment_Set>
            Segment_Set(5, 'N');
 8006018:	214e      	movs	r1, #78	@ 0x4e
 800601a:	2005      	movs	r0, #5
 800601c:	f7fd fe78 	bl	8003d10 <Segment_Set>
          }

          if ((cross_Value >= 1) && (cross_Value <= 5))
 8006020:	4ba4      	ldr	r3, [pc, #656]	@ (80062b4 <main+0x20bc>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <main+0x1e40>
 8006028:	4ba2      	ldr	r3, [pc, #648]	@ (80062b4 <main+0x20bc>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b05      	cmp	r3, #5
 800602e:	d803      	bhi.n	8006038 <main+0x1e40>
            second_Set = cross_Value;
 8006030:	4ba0      	ldr	r3, [pc, #640]	@ (80062b4 <main+0x20bc>)
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	4b9e      	ldr	r3, [pc, #632]	@ (80062b0 <main+0x20b8>)
 8006036:	701a      	strb	r2, [r3, #0]
        }

        irRemote = Ir_GetData();
 8006038:	f7fc fe6e 	bl	8002d18 <Ir_GetData>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	4b9d      	ldr	r3, [pc, #628]	@ (80062b8 <main+0x20c0>)
 8006042:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 8006044:	4b9c      	ldr	r3, [pc, #624]	@ (80062b8 <main+0x20c0>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f43e a939 	beq.w	80042c0 <main+0xc8>
        {
          Haamin_Remote(irRemote, work_Mode);
 800604e:	4b9a      	ldr	r3, [pc, #616]	@ (80062b8 <main+0x20c0>)
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	4a9a      	ldr	r2, [pc, #616]	@ (80062bc <main+0x20c4>)
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f7fb f829 	bl	80010b0 <Haamin_Remote>
 800605e:	f7fe b92f 	b.w	80042c0 <main+0xc8>
        }
      }
    }
    else if (work_Mode == MIX)
 8006062:	4b96      	ldr	r3, [pc, #600]	@ (80062bc <main+0x20c4>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b58      	cmp	r3, #88	@ 0x58
 8006068:	f040 813a 	bne.w	80062e0 <main+0x20e8>
    {
      time_Out = 0;
 800606c:	4b94      	ldr	r3, [pc, #592]	@ (80062c0 <main+0x20c8>)
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
      if (mix_Step == PART_1)
 8006072:	4b8c      	ldr	r3, [pc, #560]	@ (80062a4 <main+0x20ac>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d137      	bne.n	80060ea <main+0x1ef2>
      {
        mix_Step = PART_2;
 800607a:	4b8a      	ldr	r3, [pc, #552]	@ (80062a4 <main+0x20ac>)
 800607c:	2202      	movs	r2, #2
 800607e:	701a      	strb	r2, [r3, #0]
        mix_Flag = 1;
 8006080:	4b90      	ldr	r3, [pc, #576]	@ (80062c4 <main+0x20cc>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
        switch (first_Set)
 8006086:	4b90      	ldr	r3, [pc, #576]	@ (80062c8 <main+0x20d0>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	3b01      	subs	r3, #1
 800608c:	2b04      	cmp	r3, #4
 800608e:	d821      	bhi.n	80060d4 <main+0x1edc>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <main+0x1ea0>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060ad 	.word	0x080060ad
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060cd 	.word	0x080060cd
        {
        case 1:
          work_Mode = UP_TIMER;
 80060ac:	4b83      	ldr	r3, [pc, #524]	@ (80062bc <main+0x20c4>)
 80060ae:	2275      	movs	r2, #117	@ 0x75
 80060b0:	701a      	strb	r2, [r3, #0]
          break;
 80060b2:	e010      	b.n	80060d6 <main+0x1ede>
        case 2:
          work_Mode = DN_TIMER;
 80060b4:	4b81      	ldr	r3, [pc, #516]	@ (80062bc <main+0x20c4>)
 80060b6:	2264      	movs	r2, #100	@ 0x64
 80060b8:	701a      	strb	r2, [r3, #0]
          break;
 80060ba:	e00c      	b.n	80060d6 <main+0x1ede>
        case 3:
          work_Mode = TABATA;
 80060bc:	4b7f      	ldr	r3, [pc, #508]	@ (80062bc <main+0x20c4>)
 80060be:	2274      	movs	r2, #116	@ 0x74
 80060c0:	701a      	strb	r2, [r3, #0]
          break;
 80060c2:	e008      	b.n	80060d6 <main+0x1ede>
        case 4:
          work_Mode = EMOM;
 80060c4:	4b7d      	ldr	r3, [pc, #500]	@ (80062bc <main+0x20c4>)
 80060c6:	2265      	movs	r2, #101	@ 0x65
 80060c8:	701a      	strb	r2, [r3, #0]
          break;
 80060ca:	e004      	b.n	80060d6 <main+0x1ede>
        case 5:
          work_Mode = AMRAP;
 80060cc:	4b7b      	ldr	r3, [pc, #492]	@ (80062bc <main+0x20c4>)
 80060ce:	2261      	movs	r2, #97	@ 0x61
 80060d0:	701a      	strb	r2, [r3, #0]
          break;
 80060d2:	e000      	b.n	80060d6 <main+0x1ede>
        default:
          break;
 80060d4:	bf00      	nop
        }
        cross_Mode = MAIN_FUNCTION;
 80060d6:	4b7d      	ldr	r3, [pc, #500]	@ (80062cc <main+0x20d4>)
 80060d8:	2266      	movs	r2, #102	@ 0x66
 80060da:	701a      	strb	r2, [r3, #0]
        timer_Mode = MAIN_FUNCTION;
 80060dc:	4b7c      	ldr	r3, [pc, #496]	@ (80062d0 <main+0x20d8>)
 80060de:	2266      	movs	r2, #102	@ 0x66
 80060e0:	701a      	strb	r2, [r3, #0]
        Buzz(100);
 80060e2:	2064      	movs	r0, #100	@ 0x64
 80060e4:	f7fc fd2e 	bl	8002b44 <Buzz>
 80060e8:	e0d5      	b.n	8006296 <main+0x209e>
      }
      else if (mix_Step == PART_2)
 80060ea:	4b6e      	ldr	r3, [pc, #440]	@ (80062a4 <main+0x20ac>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	f040 8090 	bne.w	8006214 <main+0x201c>
      {
        Segment_Set(0, 'N');
 80060f4:	214e      	movs	r1, #78	@ 0x4e
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7fd fe0a 	bl	8003d10 <Segment_Set>
        Segment_Set(1, 'N');
 80060fc:	214e      	movs	r1, #78	@ 0x4e
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fd fe06 	bl	8003d10 <Segment_Set>
        Segment_Set(2, mix_Minute / 10);
 8006104:	4b73      	ldr	r3, [pc, #460]	@ (80062d4 <main+0x20dc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a73      	ldr	r2, [pc, #460]	@ (80062d8 <main+0x20e0>)
 800610a:	fb82 1203 	smull	r1, r2, r2, r3
 800610e:	1092      	asrs	r2, r2, #2
 8006110:	17db      	asrs	r3, r3, #31
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	4619      	mov	r1, r3
 8006118:	2002      	movs	r0, #2
 800611a:	f7fd fdf9 	bl	8003d10 <Segment_Set>
        Segment_Set(3, mix_Minute % 10);
 800611e:	4b6d      	ldr	r3, [pc, #436]	@ (80062d4 <main+0x20dc>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b6d      	ldr	r3, [pc, #436]	@ (80062d8 <main+0x20e0>)
 8006124:	fb83 1302 	smull	r1, r3, r3, r2
 8006128:	1099      	asrs	r1, r3, #2
 800612a:	17d3      	asrs	r3, r2, #31
 800612c:	1ac9      	subs	r1, r1, r3
 800612e:	460b      	mov	r3, r1
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	1ad1      	subs	r1, r2, r3
 8006138:	b2cb      	uxtb	r3, r1
 800613a:	4619      	mov	r1, r3
 800613c:	2003      	movs	r0, #3
 800613e:	f7fd fde7 	bl	8003d10 <Segment_Set>
        Segment_Set(4, mix_Second / 10);
 8006142:	4b66      	ldr	r3, [pc, #408]	@ (80062dc <main+0x20e4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a64      	ldr	r2, [pc, #400]	@ (80062d8 <main+0x20e0>)
 8006148:	fb82 1203 	smull	r1, r2, r2, r3
 800614c:	1092      	asrs	r2, r2, #2
 800614e:	17db      	asrs	r3, r3, #31
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	b2db      	uxtb	r3, r3
 8006154:	4619      	mov	r1, r3
 8006156:	2004      	movs	r0, #4
 8006158:	f7fd fdda 	bl	8003d10 <Segment_Set>
        Segment_Set(5, mix_Second % 10);
 800615c:	4b5f      	ldr	r3, [pc, #380]	@ (80062dc <main+0x20e4>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4b5d      	ldr	r3, [pc, #372]	@ (80062d8 <main+0x20e0>)
 8006162:	fb83 1302 	smull	r1, r3, r3, r2
 8006166:	1099      	asrs	r1, r3, #2
 8006168:	17d3      	asrs	r3, r2, #31
 800616a:	1ac9      	subs	r1, r1, r3
 800616c:	460b      	mov	r3, r1
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	1ad1      	subs	r1, r2, r3
 8006176:	b2cb      	uxtb	r3, r1
 8006178:	4619      	mov	r1, r3
 800617a:	2005      	movs	r0, #5
 800617c:	f7fd fdc8 	bl	8003d10 <Segment_Set>
        mix_Flag = 0;
 8006180:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <main+0x20cc>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]

        if (time_SecBit)
 8006186:	4b49      	ldr	r3, [pc, #292]	@ (80062ac <main+0x20b4>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d02f      	beq.n	80061ee <main+0x1ff6>
        {
          time_SecBit = 0;
 800618e:	4b47      	ldr	r3, [pc, #284]	@ (80062ac <main+0x20b4>)
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
          if (--mix_Second < 0)
 8006194:	4b51      	ldr	r3, [pc, #324]	@ (80062dc <main+0x20e4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	4a50      	ldr	r2, [pc, #320]	@ (80062dc <main+0x20e4>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	4b4f      	ldr	r3, [pc, #316]	@ (80062dc <main+0x20e4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da23      	bge.n	80061ee <main+0x1ff6>
          {
            mix_Second = 59;
 80061a6:	4b4d      	ldr	r3, [pc, #308]	@ (80062dc <main+0x20e4>)
 80061a8:	223b      	movs	r2, #59	@ 0x3b
 80061aa:	601a      	str	r2, [r3, #0]
            if (--mix_Minute < 0)
 80061ac:	4b49      	ldr	r3, [pc, #292]	@ (80062d4 <main+0x20dc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	4a48      	ldr	r2, [pc, #288]	@ (80062d4 <main+0x20dc>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b47      	ldr	r3, [pc, #284]	@ (80062d4 <main+0x20dc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	da17      	bge.n	80061ee <main+0x1ff6>
            {
              mix_Minute = 0;
 80061be:	4b45      	ldr	r3, [pc, #276]	@ (80062d4 <main+0x20dc>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
              mix_Second = 0;
 80061c4:	4b45      	ldr	r3, [pc, #276]	@ (80062dc <main+0x20e4>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
              mix_Step = 3;
 80061ca:	4b36      	ldr	r3, [pc, #216]	@ (80062a4 <main+0x20ac>)
 80061cc:	2203      	movs	r2, #3
 80061ce:	701a      	strb	r2, [r3, #0]
              Buzz(100);
 80061d0:	2064      	movs	r0, #100	@ 0x64
 80061d2:	f7fc fcb7 	bl	8002b44 <Buzz>
              HAL_Delay(100);
 80061d6:	2064      	movs	r0, #100	@ 0x64
 80061d8:	f000 fc8c 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 80061dc:	2064      	movs	r0, #100	@ 0x64
 80061de:	f7fc fcb1 	bl	8002b44 <Buzz>
              HAL_Delay(100);
 80061e2:	2064      	movs	r0, #100	@ 0x64
 80061e4:	f000 fc86 	bl	8006af4 <HAL_Delay>
              Buzz(100);
 80061e8:	2064      	movs	r0, #100	@ 0x64
 80061ea:	f7fc fcab 	bl	8002b44 <Buzz>
            }
          }
        }

        irRemote = Ir_GetData();
 80061ee:	f7fc fd93 	bl	8002d18 <Ir_GetData>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b30      	ldr	r3, [pc, #192]	@ (80062b8 <main+0x20c0>)
 80061f8:	801a      	strh	r2, [r3, #0]
        if (irRemote != 0)
 80061fa:	4b2f      	ldr	r3, [pc, #188]	@ (80062b8 <main+0x20c0>)
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d049      	beq.n	8006296 <main+0x209e>
        {
          Haamin_Remote(irRemote, work_Mode);
 8006202:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <main+0x20c0>)
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	4a2d      	ldr	r2, [pc, #180]	@ (80062bc <main+0x20c4>)
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	4611      	mov	r1, r2
 800620c:	4618      	mov	r0, r3
 800620e:	f7fa ff4f 	bl	80010b0 <Haamin_Remote>
 8006212:	e040      	b.n	8006296 <main+0x209e>
        }
      }
      else if (mix_Step == PART_3)
 8006214:	4b23      	ldr	r3, [pc, #140]	@ (80062a4 <main+0x20ac>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d130      	bne.n	800627e <main+0x2086>
      {
        mix_Step = 0;
 800621c:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <main+0x20ac>)
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
        mix_Flag = 1;
 8006222:	4b28      	ldr	r3, [pc, #160]	@ (80062c4 <main+0x20cc>)
 8006224:	2201      	movs	r2, #1
 8006226:	701a      	strb	r2, [r3, #0]
        switch (second_Set)
 8006228:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <main+0x20b8>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	3b01      	subs	r3, #1
 800622e:	2b04      	cmp	r3, #4
 8006230:	d820      	bhi.n	8006274 <main+0x207c>
 8006232:	a201      	add	r2, pc, #4	@ (adr r2, 8006238 <main+0x2040>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800624d 	.word	0x0800624d
 800623c:	08006255 	.word	0x08006255
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006265 	.word	0x08006265
 8006248:	0800626d 	.word	0x0800626d
        {
        case 1:
          work_Mode = UP_TIMER;
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <main+0x20c4>)
 800624e:	2275      	movs	r2, #117	@ 0x75
 8006250:	701a      	strb	r2, [r3, #0]
          break;
 8006252:	e010      	b.n	8006276 <main+0x207e>
        case 2:
          work_Mode = DN_TIMER;
 8006254:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <main+0x20c4>)
 8006256:	2264      	movs	r2, #100	@ 0x64
 8006258:	701a      	strb	r2, [r3, #0]
          break;
 800625a:	e00c      	b.n	8006276 <main+0x207e>
        case 3:
          work_Mode = TABATA;
 800625c:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <main+0x20c4>)
 800625e:	2274      	movs	r2, #116	@ 0x74
 8006260:	701a      	strb	r2, [r3, #0]
          break;
 8006262:	e008      	b.n	8006276 <main+0x207e>
        case 4:
          work_Mode = EMOM;
 8006264:	4b15      	ldr	r3, [pc, #84]	@ (80062bc <main+0x20c4>)
 8006266:	2265      	movs	r2, #101	@ 0x65
 8006268:	701a      	strb	r2, [r3, #0]
          break;
 800626a:	e004      	b.n	8006276 <main+0x207e>
        case 5:
          work_Mode = AMRAP;
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <main+0x20c4>)
 800626e:	2261      	movs	r2, #97	@ 0x61
 8006270:	701a      	strb	r2, [r3, #0]
          break;
 8006272:	e000      	b.n	8006276 <main+0x207e>
        default:
          break;
 8006274:	bf00      	nop
        }
        Buzz(100);
 8006276:	2064      	movs	r0, #100	@ 0x64
 8006278:	f7fc fc64 	bl	8002b44 <Buzz>
 800627c:	e00b      	b.n	8006296 <main+0x209e>
      }
      else
      {
        work_Mode = SET_MIX;
 800627e:	4b0f      	ldr	r3, [pc, #60]	@ (80062bc <main+0x20c4>)
 8006280:	2278      	movs	r2, #120	@ 0x78
 8006282:	701a      	strb	r2, [r3, #0]
        cross_Mode = MAIN_FUNCTION;
 8006284:	4b11      	ldr	r3, [pc, #68]	@ (80062cc <main+0x20d4>)
 8006286:	2266      	movs	r2, #102	@ 0x66
 8006288:	701a      	strb	r2, [r3, #0]
        Buzz(200);
 800628a:	20c8      	movs	r0, #200	@ 0xc8
 800628c:	f7fc fc5a 	bl	8002b44 <Buzz>
        HAL_Delay(100);
 8006290:	2064      	movs	r0, #100	@ 0x64
 8006292:	f000 fc2f 	bl	8006af4 <HAL_Delay>
      }
      Segment_Set(6, 't');
 8006296:	2174      	movs	r1, #116	@ 0x74
 8006298:	2006      	movs	r0, #6
 800629a:	f7fd fd39 	bl	8003d10 <Segment_Set>
 800629e:	f7fe b80f 	b.w	80042c0 <main+0xc8>
 80062a2:	bf00      	nop
 80062a4:	200001ce 	.word	0x200001ce
 80062a8:	40010800 	.word	0x40010800
 80062ac:	200001af 	.word	0x200001af
 80062b0:	2000000f 	.word	0x2000000f
 80062b4:	200001dc 	.word	0x200001dc
 80062b8:	200001b4 	.word	0x200001b4
 80062bc:	20000001 	.word	0x20000001
 80062c0:	200001b0 	.word	0x200001b0
 80062c4:	200001d5 	.word	0x200001d5
 80062c8:	2000000e 	.word	0x2000000e
 80062cc:	200001d8 	.word	0x200001d8
 80062d0:	200001ec 	.word	0x200001ec
 80062d4:	20000010 	.word	0x20000010
 80062d8:	66666667 	.word	0x66666667
 80062dc:	200001d0 	.word	0x200001d0
    }
    else if (work_Mode == TIMER_COUNTER)
 80062e0:	4b7f      	ldr	r3, [pc, #508]	@ (80064e0 <main+0x22e8>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b63      	cmp	r3, #99	@ 0x63
 80062e6:	f47d afeb 	bne.w	80042c0 <main+0xc8>
    {
      Segment_Set(6, 'F');
 80062ea:	2146      	movs	r1, #70	@ 0x46
 80062ec:	2006      	movs	r0, #6
 80062ee:	f7fd fd0f 	bl	8003d10 <Segment_Set>
      if(HAL_GPIO_ReadPin(Counter_GPIO_Port,Counter_Pin) == GPIO_PIN_RESET)
 80062f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80062f6:	487b      	ldr	r0, [pc, #492]	@ (80064e4 <main+0x22ec>)
 80062f8:	f001 fade 	bl	80078b8 <HAL_GPIO_ReadPin>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11c      	bne.n	800633c <main+0x2144>
      {
        HAL_Delay(50);
 8006302:	2032      	movs	r0, #50	@ 0x32
 8006304:	f000 fbf6 	bl	8006af4 <HAL_Delay>
        if(HAL_GPIO_ReadPin(Counter_GPIO_Port,Counter_Pin)== GPIO_PIN_RESET)
 8006308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800630c:	4875      	ldr	r0, [pc, #468]	@ (80064e4 <main+0x22ec>)
 800630e:	f001 fad3 	bl	80078b8 <HAL_GPIO_ReadPin>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <main+0x2132>
        {
          counter_Value++;
 8006318:	4b73      	ldr	r3, [pc, #460]	@ (80064e8 <main+0x22f0>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	4b71      	ldr	r3, [pc, #452]	@ (80064e8 <main+0x22f0>)
 8006322:	701a      	strb	r2, [r3, #0]
          if(counter_Value > 999999)
          {
            counter_Value = 0;
          }
          Buzz(50);
 8006324:	2032      	movs	r0, #50	@ 0x32
 8006326:	f7fc fc0d 	bl	8002b44 <Buzz>
        }while(HAL_GPIO_ReadPin(Counter_GPIO_Port,Counter_Pin) == GPIO_PIN_RESET);
 800632a:	bf00      	nop
 800632c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006330:	486c      	ldr	r0, [pc, #432]	@ (80064e4 <main+0x22ec>)
 8006332:	f001 fac1 	bl	80078b8 <HAL_GPIO_ReadPin>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f7      	beq.n	800632c <main+0x2134>
      }

      if(HAL_GPIO_ReadPin(Timer_GPIO_Port,Timer_Pin)== GPIO_PIN_RESET)
 800633c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006340:	4868      	ldr	r0, [pc, #416]	@ (80064e4 <main+0x22ec>)
 8006342:	f001 fab9 	bl	80078b8 <HAL_GPIO_ReadPin>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d120      	bne.n	800638e <main+0x2196>
      {
        HAL_Delay(50);
 800634c:	2032      	movs	r0, #50	@ 0x32
 800634e:	f000 fbd1 	bl	8006af4 <HAL_Delay>
        if(HAL_GPIO_ReadPin(Timer_GPIO_Port,Timer_Pin)== GPIO_PIN_RESET)
 8006352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006356:	4863      	ldr	r0, [pc, #396]	@ (80064e4 <main+0x22ec>)
 8006358:	f001 faae 	bl	80078b8 <HAL_GPIO_ReadPin>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <main+0x2184>
        {
          timer_Run = !timer_Run;
 8006362:	4b62      	ldr	r3, [pc, #392]	@ (80064ec <main+0x22f4>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf0c      	ite	eq
 800636a:	2301      	moveq	r3, #1
 800636c:	2300      	movne	r3, #0
 800636e:	b2db      	uxtb	r3, r3
 8006370:	461a      	mov	r2, r3
 8006372:	4b5e      	ldr	r3, [pc, #376]	@ (80064ec <main+0x22f4>)
 8006374:	701a      	strb	r2, [r3, #0]
          Buzz(50);
 8006376:	2032      	movs	r0, #50	@ 0x32
 8006378:	f7fc fbe4 	bl	8002b44 <Buzz>
        }while(HAL_GPIO_ReadPin(Timer_GPIO_Port,Timer_Pin) == GPIO_PIN_RESET);
 800637c:	bf00      	nop
 800637e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006382:	4858      	ldr	r0, [pc, #352]	@ (80064e4 <main+0x22ec>)
 8006384:	f001 fa98 	bl	80078b8 <HAL_GPIO_ReadPin>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f7      	beq.n	800637e <main+0x2186>
      }

      if(HAL_GPIO_ReadPin(Reset_GPIO_Port,Reset_Pin)== GPIO_PIN_RESET)
 800638e:	2180      	movs	r1, #128	@ 0x80
 8006390:	4854      	ldr	r0, [pc, #336]	@ (80064e4 <main+0x22ec>)
 8006392:	f001 fa91 	bl	80078b8 <HAL_GPIO_ReadPin>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d126      	bne.n	80063ea <main+0x21f2>
      {
        HAL_Delay(50);
 800639c:	2032      	movs	r0, #50	@ 0x32
 800639e:	f000 fba9 	bl	8006af4 <HAL_Delay>
        if(HAL_GPIO_ReadPin(Reset_GPIO_Port,Reset_Pin)== GPIO_PIN_RESET)
 80063a2:	2180      	movs	r1, #128	@ 0x80
 80063a4:	484f      	ldr	r0, [pc, #316]	@ (80064e4 <main+0x22ec>)
 80063a6:	f001 fa87 	bl	80078b8 <HAL_GPIO_ReadPin>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d114      	bne.n	80063da <main+0x21e2>
        {
          counter_Value = 0;
 80063b0:	4b4d      	ldr	r3, [pc, #308]	@ (80064e8 <main+0x22f0>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
          timer_Second = 0;
 80063b6:	4b4e      	ldr	r3, [pc, #312]	@ (80064f0 <main+0x22f8>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
          timer_mili_Second = 0;
 80063bc:	4b4d      	ldr	r3, [pc, #308]	@ (80064f4 <main+0x22fc>)
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
          timer_Run = 0;
 80063c2:	4b4a      	ldr	r3, [pc, #296]	@ (80064ec <main+0x22f4>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
          Buzz(100);HAL_Delay(50);Buzz(100);
 80063c8:	2064      	movs	r0, #100	@ 0x64
 80063ca:	f7fc fbbb 	bl	8002b44 <Buzz>
 80063ce:	2032      	movs	r0, #50	@ 0x32
 80063d0:	f000 fb90 	bl	8006af4 <HAL_Delay>
 80063d4:	2064      	movs	r0, #100	@ 0x64
 80063d6:	f7fc fbb5 	bl	8002b44 <Buzz>
        }while(HAL_GPIO_ReadPin(Reset_GPIO_Port,Reset_Pin)== GPIO_PIN_RESET);
 80063da:	bf00      	nop
 80063dc:	2180      	movs	r1, #128	@ 0x80
 80063de:	4841      	ldr	r0, [pc, #260]	@ (80064e4 <main+0x22ec>)
 80063e0:	f001 fa6a 	bl	80078b8 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f8      	beq.n	80063dc <main+0x21e4>
      }
      
      if(timer_Run)
 80063ea:	4b40      	ldr	r3, [pc, #256]	@ (80064ec <main+0x22f4>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00f      	beq.n	8006412 <main+0x221a>
      {
        if(++timer_mili_Second > 99)
 80063f2:	4b40      	ldr	r3, [pc, #256]	@ (80064f4 <main+0x22fc>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	3301      	adds	r3, #1
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4b3e      	ldr	r3, [pc, #248]	@ (80064f4 <main+0x22fc>)
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	4b3d      	ldr	r3, [pc, #244]	@ (80064f4 <main+0x22fc>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b63      	cmp	r3, #99	@ 0x63
 8006404:	d902      	bls.n	800640c <main+0x2214>
          timer_mili_Second = 0;
 8006406:	4b3b      	ldr	r3, [pc, #236]	@ (80064f4 <main+0x22fc>)
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
          
        HAL_Delay(8);
 800640c:	2008      	movs	r0, #8
 800640e:	f000 fb71 	bl	8006af4 <HAL_Delay>
      }

      Segment_Set(0,timer_Second/10);
 8006412:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <main+0x22f8>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	4a38      	ldr	r2, [pc, #224]	@ (80064f8 <main+0x2300>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	b2db      	uxtb	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	2000      	movs	r0, #0
 8006424:	f7fd fc74 	bl	8003d10 <Segment_Set>
      Segment_Set(1,timer_Second%10);
 8006428:	4b31      	ldr	r3, [pc, #196]	@ (80064f0 <main+0x22f8>)
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	4b32      	ldr	r3, [pc, #200]	@ (80064f8 <main+0x2300>)
 800642e:	fba3 1302 	umull	r1, r3, r3, r2
 8006432:	08d9      	lsrs	r1, r3, #3
 8006434:	460b      	mov	r3, r1
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	b2db      	uxtb	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	2001      	movs	r0, #1
 8006444:	f7fd fc64 	bl	8003d10 <Segment_Set>
      Segment_Set(2,timer_mili_Second/10);
 8006448:	4b2a      	ldr	r3, [pc, #168]	@ (80064f4 <main+0x22fc>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	4a2a      	ldr	r2, [pc, #168]	@ (80064f8 <main+0x2300>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4619      	mov	r1, r3
 8006458:	2002      	movs	r0, #2
 800645a:	f7fd fc59 	bl	8003d10 <Segment_Set>
      Segment_Set(3,timer_mili_Second%10);
 800645e:	4b25      	ldr	r3, [pc, #148]	@ (80064f4 <main+0x22fc>)
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <main+0x2300>)
 8006464:	fba3 1302 	umull	r1, r3, r3, r2
 8006468:	08d9      	lsrs	r1, r3, #3
 800646a:	460b      	mov	r3, r1
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	b2db      	uxtb	r3, r3
 8006476:	4619      	mov	r1, r3
 8006478:	2003      	movs	r0, #3
 800647a:	f7fd fc49 	bl	8003d10 <Segment_Set>
      Segment_Set(4,(counter_Value/10));
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <main+0x22f0>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4a1d      	ldr	r2, [pc, #116]	@ (80064f8 <main+0x2300>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	08db      	lsrs	r3, r3, #3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	2004      	movs	r0, #4
 8006490:	f7fd fc3e 	bl	8003d10 <Segment_Set>
      Segment_Set(5,counter_Value%10);
 8006494:	4b14      	ldr	r3, [pc, #80]	@ (80064e8 <main+0x22f0>)
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <main+0x2300>)
 800649a:	fba3 1302 	umull	r1, r3, r3, r2
 800649e:	08d9      	lsrs	r1, r3, #3
 80064a0:	460b      	mov	r3, r1
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	2005      	movs	r0, #5
 80064b0:	f7fd fc2e 	bl	8003d10 <Segment_Set>

      irRemote = Ir_GetData();
 80064b4:	f7fc fc30 	bl	8002d18 <Ir_GetData>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <main+0x2304>)
 80064be:	801a      	strh	r2, [r3, #0]
      if (irRemote != 0)
 80064c0:	4b0e      	ldr	r3, [pc, #56]	@ (80064fc <main+0x2304>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f43d aefb 	beq.w	80042c0 <main+0xc8>
      {
        Haamin_Remote(irRemote, work_Mode);
 80064ca:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <main+0x2304>)
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	4a04      	ldr	r2, [pc, #16]	@ (80064e0 <main+0x22e8>)
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fa fdeb 	bl	80010b0 <Haamin_Remote>
    if (work_Mode == MODE_NORMAL)
 80064da:	f7fd bef1 	b.w	80042c0 <main+0xc8>
 80064de:	bf00      	nop
 80064e0:	20000001 	.word	0x20000001
 80064e4:	40010c00 	.word	0x40010c00
 80064e8:	200001ea 	.word	0x200001ea
 80064ec:	200001ee 	.word	0x200001ee
 80064f0:	200001e8 	.word	0x200001e8
 80064f4:	200001e9 	.word	0x200001e9
 80064f8:	cccccccd 	.word	0xcccccccd
 80064fc:	200001b4 	.word	0x200001b4

08006500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b094      	sub	sp, #80	@ 0x50
 8006504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800650a:	2228      	movs	r2, #40	@ 0x28
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f003 fc00 	bl	8009d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006514:	f107 0314 	add.w	r3, r7, #20
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	609a      	str	r2, [r3, #8]
 8006520:	60da      	str	r2, [r3, #12]
 8006522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006530:	2301      	movs	r3, #1
 8006532:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800653a:	2300      	movs	r3, #0
 800653c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800653e:	2301      	movs	r3, #1
 8006540:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006542:	2302      	movs	r3, #2
 8006544:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800654c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006550:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006552:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006556:	4618      	mov	r0, r3
 8006558:	f002 fa66 	bl	8008a28 <HAL_RCC_OscConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006562:	f000 f8c5 	bl	80066f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006566:	230f      	movs	r3, #15
 8006568:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800656a:	2302      	movs	r3, #2
 800656c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006576:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f002 fcd1 	bl	8008f2c <HAL_RCC_ClockConfig>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006590:	f000 f8ae 	bl	80066f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006594:	2302      	movs	r3, #2
 8006596:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8006598:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800659c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f002 fe51 	bl	8009248 <HAL_RCCEx_PeriphCLKConfig>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80065ac:	f000 f8a0 	bl	80066f0 <Error_Handler>
  }
}
 80065b0:	bf00      	nop
 80065b2:	3750      	adds	r7, #80	@ 0x50
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <Time_Update>:

/* USER CODE BEGIN 4 */

void Time_Update(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  if(work_Mode == TIMER_COUNTER)
 80065bc:	4b40      	ldr	r3, [pc, #256]	@ (80066c0 <Time_Update+0x108>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b63      	cmp	r3, #99	@ 0x63
 80065c2:	d114      	bne.n	80065ee <Time_Update+0x36>
  {
    if(timer_Run)
 80065c4:	4b3f      	ldr	r3, [pc, #252]	@ (80066c4 <Time_Update+0x10c>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d076      	beq.n	80066ba <Time_Update+0x102>
    {
      timer_mili_Second = 0;
 80065cc:	4b3e      	ldr	r3, [pc, #248]	@ (80066c8 <Time_Update+0x110>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
      if(++timer_Second > 99)
 80065d2:	4b3e      	ldr	r3, [pc, #248]	@ (80066cc <Time_Update+0x114>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4b3c      	ldr	r3, [pc, #240]	@ (80066cc <Time_Update+0x114>)
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <Time_Update+0x114>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b63      	cmp	r3, #99	@ 0x63
 80065e4:	d969      	bls.n	80066ba <Time_Update+0x102>
      {
        timer_Second = 0;
 80065e6:	4b39      	ldr	r3, [pc, #228]	@ (80066cc <Time_Update+0x114>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
        // Buzz(50);
      }
    }
  }

}
 80065ec:	e065      	b.n	80066ba <Time_Update+0x102>
    if (++time_Second > 59)
 80065ee:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <Time_Update+0x118>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4b36      	ldr	r3, [pc, #216]	@ (80066d0 <Time_Update+0x118>)
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <Time_Update+0x118>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b3b      	cmp	r3, #59	@ 0x3b
 8006600:	d91c      	bls.n	800663c <Time_Update+0x84>
      time_Second = 0;
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <Time_Update+0x118>)
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
      if (++time_Minute > 59)
 8006608:	4b32      	ldr	r3, [pc, #200]	@ (80066d4 <Time_Update+0x11c>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	4b30      	ldr	r3, [pc, #192]	@ (80066d4 <Time_Update+0x11c>)
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	4b2f      	ldr	r3, [pc, #188]	@ (80066d4 <Time_Update+0x11c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b3b      	cmp	r3, #59	@ 0x3b
 800661a:	d90f      	bls.n	800663c <Time_Update+0x84>
        time_Minute = 0;
 800661c:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <Time_Update+0x11c>)
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
        if (++time_Hour > 23)
 8006622:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <Time_Update+0x120>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4b2b      	ldr	r3, [pc, #172]	@ (80066d8 <Time_Update+0x120>)
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	4b2a      	ldr	r3, [pc, #168]	@ (80066d8 <Time_Update+0x120>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b17      	cmp	r3, #23
 8006634:	d902      	bls.n	800663c <Time_Update+0x84>
          time_Hour = 0;
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <Time_Update+0x120>)
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
    if (++time_TmpShow > 30)
 800663c:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <Time_Update+0x124>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <Time_Update+0x124>)
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	4b24      	ldr	r3, [pc, #144]	@ (80066dc <Time_Update+0x124>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b1e      	cmp	r3, #30
 800664e:	d902      	bls.n	8006656 <Time_Update+0x9e>
      time_TmpShow = 0;
 8006650:	4b22      	ldr	r3, [pc, #136]	@ (80066dc <Time_Update+0x124>)
 8006652:	2200      	movs	r2, #0
 8006654:	701a      	strb	r2, [r3, #0]
    if (++time_DateShow > 30)
 8006656:	4b22      	ldr	r3, [pc, #136]	@ (80066e0 <Time_Update+0x128>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	b2da      	uxtb	r2, r3
 800665e:	4b20      	ldr	r3, [pc, #128]	@ (80066e0 <Time_Update+0x128>)
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	4b1f      	ldr	r3, [pc, #124]	@ (80066e0 <Time_Update+0x128>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b1e      	cmp	r3, #30
 8006668:	d902      	bls.n	8006670 <Time_Update+0xb8>
      time_DateShow = 0;
 800666a:	4b1d      	ldr	r3, [pc, #116]	@ (80066e0 <Time_Update+0x128>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
    if (time_SecBit)
 8006670:	4b1c      	ldr	r3, [pc, #112]	@ (80066e4 <Time_Update+0x12c>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <Time_Update+0xc8>
      time_SecBit = 0;
 8006678:	4b1a      	ldr	r3, [pc, #104]	@ (80066e4 <Time_Update+0x12c>)
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e002      	b.n	8006686 <Time_Update+0xce>
      time_SecBit = 1;
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <Time_Update+0x12c>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
    if (++time_Out > 90)
 8006686:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <Time_Update+0x130>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	3301      	adds	r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4b16      	ldr	r3, [pc, #88]	@ (80066e8 <Time_Update+0x130>)
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <Time_Update+0x130>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b5a      	cmp	r3, #90	@ 0x5a
 8006698:	d90f      	bls.n	80066ba <Time_Update+0x102>
      time_Out = 0;
 800669a:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <Time_Update+0x130>)
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
      if (work_Mode != MODE_NORMAL)
 80066a0:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <Time_Update+0x108>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b52      	cmp	r3, #82	@ 0x52
 80066a6:	d008      	beq.n	80066ba <Time_Update+0x102>
        DS3231_ReadTime(&hi2c2, &time_Hour, &time_Minute, &time_Second);
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <Time_Update+0x118>)
 80066aa:	4a0a      	ldr	r2, [pc, #40]	@ (80066d4 <Time_Update+0x11c>)
 80066ac:	490a      	ldr	r1, [pc, #40]	@ (80066d8 <Time_Update+0x120>)
 80066ae:	480f      	ldr	r0, [pc, #60]	@ (80066ec <Time_Update+0x134>)
 80066b0:	f7fd fd71 	bl	8004196 <DS3231_ReadTime>
        work_Mode = MODE_NORMAL;
 80066b4:	4b02      	ldr	r3, [pc, #8]	@ (80066c0 <Time_Update+0x108>)
 80066b6:	2252      	movs	r2, #82	@ 0x52
 80066b8:	701a      	strb	r2, [r3, #0]
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20000001 	.word	0x20000001
 80066c4:	200001ee 	.word	0x200001ee
 80066c8:	200001e9 	.word	0x200001e9
 80066cc:	200001e8 	.word	0x200001e8
 80066d0:	200001ae 	.word	0x200001ae
 80066d4:	200001ad 	.word	0x200001ad
 80066d8:	200001ac 	.word	0x200001ac
 80066dc:	200001b6 	.word	0x200001b6
 80066e0:	200001b7 	.word	0x200001b7
 80066e4:	200001af 	.word	0x200001af
 80066e8:	200001b0 	.word	0x200001b0
 80066ec:	20000158 	.word	0x20000158

080066f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066f4:	b672      	cpsid	i
}
 80066f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <Error_Handler+0x8>

080066fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <HAL_MspInit+0x5c>)
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4a14      	ldr	r2, [pc, #80]	@ (8006758 <HAL_MspInit+0x5c>)
 8006708:	f043 0301 	orr.w	r3, r3, #1
 800670c:	6193      	str	r3, [r2, #24]
 800670e:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <HAL_MspInit+0x5c>)
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	60bb      	str	r3, [r7, #8]
 8006718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800671a:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <HAL_MspInit+0x5c>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <HAL_MspInit+0x5c>)
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006724:	61d3      	str	r3, [r2, #28]
 8006726:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <HAL_MspInit+0x5c>)
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_MspInit+0x60>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	4a04      	ldr	r2, [pc, #16]	@ (800675c <HAL_MspInit+0x60>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	40021000 	.word	0x40021000
 800675c:	40010000 	.word	0x40010000

08006760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <NMI_Handler+0x4>

08006768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800676c:	bf00      	nop
 800676e:	e7fd      	b.n	800676c <HardFault_Handler+0x4>

08006770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <MemManage_Handler+0x4>

08006778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <BusFault_Handler+0x4>

08006780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <UsageFault_Handler+0x4>

08006788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067b0:	f000 f984 	bl	8006abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067b4:	bf00      	nop
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  Time_Update();
 80067bc:	f7ff fefc 	bl	80065b8 <Time_Update>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SQW_Pin);
 80067c0:	2002      	movs	r0, #2
 80067c2:	f001 f8a9 	bl	8007918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  IR_SetTimeArrayValues(__HAL_TIM_GET_COUNTER(&htim3));
 80067d0:	4b07      	ldr	r3, [pc, #28]	@ (80067f0 <EXTI3_IRQHandler+0x24>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fc f9d4 	bl	8002b84 <IR_SetTimeArrayValues>
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <EXTI3_IRQHandler+0x24>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2200      	movs	r2, #0
 80067e2:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 80067e4:	2008      	movs	r0, #8
 80067e6:	f001 f897 	bl	8007918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000238 	.word	0x20000238

080067f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  Segments_Scan();
 80067f8:	f7fc fbee 	bl	8002fd8 <Segments_Scan>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80067fc:	4802      	ldr	r0, [pc, #8]	@ (8006808 <TIM2_IRQHandler+0x14>)
 80067fe:	f002 ff31 	bl	8009664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200001f0 	.word	0x200001f0

0800680c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Ir_ResetRunning();
 8006810:	f7fc fa98 	bl	8002d44 <Ir_ResetRunning>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006814:	4802      	ldr	r0, [pc, #8]	@ (8006820 <TIM3_IRQHandler+0x14>)
 8006816:	f002 ff25 	bl	8009664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000238 	.word	0x20000238

08006824 <SystemInit>:
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006836:	f107 0308 	add.w	r3, r7, #8
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	605a      	str	r2, [r3, #4]
 8006840:	609a      	str	r2, [r3, #8]
 8006842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006844:	463b      	mov	r3, r7
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800684c:	4b1d      	ldr	r3, [pc, #116]	@ (80068c4 <MX_TIM2_Init+0x94>)
 800684e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8006854:	4b1b      	ldr	r3, [pc, #108]	@ (80068c4 <MX_TIM2_Init+0x94>)
 8006856:	2247      	movs	r2, #71	@ 0x47
 8006858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800685a:	4b1a      	ldr	r3, [pc, #104]	@ (80068c4 <MX_TIM2_Init+0x94>)
 800685c:	2260      	movs	r2, #96	@ 0x60
 800685e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8006860:	4b18      	ldr	r3, [pc, #96]	@ (80068c4 <MX_TIM2_Init+0x94>)
 8006862:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8006866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006868:	4b16      	ldr	r3, [pc, #88]	@ (80068c4 <MX_TIM2_Init+0x94>)
 800686a:	2200      	movs	r2, #0
 800686c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800686e:	4b15      	ldr	r3, [pc, #84]	@ (80068c4 <MX_TIM2_Init+0x94>)
 8006870:	2200      	movs	r2, #0
 8006872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006874:	4813      	ldr	r0, [pc, #76]	@ (80068c4 <MX_TIM2_Init+0x94>)
 8006876:	f002 fe53 	bl	8009520 <HAL_TIM_Base_Init>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006880:	f7ff ff36 	bl	80066f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	4619      	mov	r1, r3
 8006890:	480c      	ldr	r0, [pc, #48]	@ (80068c4 <MX_TIM2_Init+0x94>)
 8006892:	f002 ffd7 	bl	8009844 <HAL_TIM_ConfigClockSource>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800689c:	f7ff ff28 	bl	80066f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80068a8:	463b      	mov	r3, r7
 80068aa:	4619      	mov	r1, r3
 80068ac:	4805      	ldr	r0, [pc, #20]	@ (80068c4 <MX_TIM2_Init+0x94>)
 80068ae:	f003 f9c1 	bl	8009c34 <HAL_TIMEx_MasterConfigSynchronization>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80068b8:	f7ff ff1a 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80068bc:	bf00      	nop
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	200001f0 	.word	0x200001f0

080068c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068ce:	f107 0308 	add.w	r3, r7, #8
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	609a      	str	r2, [r3, #8]
 80068da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068dc:	463b      	mov	r3, r7
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80068e4:	4b1d      	ldr	r3, [pc, #116]	@ (800695c <MX_TIM3_Init+0x94>)
 80068e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006960 <MX_TIM3_Init+0x98>)
 80068e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80068ea:	4b1c      	ldr	r3, [pc, #112]	@ (800695c <MX_TIM3_Init+0x94>)
 80068ec:	2247      	movs	r2, #71	@ 0x47
 80068ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068f0:	4b1a      	ldr	r3, [pc, #104]	@ (800695c <MX_TIM3_Init+0x94>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80068f6:	4b19      	ldr	r3, [pc, #100]	@ (800695c <MX_TIM3_Init+0x94>)
 80068f8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80068fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068fe:	4b17      	ldr	r3, [pc, #92]	@ (800695c <MX_TIM3_Init+0x94>)
 8006900:	2200      	movs	r2, #0
 8006902:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006904:	4b15      	ldr	r3, [pc, #84]	@ (800695c <MX_TIM3_Init+0x94>)
 8006906:	2200      	movs	r2, #0
 8006908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800690a:	4814      	ldr	r0, [pc, #80]	@ (800695c <MX_TIM3_Init+0x94>)
 800690c:	f002 fe08 	bl	8009520 <HAL_TIM_Base_Init>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006916:	f7ff feeb 	bl	80066f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800691a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800691e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	4619      	mov	r1, r3
 8006926:	480d      	ldr	r0, [pc, #52]	@ (800695c <MX_TIM3_Init+0x94>)
 8006928:	f002 ff8c 	bl	8009844 <HAL_TIM_ConfigClockSource>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006932:	f7ff fedd 	bl	80066f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800693e:	463b      	mov	r3, r7
 8006940:	4619      	mov	r1, r3
 8006942:	4806      	ldr	r0, [pc, #24]	@ (800695c <MX_TIM3_Init+0x94>)
 8006944:	f003 f976 	bl	8009c34 <HAL_TIMEx_MasterConfigSynchronization>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800694e:	f7ff fecf 	bl	80066f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006952:	bf00      	nop
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000238 	.word	0x20000238
 8006960:	40000400 	.word	0x40000400

08006964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006974:	d114      	bne.n	80069a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006976:	4b19      	ldr	r3, [pc, #100]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	61d3      	str	r3, [r2, #28]
 8006982:	4b16      	ldr	r3, [pc, #88]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	201c      	movs	r0, #28
 8006994:	f000 fdd5 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006998:	201c      	movs	r0, #28
 800699a:	f000 fdee 	bl	800757a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800699e:	e018      	b.n	80069d2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a0e      	ldr	r2, [pc, #56]	@ (80069e0 <HAL_TIM_Base_MspInit+0x7c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d113      	bne.n	80069d2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069aa:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4a0b      	ldr	r2, [pc, #44]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	61d3      	str	r3, [r2, #28]
 80069b6:	4b09      	ldr	r3, [pc, #36]	@ (80069dc <HAL_TIM_Base_MspInit+0x78>)
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	201d      	movs	r0, #29
 80069c8:	f000 fdbb 	bl	8007542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80069cc:	201d      	movs	r0, #29
 80069ce:	f000 fdd4 	bl	800757a <HAL_NVIC_EnableIRQ>
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40000400 	.word	0x40000400

080069e4 <Reset_Handler>:
 80069e4:	f7ff ff1e 	bl	8006824 <SystemInit>
 80069e8:	480b      	ldr	r0, [pc, #44]	@ (8006a18 <LoopFillZerobss+0xe>)
 80069ea:	490c      	ldr	r1, [pc, #48]	@ (8006a1c <LoopFillZerobss+0x12>)
 80069ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006a20 <LoopFillZerobss+0x16>)
 80069ee:	2300      	movs	r3, #0
 80069f0:	e002      	b.n	80069f8 <LoopCopyDataInit>

080069f2 <CopyDataInit>:
 80069f2:	58d4      	ldr	r4, [r2, r3]
 80069f4:	50c4      	str	r4, [r0, r3]
 80069f6:	3304      	adds	r3, #4

080069f8 <LoopCopyDataInit>:
 80069f8:	18c4      	adds	r4, r0, r3
 80069fa:	428c      	cmp	r4, r1
 80069fc:	d3f9      	bcc.n	80069f2 <CopyDataInit>
 80069fe:	4a09      	ldr	r2, [pc, #36]	@ (8006a24 <LoopFillZerobss+0x1a>)
 8006a00:	4c09      	ldr	r4, [pc, #36]	@ (8006a28 <LoopFillZerobss+0x1e>)
 8006a02:	2300      	movs	r3, #0
 8006a04:	e001      	b.n	8006a0a <LoopFillZerobss>

08006a06 <FillZerobss>:
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	3204      	adds	r2, #4

08006a0a <LoopFillZerobss>:
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	d3fb      	bcc.n	8006a06 <FillZerobss>
 8006a0e:	f003 f98f 	bl	8009d30 <__libc_init_array>
 8006a12:	f7fd fbf1 	bl	80041f8 <main>
 8006a16:	4770      	bx	lr
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	20000074 	.word	0x20000074
 8006a20:	0800a1ac 	.word	0x0800a1ac
 8006a24:	20000074 	.word	0x20000074
 8006a28:	200003bc 	.word	0x200003bc

08006a2c <ADC1_2_IRQHandler>:
 8006a2c:	e7fe      	b.n	8006a2c <ADC1_2_IRQHandler>
	...

08006a30 <HAL_Init>:
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <HAL_Init+0x28>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <HAL_Init+0x28>)
 8006a3a:	f043 0310 	orr.w	r3, r3, #16
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	2003      	movs	r0, #3
 8006a42:	f000 fd73 	bl	800752c <HAL_NVIC_SetPriorityGrouping>
 8006a46:	200f      	movs	r0, #15
 8006a48:	f000 f808 	bl	8006a5c <HAL_InitTick>
 8006a4c:	f7ff fe56 	bl	80066fc <HAL_MspInit>
 8006a50:	2300      	movs	r3, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40022000 	.word	0x40022000

08006a5c <HAL_InitTick>:
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	4b12      	ldr	r3, [pc, #72]	@ (8006ab0 <HAL_InitTick+0x54>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_InitTick+0x58>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fd8b 	bl	8007596 <HAL_SYSTICK_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_InitTick+0x2e>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e00e      	b.n	8006aa8 <HAL_InitTick+0x4c>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b0f      	cmp	r3, #15
 8006a8e:	d80a      	bhi.n	8006aa6 <HAL_InitTick+0x4a>
 8006a90:	2200      	movs	r2, #0
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	f000 fd53 	bl	8007542 <HAL_NVIC_SetPriority>
 8006a9c:	4a06      	ldr	r2, [pc, #24]	@ (8006ab8 <HAL_InitTick+0x5c>)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e000      	b.n	8006aa8 <HAL_InitTick+0x4c>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000018 	.word	0x20000018
 8006ab4:	20000020 	.word	0x20000020
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <HAL_IncTick>:
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <HAL_IncTick+0x1c>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <HAL_IncTick+0x20>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4413      	add	r3, r2
 8006acc:	4a03      	ldr	r2, [pc, #12]	@ (8006adc <HAL_IncTick+0x20>)
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr
 8006ad8:	20000020 	.word	0x20000020
 8006adc:	20000280 	.word	0x20000280

08006ae0 <HAL_GetTick>:
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	4b02      	ldr	r3, [pc, #8]	@ (8006af0 <HAL_GetTick+0x10>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr
 8006af0:	20000280 	.word	0x20000280

08006af4 <HAL_Delay>:
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	f7ff fff0 	bl	8006ae0 <HAL_GetTick>
 8006b00:	60b8      	str	r0, [r7, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d005      	beq.n	8006b1a <HAL_Delay+0x26>
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <HAL_Delay+0x44>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	bf00      	nop
 8006b1c:	f7ff ffe0 	bl	8006ae0 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d8f7      	bhi.n	8006b1c <HAL_Delay+0x28>
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000020 	.word	0x20000020

08006b3c <HAL_ADC_Init>:
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_ADC_Init+0x22>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e0be      	b.n	8006cdc <HAL_ADC_Init+0x1a0>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <HAL_ADC_Init+0x44>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fd f91a 	bl	8003db4 <HAL_ADC_MspInit>
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fbc5 	bl	8007310 <ADC_ConversionStop_Disable>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f040 8099 	bne.w	8006cca <HAL_ADC_Init+0x18e>
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 8095 	bne.w	8006cca <HAL_ADC_Init+0x18e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006ba8:	f023 0302 	bic.w	r3, r3, #2
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	7b1b      	ldrb	r3, [r3, #12]
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd4:	d003      	beq.n	8006bde <HAL_ADC_Init+0xa2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d102      	bne.n	8006be4 <HAL_ADC_Init+0xa8>
 8006bde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006be2:	e000      	b.n	8006be6 <HAL_ADC_Init+0xaa>
 8006be4:	2300      	movs	r3, #0
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	7d1b      	ldrb	r3, [r3, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d119      	bne.n	8006c28 <HAL_ADC_Init+0xec>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7b1b      	ldrb	r3, [r3, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d109      	bne.n	8006c10 <HAL_ADC_Init+0xd4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	035a      	lsls	r2, r3, #13
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	e00b      	b.n	8006c28 <HAL_ADC_Init+0xec>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c14:	f043 0220 	orr.w	r2, r3, #32
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	f043 0201 	orr.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	4b28      	ldr	r3, [pc, #160]	@ (8006ce4 <HAL_ADC_Init+0x1a8>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6093      	str	r3, [r2, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c58:	d003      	beq.n	8006c62 <HAL_ADC_Init+0x126>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d104      	bne.n	8006c6c <HAL_ADC_Init+0x130>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	051b      	lsls	r3, r3, #20
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	4b18      	ldr	r3, [pc, #96]	@ (8006ce8 <HAL_ADC_Init+0x1ac>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d10b      	bne.n	8006ca8 <HAL_ADC_Init+0x16c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	f043 0201 	orr.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ca6:	e018      	b.n	8006cda <HAL_ADC_Init+0x19e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	f023 0312 	bic.w	r3, r3, #18
 8006cb0:	f043 0210 	orr.w	r2, r3, #16
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	e007      	b.n	8006cda <HAL_ADC_Init+0x19e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	f043 0210 	orr.w	r2, r3, #16
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	ffe1f7fd 	.word	0xffe1f7fd
 8006ce8:	ff1f0efe 	.word	0xff1f0efe

08006cec <HAL_ADC_Start>:
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_ADC_Start+0x1a>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e098      	b.n	8006e38 <HAL_ADC_Start+0x14c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 faa4 	bl	800725c <ADC_Enable>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f040 8087 	bne.w	8006e2e <HAL_ADC_Start+0x142>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a41      	ldr	r2, [pc, #260]	@ (8006e40 <HAL_ADC_Start+0x154>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d105      	bne.n	8006d4a <HAL_ADC_Start+0x5e>
 8006d3e:	4b41      	ldr	r3, [pc, #260]	@ (8006e44 <HAL_ADC_Start+0x158>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d115      	bne.n	8006d76 <HAL_ADC_Start+0x8a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d026      	beq.n	8006db2 <HAL_ADC_Start+0xc6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006d6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d74:	e01d      	b.n	8006db2 <HAL_ADC_Start+0xc6>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2f      	ldr	r2, [pc, #188]	@ (8006e44 <HAL_ADC_Start+0x158>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_ADC_Start+0xaa>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2b      	ldr	r2, [pc, #172]	@ (8006e40 <HAL_ADC_Start+0x154>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10d      	bne.n	8006db2 <HAL_ADC_Start+0xc6>
 8006d96:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <HAL_ADC_Start+0x158>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <HAL_ADC_Start+0xc6>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006daa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	629a      	str	r2, [r3, #40]	@ 0x28
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <HAL_ADC_Start+0xe0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	f023 0206 	bic.w	r2, r3, #6
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dca:	e002      	b.n	8006dd2 <HAL_ADC_Start+0xe6>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f06f 0202 	mvn.w	r2, #2
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006dee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8006df2:	d113      	bne.n	8006e1c <HAL_ADC_Start+0x130>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a11      	ldr	r2, [pc, #68]	@ (8006e40 <HAL_ADC_Start+0x154>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d105      	bne.n	8006e0a <HAL_ADC_Start+0x11e>
 8006dfe:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <HAL_ADC_Start+0x158>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d108      	bne.n	8006e1c <HAL_ADC_Start+0x130>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8006e18:	609a      	str	r2, [r3, #8]
 8006e1a:	e00c      	b.n	8006e36 <HAL_ADC_Start+0x14a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	e003      	b.n	8006e36 <HAL_ADC_Start+0x14a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40012800 	.word	0x40012800
 8006e44:	40012400 	.word	0x40012400

08006e48 <HAL_ADC_PollForConversion>:
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	f7ff fe3f 	bl	8006ae0 <HAL_GetTick>
 8006e62:	6178      	str	r0, [r7, #20]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00b      	beq.n	8006e8a <HAL_ADC_PollForConversion+0x42>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e86:	2301      	movs	r3, #1
 8006e88:	e0d3      	b.n	8007032 <HAL_ADC_PollForConversion+0x1ea>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d131      	bne.n	8006efc <HAL_ADC_PollForConversion+0xb4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d12a      	bne.n	8006efc <HAL_ADC_PollForConversion+0xb4>
 8006ea6:	e021      	b.n	8006eec <HAL_ADC_PollForConversion+0xa4>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d01d      	beq.n	8006eec <HAL_ADC_PollForConversion+0xa4>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <HAL_ADC_PollForConversion+0x7e>
 8006eb6:	f7ff fe13 	bl	8006ae0 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d212      	bcs.n	8006eec <HAL_ADC_PollForConversion+0xa4>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <HAL_ADC_PollForConversion+0xa4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	f043 0204 	orr.w	r2, r3, #4
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e0a2      	b.n	8007032 <HAL_ADC_PollForConversion+0x1ea>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0d6      	beq.n	8006ea8 <HAL_ADC_PollForConversion+0x60>
 8006efa:	e070      	b.n	8006fde <HAL_ADC_PollForConversion+0x196>
 8006efc:	4b4f      	ldr	r3, [pc, #316]	@ (800703c <HAL_ADC_PollForConversion+0x1f4>)
 8006efe:	681c      	ldr	r4, [r3, #0]
 8006f00:	2002      	movs	r0, #2
 8006f02:	f002 fa57 	bl	80093b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f06:	4603      	mov	r3, r0
 8006f08:	fbb4 f2f3 	udiv	r2, r4, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6919      	ldr	r1, [r3, #16]
 8006f12:	4b4b      	ldr	r3, [pc, #300]	@ (8007040 <HAL_ADC_PollForConversion+0x1f8>)
 8006f14:	400b      	ands	r3, r1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d118      	bne.n	8006f4c <HAL_ADC_PollForConversion+0x104>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68d9      	ldr	r1, [r3, #12]
 8006f20:	4b48      	ldr	r3, [pc, #288]	@ (8007044 <HAL_ADC_PollForConversion+0x1fc>)
 8006f22:	400b      	ands	r3, r1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d111      	bne.n	8006f4c <HAL_ADC_PollForConversion+0x104>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6919      	ldr	r1, [r3, #16]
 8006f2e:	4b46      	ldr	r3, [pc, #280]	@ (8007048 <HAL_ADC_PollForConversion+0x200>)
 8006f30:	400b      	ands	r3, r1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <HAL_ADC_PollForConversion+0x100>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68d9      	ldr	r1, [r3, #12]
 8006f3c:	4b43      	ldr	r3, [pc, #268]	@ (800704c <HAL_ADC_PollForConversion+0x204>)
 8006f3e:	400b      	ands	r3, r1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <HAL_ADC_PollForConversion+0x100>
 8006f44:	2314      	movs	r3, #20
 8006f46:	e020      	b.n	8006f8a <HAL_ADC_PollForConversion+0x142>
 8006f48:	2329      	movs	r3, #41	@ 0x29
 8006f4a:	e01e      	b.n	8006f8a <HAL_ADC_PollForConversion+0x142>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6919      	ldr	r1, [r3, #16]
 8006f52:	4b3d      	ldr	r3, [pc, #244]	@ (8007048 <HAL_ADC_PollForConversion+0x200>)
 8006f54:	400b      	ands	r3, r1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_ADC_PollForConversion+0x120>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68d9      	ldr	r1, [r3, #12]
 8006f60:	4b3a      	ldr	r3, [pc, #232]	@ (800704c <HAL_ADC_PollForConversion+0x204>)
 8006f62:	400b      	ands	r3, r1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00d      	beq.n	8006f84 <HAL_ADC_PollForConversion+0x13c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6919      	ldr	r1, [r3, #16]
 8006f6e:	4b38      	ldr	r3, [pc, #224]	@ (8007050 <HAL_ADC_PollForConversion+0x208>)
 8006f70:	400b      	ands	r3, r1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d108      	bne.n	8006f88 <HAL_ADC_PollForConversion+0x140>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68d9      	ldr	r1, [r3, #12]
 8006f7c:	4b34      	ldr	r3, [pc, #208]	@ (8007050 <HAL_ADC_PollForConversion+0x208>)
 8006f7e:	400b      	ands	r3, r1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_ADC_PollForConversion+0x140>
 8006f84:	2354      	movs	r3, #84	@ 0x54
 8006f86:	e000      	b.n	8006f8a <HAL_ADC_PollForConversion+0x142>
 8006f88:	23fc      	movs	r3, #252	@ 0xfc
 8006f8a:	fb02 f303 	mul.w	r3, r2, r3
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	e021      	b.n	8006fd6 <HAL_ADC_PollForConversion+0x18e>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d01a      	beq.n	8006fd0 <HAL_ADC_PollForConversion+0x188>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_ADC_PollForConversion+0x168>
 8006fa0:	f7ff fd9e 	bl	8006ae0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d20f      	bcs.n	8006fd0 <HAL_ADC_PollForConversion+0x188>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d90b      	bls.n	8006fd0 <HAL_ADC_PollForConversion+0x188>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	f043 0204 	orr.w	r2, r3, #4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e030      	b.n	8007032 <HAL_ADC_PollForConversion+0x1ea>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d8d9      	bhi.n	8006f92 <HAL_ADC_PollForConversion+0x14a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f06f 0212 	mvn.w	r2, #18
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006ffe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8007002:	d115      	bne.n	8007030 <HAL_ADC_PollForConversion+0x1e8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7b1b      	ldrb	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d111      	bne.n	8007030 <HAL_ADC_PollForConversion+0x1e8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	@ 0x28
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_ADC_PollForConversion+0x1e8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	f043 0201 	orr.w	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007030:	2300      	movs	r3, #0
 8007032:	4618      	mov	r0, r3
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	bd90      	pop	{r4, r7, pc}
 800703a:	bf00      	nop
 800703c:	20000018 	.word	0x20000018
 8007040:	24924924 	.word	0x24924924
 8007044:	00924924 	.word	0x00924924
 8007048:	12492492 	.word	0x12492492
 800704c:	00492492 	.word	0x00492492
 8007050:	00249249 	.word	0x00249249

08007054 <HAL_ADC_GetValue>:
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <HAL_ADC_ConfigChannel>:
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
 800707a:	2300      	movs	r3, #0
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_ADC_ConfigChannel+0x20>
 8007088:	2302      	movs	r3, #2
 800708a:	e0dc      	b.n	8007246 <HAL_ADC_ConfigChannel+0x1da>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b06      	cmp	r3, #6
 800709a:	d81c      	bhi.n	80070d6 <HAL_ADC_ConfigChannel+0x6a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	3b05      	subs	r3, #5
 80070ae:	221f      	movs	r2, #31
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	4019      	ands	r1, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	3b05      	subs	r3, #5
 80070c8:	fa00 f203 	lsl.w	r2, r0, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80070d4:	e03c      	b.n	8007150 <HAL_ADC_ConfigChannel+0xe4>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d81c      	bhi.n	8007118 <HAL_ADC_ConfigChannel+0xac>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	3b23      	subs	r3, #35	@ 0x23
 80070f0:	221f      	movs	r2, #31
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43db      	mvns	r3, r3
 80070f8:	4019      	ands	r1, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	3b23      	subs	r3, #35	@ 0x23
 800710a:	fa00 f203 	lsl.w	r2, r0, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30
 8007116:	e01b      	b.n	8007150 <HAL_ADC_ConfigChannel+0xe4>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	3b41      	subs	r3, #65	@ 0x41
 800712a:	221f      	movs	r2, #31
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	43db      	mvns	r3, r3
 8007132:	4019      	ands	r1, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	3b41      	subs	r3, #65	@ 0x41
 8007144:	fa00 f203 	lsl.w	r2, r0, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b09      	cmp	r3, #9
 8007156:	d91c      	bls.n	8007192 <HAL_ADC_ConfigChannel+0x126>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68d9      	ldr	r1, [r3, #12]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4613      	mov	r3, r2
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4413      	add	r3, r2
 8007168:	3b1e      	subs	r3, #30
 800716a:	2207      	movs	r2, #7
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	4019      	ands	r1, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	6898      	ldr	r0, [r3, #8]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	3b1e      	subs	r3, #30
 8007184:	fa00 f203 	lsl.w	r2, r0, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	e019      	b.n	80071c6 <HAL_ADC_ConfigChannel+0x15a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6919      	ldr	r1, [r3, #16]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	4413      	add	r3, r2
 80071a2:	2207      	movs	r2, #7
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	43db      	mvns	r3, r3
 80071aa:	4019      	ands	r1, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6898      	ldr	r0, [r3, #8]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	fa00 f203 	lsl.w	r2, r0, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	611a      	str	r2, [r3, #16]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d003      	beq.n	80071d6 <HAL_ADC_ConfigChannel+0x16a>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b11      	cmp	r3, #17
 80071d4:	d132      	bne.n	800723c <HAL_ADC_ConfigChannel+0x1d0>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1d      	ldr	r2, [pc, #116]	@ (8007250 <HAL_ADC_ConfigChannel+0x1e4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d125      	bne.n	800722c <HAL_ADC_ConfigChannel+0x1c0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d126      	bne.n	800723c <HAL_ADC_ConfigChannel+0x1d0>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80071fc:	609a      	str	r2, [r3, #8]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b10      	cmp	r3, #16
 8007204:	d11a      	bne.n	800723c <HAL_ADC_ConfigChannel+0x1d0>
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <HAL_ADC_ConfigChannel+0x1e8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a13      	ldr	r2, [pc, #76]	@ (8007258 <HAL_ADC_ConfigChannel+0x1ec>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	0c9a      	lsrs	r2, r3, #18
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	e002      	b.n	8007224 <HAL_ADC_ConfigChannel+0x1b8>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	3b01      	subs	r3, #1
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1f9      	bne.n	800721e <HAL_ADC_ConfigChannel+0x1b2>
 800722a:	e007      	b.n	800723c <HAL_ADC_ConfigChannel+0x1d0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	f043 0220 	orr.w	r2, r3, #32
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	@ 0x28
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4618      	mov	r0, r3
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	40012400 	.word	0x40012400
 8007254:	20000018 	.word	0x20000018
 8007258:	431bde83 	.word	0x431bde83

0800725c <ADC_Enable>:
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b01      	cmp	r3, #1
 8007278:	d040      	beq.n	80072fc <ADC_Enable+0xa0>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	609a      	str	r2, [r3, #8]
 800728a:	4b1f      	ldr	r3, [pc, #124]	@ (8007308 <ADC_Enable+0xac>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1f      	ldr	r2, [pc, #124]	@ (800730c <ADC_Enable+0xb0>)
 8007290:	fba2 2303 	umull	r2, r3, r2, r3
 8007294:	0c9b      	lsrs	r3, r3, #18
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	e002      	b.n	80072a0 <ADC_Enable+0x44>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	3b01      	subs	r3, #1
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f9      	bne.n	800729a <ADC_Enable+0x3e>
 80072a6:	f7ff fc1b 	bl	8006ae0 <HAL_GetTick>
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	e01f      	b.n	80072ee <ADC_Enable+0x92>
 80072ae:	f7ff fc17 	bl	8006ae0 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d918      	bls.n	80072ee <ADC_Enable+0x92>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d011      	beq.n	80072ee <ADC_Enable+0x92>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	f043 0210 	orr.w	r2, r3, #16
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	f043 0201 	orr.w	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80072ea:	2301      	movs	r3, #1
 80072ec:	e007      	b.n	80072fe <ADC_Enable+0xa2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d1d8      	bne.n	80072ae <ADC_Enable+0x52>
 80072fc:	2300      	movs	r3, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000018 	.word	0x20000018
 800730c:	431bde83 	.word	0x431bde83

08007310 <ADC_ConversionStop_Disable>:
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b01      	cmp	r3, #1
 8007328:	d12e      	bne.n	8007388 <ADC_ConversionStop_Disable+0x78>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0201 	bic.w	r2, r2, #1
 8007338:	609a      	str	r2, [r3, #8]
 800733a:	f7ff fbd1 	bl	8006ae0 <HAL_GetTick>
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	e01b      	b.n	800737a <ADC_ConversionStop_Disable+0x6a>
 8007342:	f7ff fbcd 	bl	8006ae0 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d914      	bls.n	800737a <ADC_ConversionStop_Disable+0x6a>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10d      	bne.n	800737a <ADC_ConversionStop_Disable+0x6a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	f043 0210 	orr.w	r2, r3, #16
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	629a      	str	r2, [r3, #40]	@ 0x28
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	f043 0201 	orr.w	r2, r3, #1
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007376:	2301      	movs	r3, #1
 8007378:	e007      	b.n	800738a <ADC_ConversionStop_Disable+0x7a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b01      	cmp	r3, #1
 8007386:	d0dc      	beq.n	8007342 <ADC_ConversionStop_Disable+0x32>
 8007388:	2300      	movs	r3, #0
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <__NVIC_SetPriorityGrouping>:
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <__NVIC_SetPriorityGrouping+0x44>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80073b0:	4013      	ands	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	021a      	lsls	r2, r3, #8
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80073c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	4a04      	ldr	r2, [pc, #16]	@ (80073d8 <__NVIC_SetPriorityGrouping+0x44>)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	60d3      	str	r3, [r2, #12]
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	e000ed00 	.word	0xe000ed00

080073dc <__NVIC_GetPriorityGrouping>:
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
 80073e0:	4b04      	ldr	r3, [pc, #16]	@ (80073f4 <__NVIC_GetPriorityGrouping+0x18>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	4618      	mov	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	e000ed00 	.word	0xe000ed00

080073f8 <__NVIC_EnableIRQ>:
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
 8007402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007406:	2b00      	cmp	r3, #0
 8007408:	db0b      	blt.n	8007422 <__NVIC_EnableIRQ+0x2a>
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	f003 021f 	and.w	r2, r3, #31
 8007410:	4906      	ldr	r1, [pc, #24]	@ (800742c <__NVIC_EnableIRQ+0x34>)
 8007412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	2001      	movs	r0, #1
 800741a:	fa00 f202 	lsl.w	r2, r0, r2
 800741e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr
 800742c:	e000e100 	.word	0xe000e100

08007430 <__NVIC_SetPriority>:
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007440:	2b00      	cmp	r3, #0
 8007442:	db0a      	blt.n	800745a <__NVIC_SetPriority+0x2a>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	b2da      	uxtb	r2, r3
 8007448:	490c      	ldr	r1, [pc, #48]	@ (800747c <__NVIC_SetPriority+0x4c>)
 800744a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744e:	0112      	lsls	r2, r2, #4
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	440b      	add	r3, r1
 8007454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8007458:	e00a      	b.n	8007470 <__NVIC_SetPriority+0x40>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4908      	ldr	r1, [pc, #32]	@ (8007480 <__NVIC_SetPriority+0x50>)
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	3b04      	subs	r3, #4
 8007468:	0112      	lsls	r2, r2, #4
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	440b      	add	r3, r1
 800746e:	761a      	strb	r2, [r3, #24]
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000e100 	.word	0xe000e100
 8007480:	e000ed00 	.word	0xe000ed00

08007484 <NVIC_EncodePriority>:
 8007484:	b480      	push	{r7}
 8007486:	b089      	sub	sp, #36	@ 0x24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f1c3 0307 	rsb	r3, r3, #7
 800749e:	2b04      	cmp	r3, #4
 80074a0:	bf28      	it	cs
 80074a2:	2304      	movcs	r3, #4
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3304      	adds	r3, #4
 80074aa:	2b06      	cmp	r3, #6
 80074ac:	d902      	bls.n	80074b4 <NVIC_EncodePriority+0x30>
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	3b03      	subs	r3, #3
 80074b2:	e000      	b.n	80074b6 <NVIC_EncodePriority+0x32>
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	fa02 f303 	lsl.w	r3, r2, r3
 80074c2:	43da      	mvns	r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	401a      	ands	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	409a      	lsls	r2, r3
 80074cc:	f04f 31ff 	mov.w	r1, #4294967295
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	43d9      	mvns	r1, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	400b      	ands	r3, r1
 80074dc:	4313      	orrs	r3, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	3724      	adds	r7, #36	@ 0x24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <SysTick_Config>:
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074f8:	d301      	bcc.n	80074fe <SysTick_Config+0x16>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e00f      	b.n	800751e <SysTick_Config+0x36>
 80074fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007528 <SysTick_Config+0x40>)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3b01      	subs	r3, #1
 8007504:	6053      	str	r3, [r2, #4]
 8007506:	210f      	movs	r1, #15
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	f7ff ff90 	bl	8007430 <__NVIC_SetPriority>
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <SysTick_Config+0x40>)
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
 8007516:	4b04      	ldr	r3, [pc, #16]	@ (8007528 <SysTick_Config+0x40>)
 8007518:	2207      	movs	r2, #7
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	2300      	movs	r3, #0
 800751e:	4618      	mov	r0, r3
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	e000e010 	.word	0xe000e010

0800752c <HAL_NVIC_SetPriorityGrouping>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ff2d 	bl	8007394 <__NVIC_SetPriorityGrouping>
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_NVIC_SetPriority>:
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	4603      	mov	r3, r0
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	f7ff ff42 	bl	80073dc <__NVIC_GetPriorityGrouping>
 8007558:	6178      	str	r0, [r7, #20]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	6978      	ldr	r0, [r7, #20]
 8007560:	f7ff ff90 	bl	8007484 <NVIC_EncodePriority>
 8007564:	4602      	mov	r2, r0
 8007566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff5f 	bl	8007430 <__NVIC_SetPriority>
 8007572:	bf00      	nop
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_NVIC_EnableIRQ>:
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	4603      	mov	r3, r0
 8007582:	71fb      	strb	r3, [r7, #7]
 8007584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007588:	4618      	mov	r0, r3
 800758a:	f7ff ff35 	bl	80073f8 <__NVIC_EnableIRQ>
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_SYSTICK_Config>:
 8007596:	b580      	push	{r7, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff ffa2 	bl	80074e8 <SysTick_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <HAL_GPIO_Init>:
 80075b0:	b480      	push	{r7}
 80075b2:	b08b      	sub	sp, #44	@ 0x2c
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075be:	2300      	movs	r3, #0
 80075c0:	623b      	str	r3, [r7, #32]
 80075c2:	e169      	b.n	8007898 <HAL_GPIO_Init+0x2e8>
 80075c4:	2201      	movs	r2, #1
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	4013      	ands	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	429a      	cmp	r2, r3
 80075de:	f040 8158 	bne.w	8007892 <HAL_GPIO_Init+0x2e2>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4a9a      	ldr	r2, [pc, #616]	@ (8007850 <HAL_GPIO_Init+0x2a0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d05e      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 80075ec:	4a98      	ldr	r2, [pc, #608]	@ (8007850 <HAL_GPIO_Init+0x2a0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d875      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 80075f2:	4a98      	ldr	r2, [pc, #608]	@ (8007854 <HAL_GPIO_Init+0x2a4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d058      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 80075f8:	4a96      	ldr	r2, [pc, #600]	@ (8007854 <HAL_GPIO_Init+0x2a4>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d86f      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 80075fe:	4a96      	ldr	r2, [pc, #600]	@ (8007858 <HAL_GPIO_Init+0x2a8>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d052      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 8007604:	4a94      	ldr	r2, [pc, #592]	@ (8007858 <HAL_GPIO_Init+0x2a8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d869      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 800760a:	4a94      	ldr	r2, [pc, #592]	@ (800785c <HAL_GPIO_Init+0x2ac>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d04c      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 8007610:	4a92      	ldr	r2, [pc, #584]	@ (800785c <HAL_GPIO_Init+0x2ac>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d863      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 8007616:	4a92      	ldr	r2, [pc, #584]	@ (8007860 <HAL_GPIO_Init+0x2b0>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d046      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 800761c:	4a90      	ldr	r2, [pc, #576]	@ (8007860 <HAL_GPIO_Init+0x2b0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d85d      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 8007622:	2b12      	cmp	r3, #18
 8007624:	d82a      	bhi.n	800767c <HAL_GPIO_Init+0xcc>
 8007626:	2b12      	cmp	r3, #18
 8007628:	d859      	bhi.n	80076de <HAL_GPIO_Init+0x12e>
 800762a:	a201      	add	r2, pc, #4	@ (adr r2, 8007630 <HAL_GPIO_Init+0x80>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076ab 	.word	0x080076ab
 8007634:	08007685 	.word	0x08007685
 8007638:	08007697 	.word	0x08007697
 800763c:	080076d9 	.word	0x080076d9
 8007640:	080076df 	.word	0x080076df
 8007644:	080076df 	.word	0x080076df
 8007648:	080076df 	.word	0x080076df
 800764c:	080076df 	.word	0x080076df
 8007650:	080076df 	.word	0x080076df
 8007654:	080076df 	.word	0x080076df
 8007658:	080076df 	.word	0x080076df
 800765c:	080076df 	.word	0x080076df
 8007660:	080076df 	.word	0x080076df
 8007664:	080076df 	.word	0x080076df
 8007668:	080076df 	.word	0x080076df
 800766c:	080076df 	.word	0x080076df
 8007670:	080076df 	.word	0x080076df
 8007674:	0800768d 	.word	0x0800768d
 8007678:	080076a1 	.word	0x080076a1
 800767c:	4a79      	ldr	r2, [pc, #484]	@ (8007864 <HAL_GPIO_Init+0x2b4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <HAL_GPIO_Init+0xfa>
 8007682:	e02c      	b.n	80076de <HAL_GPIO_Init+0x12e>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	623b      	str	r3, [r7, #32]
 800768a:	e029      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	3304      	adds	r3, #4
 8007692:	623b      	str	r3, [r7, #32]
 8007694:	e024      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	3308      	adds	r3, #8
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	e01f      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	330c      	adds	r3, #12
 80076a6:	623b      	str	r3, [r7, #32]
 80076a8:	e01a      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <HAL_GPIO_Init+0x108>
 80076b2:	2304      	movs	r3, #4
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	e013      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d105      	bne.n	80076cc <HAL_GPIO_Init+0x11c>
 80076c0:	2308      	movs	r3, #8
 80076c2:	623b      	str	r3, [r7, #32]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	611a      	str	r2, [r3, #16]
 80076ca:	e009      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076cc:	2308      	movs	r3, #8
 80076ce:	623b      	str	r3, [r7, #32]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	615a      	str	r2, [r3, #20]
 80076d6:	e003      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076d8:	2300      	movs	r3, #0
 80076da:	623b      	str	r3, [r7, #32]
 80076dc:	e000      	b.n	80076e0 <HAL_GPIO_Init+0x130>
 80076de:	bf00      	nop
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2bff      	cmp	r3, #255	@ 0xff
 80076e4:	d801      	bhi.n	80076ea <HAL_GPIO_Init+0x13a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	e001      	b.n	80076ee <HAL_GPIO_Init+0x13e>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2bff      	cmp	r3, #255	@ 0xff
 80076f4:	d802      	bhi.n	80076fc <HAL_GPIO_Init+0x14c>
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	e002      	b.n	8007702 <HAL_GPIO_Init+0x152>
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	3b08      	subs	r3, #8
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	210f      	movs	r1, #15
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	fa01 f303 	lsl.w	r3, r1, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	6a39      	ldr	r1, [r7, #32]
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	431a      	orrs	r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80b1 	beq.w	8007892 <HAL_GPIO_Init+0x2e2>
 8007730:	4b4d      	ldr	r3, [pc, #308]	@ (8007868 <HAL_GPIO_Init+0x2b8>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	4a4c      	ldr	r2, [pc, #304]	@ (8007868 <HAL_GPIO_Init+0x2b8>)
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	6193      	str	r3, [r2, #24]
 800773c:	4b4a      	ldr	r3, [pc, #296]	@ (8007868 <HAL_GPIO_Init+0x2b8>)
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	60bb      	str	r3, [r7, #8]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	4a48      	ldr	r2, [pc, #288]	@ (800786c <HAL_GPIO_Init+0x2bc>)
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	3302      	adds	r3, #2
 8007750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	220f      	movs	r2, #15
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a40      	ldr	r2, [pc, #256]	@ (8007870 <HAL_GPIO_Init+0x2c0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <HAL_GPIO_Init+0x1ec>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3f      	ldr	r2, [pc, #252]	@ (8007874 <HAL_GPIO_Init+0x2c4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00d      	beq.n	8007798 <HAL_GPIO_Init+0x1e8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3e      	ldr	r2, [pc, #248]	@ (8007878 <HAL_GPIO_Init+0x2c8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <HAL_GPIO_Init+0x1e4>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3d      	ldr	r2, [pc, #244]	@ (800787c <HAL_GPIO_Init+0x2cc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d101      	bne.n	8007790 <HAL_GPIO_Init+0x1e0>
 800778c:	2303      	movs	r3, #3
 800778e:	e006      	b.n	800779e <HAL_GPIO_Init+0x1ee>
 8007790:	2304      	movs	r3, #4
 8007792:	e004      	b.n	800779e <HAL_GPIO_Init+0x1ee>
 8007794:	2302      	movs	r3, #2
 8007796:	e002      	b.n	800779e <HAL_GPIO_Init+0x1ee>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <HAL_GPIO_Init+0x1ee>
 800779c:	2300      	movs	r3, #0
 800779e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a0:	f002 0203 	and.w	r2, r2, #3
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	4093      	lsls	r3, r2
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	492f      	ldr	r1, [pc, #188]	@ (800786c <HAL_GPIO_Init+0x2bc>)
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	3302      	adds	r3, #2
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d006      	beq.n	80077d6 <HAL_GPIO_Init+0x226>
 80077c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	492c      	ldr	r1, [pc, #176]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	608b      	str	r3, [r1, #8]
 80077d4:	e006      	b.n	80077e4 <HAL_GPIO_Init+0x234>
 80077d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	43db      	mvns	r3, r3
 80077de:	4928      	ldr	r1, [pc, #160]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	608b      	str	r3, [r1, #8]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <HAL_GPIO_Init+0x24e>
 80077f0:	4b23      	ldr	r3, [pc, #140]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	4922      	ldr	r1, [pc, #136]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60cb      	str	r3, [r1, #12]
 80077fc:	e006      	b.n	800780c <HAL_GPIO_Init+0x25c>
 80077fe:	4b20      	ldr	r3, [pc, #128]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	43db      	mvns	r3, r3
 8007806:	491e      	ldr	r1, [pc, #120]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007808:	4013      	ands	r3, r2
 800780a:	60cb      	str	r3, [r1, #12]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d006      	beq.n	8007826 <HAL_GPIO_Init+0x276>
 8007818:	4b19      	ldr	r3, [pc, #100]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4918      	ldr	r1, [pc, #96]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	604b      	str	r3, [r1, #4]
 8007824:	e006      	b.n	8007834 <HAL_GPIO_Init+0x284>
 8007826:	4b16      	ldr	r3, [pc, #88]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	43db      	mvns	r3, r3
 800782e:	4914      	ldr	r1, [pc, #80]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007830:	4013      	ands	r3, r2
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d021      	beq.n	8007884 <HAL_GPIO_Init+0x2d4>
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	490e      	ldr	r1, [pc, #56]	@ (8007880 <HAL_GPIO_Init+0x2d0>)
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	4313      	orrs	r3, r2
 800784a:	600b      	str	r3, [r1, #0]
 800784c:	e021      	b.n	8007892 <HAL_GPIO_Init+0x2e2>
 800784e:	bf00      	nop
 8007850:	10320000 	.word	0x10320000
 8007854:	10310000 	.word	0x10310000
 8007858:	10220000 	.word	0x10220000
 800785c:	10210000 	.word	0x10210000
 8007860:	10120000 	.word	0x10120000
 8007864:	10110000 	.word	0x10110000
 8007868:	40021000 	.word	0x40021000
 800786c:	40010000 	.word	0x40010000
 8007870:	40010800 	.word	0x40010800
 8007874:	40010c00 	.word	0x40010c00
 8007878:	40011000 	.word	0x40011000
 800787c:	40011400 	.word	0x40011400
 8007880:	40010400 	.word	0x40010400
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <HAL_GPIO_Init+0x304>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	43db      	mvns	r3, r3
 800788c:	4909      	ldr	r1, [pc, #36]	@ (80078b4 <HAL_GPIO_Init+0x304>)
 800788e:	4013      	ands	r3, r2
 8007890:	600b      	str	r3, [r1, #0]
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	3301      	adds	r3, #1
 8007896:	627b      	str	r3, [r7, #36]	@ 0x24
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	fa22 f303 	lsr.w	r3, r2, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f47f ae8e 	bne.w	80075c4 <HAL_GPIO_Init+0x14>
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	372c      	adds	r7, #44	@ 0x2c
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr
 80078b4:	40010400 	.word	0x40010400

080078b8 <HAL_GPIO_ReadPin>:
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	887b      	ldrh	r3, [r7, #2]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_GPIO_ReadPin+0x1e>
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	e001      	b.n	80078da <HAL_GPIO_ReadPin+0x22>
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <HAL_GPIO_WritePin>:
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	807b      	strh	r3, [r7, #2]
 80078f2:	4613      	mov	r3, r2
 80078f4:	707b      	strb	r3, [r7, #1]
 80078f6:	787b      	ldrb	r3, [r7, #1]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <HAL_GPIO_WritePin+0x1e>
 80078fc:	887a      	ldrh	r2, [r7, #2]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]
 8007902:	e003      	b.n	800790c <HAL_GPIO_WritePin+0x26>
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	041a      	lsls	r2, r3, #16
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	611a      	str	r2, [r3, #16]
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
	...

08007918 <HAL_GPIO_EXTI_IRQHandler>:
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	80fb      	strh	r3, [r7, #6]
 8007922:	4b08      	ldr	r3, [pc, #32]	@ (8007944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	4013      	ands	r3, r2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d006      	beq.n	800793c <HAL_GPIO_EXTI_IRQHandler+0x24>
 800792e:	4a05      	ldr	r2, [pc, #20]	@ (8007944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	6153      	str	r3, [r2, #20]
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f806 	bl	8007948 <HAL_GPIO_EXTI_Callback>
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40010400 	.word	0x40010400

08007948 <HAL_GPIO_EXTI_Callback>:
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	80fb      	strh	r3, [r7, #6]
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <HAL_I2C_Init>:
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_I2C_Init+0x12>
 800796a:	2301      	movs	r3, #1
 800796c:	e12b      	b.n	8007bc6 <HAL_I2C_Init+0x26a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <HAL_I2C_Init+0x2c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fc fb5a 	bl	800403c <HAL_I2C_MspInit>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2224      	movs	r2, #36	@ 0x24
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f001 fbfc 	bl	80091bc <HAL_RCC_GetPCLK1Freq>
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	4a81      	ldr	r2, [pc, #516]	@ (8007bd0 <HAL_I2C_Init+0x274>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d807      	bhi.n	80079e0 <HAL_I2C_Init+0x84>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a80      	ldr	r2, [pc, #512]	@ (8007bd4 <HAL_I2C_Init+0x278>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	bf94      	ite	ls
 80079d8:	2301      	movls	r3, #1
 80079da:	2300      	movhi	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e006      	b.n	80079ee <HAL_I2C_Init+0x92>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a7d      	ldr	r2, [pc, #500]	@ (8007bd8 <HAL_I2C_Init+0x27c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	bf94      	ite	ls
 80079e8:	2301      	movls	r3, #1
 80079ea:	2300      	movhi	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_I2C_Init+0x9a>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e0e7      	b.n	8007bc6 <HAL_I2C_Init+0x26a>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4a78      	ldr	r2, [pc, #480]	@ (8007bdc <HAL_I2C_Init+0x280>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	0c9b      	lsrs	r3, r3, #18
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4a6a      	ldr	r2, [pc, #424]	@ (8007bd0 <HAL_I2C_Init+0x274>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d802      	bhi.n	8007a30 <HAL_I2C_Init+0xd4>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	e009      	b.n	8007a44 <HAL_I2C_Init+0xe8>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
 8007a3a:	4a69      	ldr	r2, [pc, #420]	@ (8007be0 <HAL_I2C_Init+0x284>)
 8007a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a40:	099b      	lsrs	r3, r3, #6
 8007a42:	3301      	adds	r3, #1
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6213      	str	r3, [r2, #32]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	495c      	ldr	r1, [pc, #368]	@ (8007bd0 <HAL_I2C_Init+0x274>)
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d819      	bhi.n	8007a98 <HAL_I2C_Init+0x13c>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	1e59      	subs	r1, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007a78:	400b      	ands	r3, r1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <HAL_I2C_Init+0x138>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1e59      	subs	r1, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a92:	e051      	b.n	8007b38 <HAL_I2C_Init+0x1dc>
 8007a94:	2304      	movs	r3, #4
 8007a96:	e04f      	b.n	8007b38 <HAL_I2C_Init+0x1dc>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d111      	bne.n	8007ac4 <HAL_I2C_Init+0x168>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	1e58      	subs	r0, r3, #1
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6859      	ldr	r1, [r3, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	440b      	add	r3, r1
 8007aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	e012      	b.n	8007aea <HAL_I2C_Init+0x18e>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1e58      	subs	r0, r3, #1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6859      	ldr	r1, [r3, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	0099      	lsls	r1, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ada:	3301      	adds	r3, #1
 8007adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	bf0c      	ite	eq
 8007ae4:	2301      	moveq	r3, #1
 8007ae6:	2300      	movne	r3, #0
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_I2C_Init+0x196>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e022      	b.n	8007b38 <HAL_I2C_Init+0x1dc>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10e      	bne.n	8007b18 <HAL_I2C_Init+0x1bc>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1e58      	subs	r0, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	440b      	add	r3, r1
 8007b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b16:	e00f      	b.n	8007b38 <HAL_I2C_Init+0x1dc>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	1e58      	subs	r0, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	0099      	lsls	r1, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	6809      	ldr	r1, [r1, #0]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	61cb      	str	r3, [r1, #28]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69da      	ldr	r2, [r3, #28]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6911      	ldr	r1, [r2, #16]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68d2      	ldr	r2, [r2, #12]
 8007b72:	4311      	orrs	r1, r2
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6093      	str	r3, [r2, #8]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	60da      	str	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	641a      	str	r2, [r3, #64]	@ 0x40
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	000186a0 	.word	0x000186a0
 8007bd4:	001e847f 	.word	0x001e847f
 8007bd8:	003d08ff 	.word	0x003d08ff
 8007bdc:	431bde83 	.word	0x431bde83
 8007be0:	10624dd3 	.word	0x10624dd3

08007be4 <HAL_I2C_Mem_Write>:
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	817b      	strh	r3, [r7, #10]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	813b      	strh	r3, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	f7fe ff6f 	bl	8006ae0 <HAL_GetTick>
 8007c02:	6178      	str	r0, [r7, #20]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	f040 80d9 	bne.w	8007dc4 <HAL_I2C_Mem_Write+0x1e0>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2319      	movs	r3, #25
 8007c18:	2201      	movs	r2, #1
 8007c1a:	496d      	ldr	r1, [pc, #436]	@ (8007dd0 <HAL_I2C_Mem_Write+0x1ec>)
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fccd 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_I2C_Mem_Write+0x48>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e0cc      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d101      	bne.n	8007c3a <HAL_I2C_Mem_Write+0x56>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e0c5      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d007      	beq.n	8007c60 <HAL_I2C_Mem_Write+0x7c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2221      	movs	r2, #33	@ 0x21
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2240      	movs	r2, #64	@ 0x40
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a3a      	ldr	r2, [r7, #32]
 8007c8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8007dd4 <HAL_I2C_Mem_Write+0x1f0>)
 8007ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ca2:	88f8      	ldrh	r0, [r7, #6]
 8007ca4:	893a      	ldrh	r2, [r7, #8]
 8007ca6:	8979      	ldrh	r1, [r7, #10]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fb04 	bl	80082c0 <I2C_RequestMemoryWrite>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d052      	beq.n	8007d64 <HAL_I2C_Mem_Write+0x180>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e081      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 fd92 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00d      	beq.n	8007cee <HAL_I2C_Mem_Write+0x10a>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d107      	bne.n	8007cea <HAL_I2C_Mem_Write+0x106>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06b      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	611a      	str	r2, [r3, #16]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d11b      	bne.n	8007d64 <HAL_I2C_Mem_Write+0x180>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <HAL_I2C_Mem_Write+0x180>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	781a      	ldrb	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	611a      	str	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1aa      	bne.n	8007cc2 <HAL_I2C_Mem_Write+0xde>
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fd85 	bl	8008880 <I2C_WaitOnBTFFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00d      	beq.n	8007d98 <HAL_I2C_Mem_Write+0x1b4>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d107      	bne.n	8007d94 <HAL_I2C_Mem_Write+0x1b0>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	2301      	movs	r3, #1
 8007d96:	e016      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e000      	b.n	8007dc6 <HAL_I2C_Mem_Write+0x1e2>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	00100002 	.word	0x00100002
 8007dd4:	ffff0000 	.word	0xffff0000

08007dd8 <HAL_I2C_Mem_Read>:
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08c      	sub	sp, #48	@ 0x30
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	817b      	strh	r3, [r7, #10]
 8007dea:	460b      	mov	r3, r1
 8007dec:	813b      	strh	r3, [r7, #8]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80fb      	strh	r3, [r7, #6]
 8007df2:	2300      	movs	r3, #0
 8007df4:	623b      	str	r3, [r7, #32]
 8007df6:	f7fe fe73 	bl	8006ae0 <HAL_GetTick>
 8007dfa:	6278      	str	r0, [r7, #36]	@ 0x24
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	f040 8250 	bne.w	80082aa <HAL_I2C_Mem_Read+0x4d2>
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	2319      	movs	r3, #25
 8007e10:	2201      	movs	r2, #1
 8007e12:	4982      	ldr	r1, [pc, #520]	@ (800801c <HAL_I2C_Mem_Read+0x244>)
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 fbd1 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_I2C_Mem_Read+0x4c>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e243      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_I2C_Mem_Read+0x5a>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e23c      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d007      	beq.n	8007e58 <HAL_I2C_Mem_Read+0x80>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0201 	orr.w	r2, r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2222      	movs	r2, #34	@ 0x22
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2240      	movs	r2, #64	@ 0x40
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e82:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a62      	ldr	r2, [pc, #392]	@ (8008020 <HAL_I2C_Mem_Read+0x248>)
 8007e98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e9a:	88f8      	ldrh	r0, [r7, #6]
 8007e9c:	893a      	ldrh	r2, [r7, #8]
 8007e9e:	8979      	ldrh	r1, [r7, #10]
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea2:	9301      	str	r3, [sp, #4]
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fa9e 	bl	80083ec <I2C_RequestMemoryRead>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_I2C_Mem_Read+0xe2>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e1f8      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d113      	bne.n	8007eea <HAL_I2C_Mem_Read+0x112>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	e1cc      	b.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d11e      	bne.n	8007f30 <HAL_I2C_Mem_Read+0x158>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	b672      	cpsid	i
 8007f04:	bf00      	nop
 8007f06:	2300      	movs	r3, #0
 8007f08:	61bb      	str	r3, [r7, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	b662      	cpsie	i
 8007f2e:	e035      	b.n	8007f9c <HAL_I2C_Mem_Read+0x1c4>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d11e      	bne.n	8007f76 <HAL_I2C_Mem_Read+0x19e>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	b672      	cpsid	i
 8007f4a:	bf00      	nop
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	b662      	cpsie	i
 8007f74:	e012      	b.n	8007f9c <HAL_I2C_Mem_Read+0x1c4>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	e172      	b.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	f200 811f 	bhi.w	80081e6 <HAL_I2C_Mem_Read+0x40e>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d123      	bne.n	8007ff8 <HAL_I2C_Mem_Read+0x220>
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fcab 	bl	8008910 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <HAL_I2C_Mem_Read+0x1ec>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e173      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007ff6:	e145      	b.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d152      	bne.n	80080a6 <HAL_I2C_Mem_Read+0x2ce>
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	2200      	movs	r2, #0
 8008008:	4906      	ldr	r1, [pc, #24]	@ (8008024 <HAL_I2C_Mem_Read+0x24c>)
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fad6 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d008      	beq.n	8008028 <HAL_I2C_Mem_Read+0x250>
 8008016:	2301      	movs	r3, #1
 8008018:	e148      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 800801a:	bf00      	nop
 800801c:	00100002 	.word	0x00100002
 8008020:	ffff0000 	.word	0xffff0000
 8008024:	00010004 	.word	0x00010004
 8008028:	b672      	cpsid	i
 800802a:	bf00      	nop
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691a      	ldr	r2, [r3, #16]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	625a      	str	r2, [r3, #36]	@ 0x24
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008058:	3b01      	subs	r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800806e:	b662      	cpsie	i
 8008070:	bf00      	nop
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	625a      	str	r2, [r3, #36]	@ 0x24
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80080a4:	e0ee      	b.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ac:	2200      	movs	r2, #0
 80080ae:	4981      	ldr	r1, [pc, #516]	@ (80082b4 <HAL_I2C_Mem_Read+0x4dc>)
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fa83 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_I2C_Mem_Read+0x2e8>
 80080bc:	2301      	movs	r3, #1
 80080be:	e0f5      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	b672      	cpsid	i
 80080d2:	bf00      	nop
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691a      	ldr	r2, [r3, #16]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008106:	4b6c      	ldr	r3, [pc, #432]	@ (80082b8 <HAL_I2C_Mem_Read+0x4e0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	4a6b      	ldr	r2, [pc, #428]	@ (80082bc <HAL_I2C_Mem_Read+0x4e4>)
 800810e:	fba2 2303 	umull	r2, r3, r2, r3
 8008112:	0a1a      	lsrs	r2, r3, #8
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	00da      	lsls	r2, r3, #3
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	623b      	str	r3, [r7, #32]
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	3b01      	subs	r3, #1
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d118      	bne.n	800815e <HAL_I2C_Mem_Read+0x386>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	641a      	str	r2, [r3, #64]	@ 0x40
 800814e:	b662      	cpsie	i
 8008150:	bf00      	nop
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800815a:	2301      	movs	r3, #1
 800815c:	e0a6      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d1d9      	bne.n	8008120 <HAL_I2C_Mem_Read+0x348>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	625a      	str	r2, [r3, #36]	@ 0x24
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008198:	3b01      	subs	r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	851a      	strh	r2, [r3, #40]	@ 0x28
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081ae:	b662      	cpsie	i
 80081b0:	bf00      	nop
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081e4:	e04e      	b.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 80081e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fb90 	bl	8008910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_I2C_Mem_Read+0x422>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e058      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691a      	ldr	r2, [r3, #16]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	625a      	str	r2, [r3, #36]	@ 0x24
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b04      	cmp	r3, #4
 8008238:	d124      	bne.n	8008284 <HAL_I2C_Mem_Read+0x4ac>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823e:	2b03      	cmp	r3, #3
 8008240:	d107      	bne.n	8008252 <HAL_I2C_Mem_Read+0x47a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008288:	2b00      	cmp	r3, #0
 800828a:	f47f ae88 	bne.w	8007f9e <HAL_I2C_Mem_Read+0x1c6>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <HAL_I2C_Mem_Read+0x4d4>
 80082aa:	2302      	movs	r3, #2
 80082ac:	4618      	mov	r0, r3
 80082ae:	3728      	adds	r7, #40	@ 0x28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	00010004 	.word	0x00010004
 80082b8:	20000018 	.word	0x20000018
 80082bc:	14f8b589 	.word	0x14f8b589

080082c0 <I2C_RequestMemoryWrite>:
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	4608      	mov	r0, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	461a      	mov	r2, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	817b      	strh	r3, [r7, #10]
 80082d2:	460b      	mov	r3, r1
 80082d4:	813b      	strh	r3, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 f960 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00d      	beq.n	800831e <I2C_RequestMemoryWrite+0x5e>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008310:	d103      	bne.n	800831a <I2C_RequestMemoryWrite+0x5a>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008318:	641a      	str	r2, [r3, #64]	@ 0x40
 800831a:	2303      	movs	r3, #3
 800831c:	e05f      	b.n	80083de <I2C_RequestMemoryWrite+0x11e>
 800831e:	897b      	ldrh	r3, [r7, #10]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800832c:	611a      	str	r2, [r3, #16]
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	6a3a      	ldr	r2, [r7, #32]
 8008332:	492d      	ldr	r1, [pc, #180]	@ (80083e8 <I2C_RequestMemoryWrite+0x128>)
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f9bb 	bl	80086b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <I2C_RequestMemoryWrite+0x84>
 8008340:	2301      	movs	r3, #1
 8008342:	e04c      	b.n	80083de <I2C_RequestMemoryWrite+0x11e>
 8008344:	2300      	movs	r3, #0
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800835c:	6a39      	ldr	r1, [r7, #32]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fa46 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <I2C_RequestMemoryWrite+0xc6>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836e:	2b04      	cmp	r3, #4
 8008370:	d107      	bne.n	8008382 <I2C_RequestMemoryWrite+0xc2>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	2301      	movs	r3, #1
 8008384:	e02b      	b.n	80083de <I2C_RequestMemoryWrite+0x11e>
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d105      	bne.n	8008398 <I2C_RequestMemoryWrite+0xd8>
 800838c:	893b      	ldrh	r3, [r7, #8]
 800838e:	b2da      	uxtb	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	611a      	str	r2, [r3, #16]
 8008396:	e021      	b.n	80083dc <I2C_RequestMemoryWrite+0x11c>
 8008398:	893b      	ldrh	r3, [r7, #8]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	611a      	str	r2, [r3, #16]
 80083a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a8:	6a39      	ldr	r1, [r7, #32]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fa20 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00d      	beq.n	80083d2 <I2C_RequestMemoryWrite+0x112>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d107      	bne.n	80083ce <I2C_RequestMemoryWrite+0x10e>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	2301      	movs	r3, #1
 80083d0:	e005      	b.n	80083de <I2C_RequestMemoryWrite+0x11e>
 80083d2:	893b      	ldrh	r3, [r7, #8]
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	611a      	str	r2, [r3, #16]
 80083dc:	2300      	movs	r3, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	00010002 	.word	0x00010002

080083ec <I2C_RequestMemoryRead>:
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	4608      	mov	r0, r1
 80083f6:	4611      	mov	r1, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	4603      	mov	r3, r0
 80083fc:	817b      	strh	r3, [r7, #10]
 80083fe:	460b      	mov	r3, r1
 8008400:	813b      	strh	r3, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	2200      	movs	r2, #0
 800842e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f8c2 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <I2C_RequestMemoryRead+0x6e>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800844c:	d103      	bne.n	8008456 <I2C_RequestMemoryRead+0x6a>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008454:	641a      	str	r2, [r3, #64]	@ 0x40
 8008456:	2303      	movs	r3, #3
 8008458:	e0aa      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 800845a:	897b      	ldrh	r3, [r7, #10]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008468:	611a      	str	r2, [r3, #16]
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	4952      	ldr	r1, [pc, #328]	@ (80085b8 <I2C_RequestMemoryRead+0x1cc>)
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f91d 	bl	80086b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <I2C_RequestMemoryRead+0x94>
 800847c:	2301      	movs	r3, #1
 800847e:	e097      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008498:	6a39      	ldr	r1, [r7, #32]
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 f9a8 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00d      	beq.n	80084c2 <I2C_RequestMemoryRead+0xd6>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d107      	bne.n	80084be <I2C_RequestMemoryRead+0xd2>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	2301      	movs	r3, #1
 80084c0:	e076      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 80084c2:	88fb      	ldrh	r3, [r7, #6]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d105      	bne.n	80084d4 <I2C_RequestMemoryRead+0xe8>
 80084c8:	893b      	ldrh	r3, [r7, #8]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	611a      	str	r2, [r3, #16]
 80084d2:	e021      	b.n	8008518 <I2C_RequestMemoryRead+0x12c>
 80084d4:	893b      	ldrh	r3, [r7, #8]
 80084d6:	0a1b      	lsrs	r3, r3, #8
 80084d8:	b29b      	uxth	r3, r3
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	611a      	str	r2, [r3, #16]
 80084e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e4:	6a39      	ldr	r1, [r7, #32]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f982 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00d      	beq.n	800850e <I2C_RequestMemoryRead+0x122>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d107      	bne.n	800850a <I2C_RequestMemoryRead+0x11e>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	2301      	movs	r3, #1
 800850c:	e050      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 800850e:	893b      	ldrh	r3, [r7, #8]
 8008510:	b2da      	uxtb	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	611a      	str	r2, [r3, #16]
 8008518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851a:	6a39      	ldr	r1, [r7, #32]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f967 	bl	80087f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <I2C_RequestMemoryRead+0x158>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852c:	2b04      	cmp	r3, #4
 800852e:	d107      	bne.n	8008540 <I2C_RequestMemoryRead+0x154>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	2301      	movs	r3, #1
 8008542:	e035      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	2200      	movs	r2, #0
 800855c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f82b 	bl	80085bc <I2C_WaitOnFlagUntilTimeout>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <I2C_RequestMemoryRead+0x19c>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800857a:	d103      	bne.n	8008584 <I2C_RequestMemoryRead+0x198>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008582:	641a      	str	r2, [r3, #64]	@ 0x40
 8008584:	2303      	movs	r3, #3
 8008586:	e013      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 8008588:	897b      	ldrh	r3, [r7, #10]
 800858a:	b2db      	uxtb	r3, r3
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	b2da      	uxtb	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	611a      	str	r2, [r3, #16]
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	6a3a      	ldr	r2, [r7, #32]
 800859c:	4906      	ldr	r1, [pc, #24]	@ (80085b8 <I2C_RequestMemoryRead+0x1cc>)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f886 	bl	80086b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_RequestMemoryRead+0x1c2>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <I2C_RequestMemoryRead+0x1c4>
 80085ae:	2300      	movs	r3, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	00010002 	.word	0x00010002

080085bc <I2C_WaitOnFlagUntilTimeout>:
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	71fb      	strb	r3, [r7, #7]
 80085cc:	e048      	b.n	8008660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d044      	beq.n	8008660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80085d6:	f7fe fa83 	bl	8006ae0 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d302      	bcc.n	80085ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d139      	bne.n	8008660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d10d      	bne.n	8008612 <I2C_WaitOnFlagUntilTimeout+0x56>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	43da      	mvns	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4013      	ands	r3, r2
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	e00c      	b.n	800862c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	43da      	mvns	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4013      	ands	r3, r2
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	429a      	cmp	r2, r3
 8008630:	d116      	bne.n	8008660 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	631a      	str	r2, [r3, #48]	@ 0x30
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864c:	f043 0220 	orr.w	r2, r3, #32
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	641a      	str	r2, [r3, #64]	@ 0x40
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800865c:	2301      	movs	r3, #1
 800865e:	e023      	b.n	80086a8 <I2C_WaitOnFlagUntilTimeout+0xec>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b01      	cmp	r3, #1
 8008668:	d10d      	bne.n	8008686 <I2C_WaitOnFlagUntilTimeout+0xca>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	43da      	mvns	r2, r3
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	4013      	ands	r3, r2
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	bf0c      	ite	eq
 800867c:	2301      	moveq	r3, #1
 800867e:	2300      	movne	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	e00c      	b.n	80086a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	43da      	mvns	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4013      	ands	r3, r2
 8008692:	b29b      	uxth	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf0c      	ite	eq
 8008698:	2301      	moveq	r3, #1
 800869a:	2300      	movne	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d093      	beq.n	80085ce <I2C_WaitOnFlagUntilTimeout+0x12>
 80086a6:	2300      	movs	r3, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
 80086be:	e071      	b.n	80087a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ce:	d123      	bne.n	8008718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80086e8:	615a      	str	r2, [r3, #20]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008704:	f043 0204 	orr.w	r2, r3, #4
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	641a      	str	r2, [r3, #64]	@ 0x40
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008714:	2301      	movs	r3, #1
 8008716:	e067      	b.n	80087e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871e:	d041      	beq.n	80087a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8008720:	f7fe f9de 	bl	8006ae0 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d136      	bne.n	80087a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10c      	bne.n	800875a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	43da      	mvns	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4013      	ands	r3, r2
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	bf14      	ite	ne
 8008752:	2301      	movne	r3, #1
 8008754:	2300      	moveq	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	e00b      	b.n	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	43da      	mvns	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4013      	ands	r3, r2
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d016      	beq.n	80087a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	631a      	str	r2, [r3, #48]	@ 0x30
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008790:	f043 0220 	orr.w	r2, r3, #32
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	641a      	str	r2, [r3, #64]	@ 0x40
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80087a0:	2301      	movs	r3, #1
 80087a2:	e021      	b.n	80087e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	0c1b      	lsrs	r3, r3, #16
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10c      	bne.n	80087c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	43da      	mvns	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf14      	ite	ne
 80087c0:	2301      	movne	r3, #1
 80087c2:	2300      	moveq	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	e00b      	b.n	80087e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	43da      	mvns	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4013      	ands	r3, r2
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bf14      	ite	ne
 80087da:	2301      	movne	r3, #1
 80087dc:	2300      	moveq	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af6d 	bne.w	80086c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80087e6:	2300      	movs	r3, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <I2C_WaitOnTXEFlagUntilTimeout>:
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	e034      	b.n	8008868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 f8e3 	bl	80089ca <I2C_IsAcknowledgeFailed>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800880a:	2301      	movs	r3, #1
 800880c:	e034      	b.n	8008878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d028      	beq.n	8008868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8008816:	f7fe f963 	bl	8006ae0 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11d      	bne.n	8008868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d016      	beq.n	8008868 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008854:	f043 0220 	orr.w	r2, r3, #32
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	641a      	str	r2, [r3, #64]	@ 0x40
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008864:	2301      	movs	r3, #1
 8008866:	e007      	b.n	8008878 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008872:	2b80      	cmp	r3, #128	@ 0x80
 8008874:	d1c3      	bne.n	80087fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8008876:	2300      	movs	r3, #0
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <I2C_WaitOnBTFFlagUntilTimeout>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	e034      	b.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f89b 	bl	80089ca <I2C_IsAcknowledgeFailed>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800889a:	2301      	movs	r3, #1
 800889c:	e034      	b.n	8008908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d028      	beq.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80088a6:	f7fe f91b 	bl	8006ae0 <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d11d      	bne.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d016      	beq.n	80088f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e4:	f043 0220 	orr.w	r2, r3, #32
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80088f4:	2301      	movs	r3, #1
 80088f6:	e007      	b.n	8008908 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f003 0304 	and.w	r3, r3, #4
 8008902:	2b04      	cmp	r3, #4
 8008904:	d1c3      	bne.n	800888e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8008906:	2300      	movs	r3, #0
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	e049      	b.n	80089b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	2b10      	cmp	r3, #16
 800892a:	d119      	bne.n	8008960 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f06f 0210 	mvn.w	r2, #16
 8008934:	615a      	str	r2, [r3, #20]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	@ 0x30
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	641a      	str	r2, [r3, #64]	@ 0x40
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800895c:	2301      	movs	r3, #1
 800895e:	e030      	b.n	80089c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8008960:	f7fe f8be 	bl	8006ae0 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	429a      	cmp	r2, r3
 800896e:	d302      	bcc.n	8008976 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d11d      	bne.n	80089b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008980:	2b40      	cmp	r3, #64	@ 0x40
 8008982:	d016      	beq.n	80089b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	@ 0x30
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899e:	f043 0220 	orr.w	r2, r3, #32
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80089ae:	2301      	movs	r3, #1
 80089b0:	e007      	b.n	80089c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b40      	cmp	r3, #64	@ 0x40
 80089be:	d1ae      	bne.n	800891e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80089c0:	2300      	movs	r3, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <I2C_IsAcknowledgeFailed>:
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e0:	d11b      	bne.n	8008a1a <I2C_IsAcknowledgeFailed+0x50>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089ea:	615a      	str	r2, [r3, #20]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a06:	f043 0204 	orr.w	r2, r3, #4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008a16:	2301      	movs	r3, #1
 8008a18:	e000      	b.n	8008a1c <I2C_IsAcknowledgeFailed+0x52>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
	...

08008a28 <HAL_RCC_OscConfig>:
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_RCC_OscConfig+0x12>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e272      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8087 	beq.w	8008b56 <HAL_RCC_OscConfig+0x12e>
 8008a48:	4b92      	ldr	r3, [pc, #584]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d00c      	beq.n	8008a6e <HAL_RCC_OscConfig+0x46>
 8008a54:	4b8f      	ldr	r3, [pc, #572]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 030c 	and.w	r3, r3, #12
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d112      	bne.n	8008a86 <HAL_RCC_OscConfig+0x5e>
 8008a60:	4b8c      	ldr	r3, [pc, #560]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a6c:	d10b      	bne.n	8008a86 <HAL_RCC_OscConfig+0x5e>
 8008a6e:	4b89      	ldr	r3, [pc, #548]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06c      	beq.n	8008b54 <HAL_RCC_OscConfig+0x12c>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d168      	bne.n	8008b54 <HAL_RCC_OscConfig+0x12c>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e24c      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCC_OscConfig+0x76>
 8008a90:	4b80      	ldr	r3, [pc, #512]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a7f      	ldr	r2, [pc, #508]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	e02e      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10c      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x98>
 8008aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a7a      	ldr	r2, [pc, #488]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	4b78      	ldr	r3, [pc, #480]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a77      	ldr	r2, [pc, #476]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	e01d      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ac8:	d10c      	bne.n	8008ae4 <HAL_RCC_OscConfig+0xbc>
 8008aca:	4b72      	ldr	r3, [pc, #456]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a71      	ldr	r2, [pc, #452]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a6e      	ldr	r2, [pc, #440]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	e00b      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	4b68      	ldr	r3, [pc, #416]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a67      	ldr	r2, [pc, #412]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d013      	beq.n	8008b2c <HAL_RCC_OscConfig+0x104>
 8008b04:	f7fd ffec 	bl	8006ae0 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0xf6>
 8008b0c:	f7fd ffe8 	bl	8006ae0 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	@ 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0xf6>
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e200      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0xe4>
 8008b2a:	e014      	b.n	8008b56 <HAL_RCC_OscConfig+0x12e>
 8008b2c:	f7fd ffd8 	bl	8006ae0 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x11e>
 8008b34:	f7fd ffd4 	bl	8006ae0 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b64      	cmp	r3, #100	@ 0x64
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x11e>
 8008b42:	2303      	movs	r3, #3
 8008b44:	e1ec      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008b46:	4b53      	ldr	r3, [pc, #332]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x10c>
 8008b52:	e000      	b.n	8008b56 <HAL_RCC_OscConfig+0x12e>
 8008b54:	bf00      	nop
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d063      	beq.n	8008c2a <HAL_RCC_OscConfig+0x202>
 8008b62:	4b4c      	ldr	r3, [pc, #304]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 030c 	and.w	r3, r3, #12
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <HAL_RCC_OscConfig+0x15e>
 8008b6e:	4b49      	ldr	r3, [pc, #292]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f003 030c 	and.w	r3, r3, #12
 8008b76:	2b08      	cmp	r3, #8
 8008b78:	d11c      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x18c>
 8008b7a:	4b46      	ldr	r3, [pc, #280]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d116      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x18c>
 8008b86:	4b43      	ldr	r3, [pc, #268]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d005      	beq.n	8008b9e <HAL_RCC_OscConfig+0x176>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d001      	beq.n	8008b9e <HAL_RCC_OscConfig+0x176>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e1c0      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	4939      	ldr	r1, [pc, #228]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]
 8008bb2:	e03a      	b.n	8008c2a <HAL_RCC_OscConfig+0x202>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d020      	beq.n	8008bfe <HAL_RCC_OscConfig+0x1d6>
 8008bbc:	4b36      	ldr	r3, [pc, #216]	@ (8008c98 <HAL_RCC_OscConfig+0x270>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	f7fd ff8d 	bl	8006ae0 <HAL_GetTick>
 8008bc6:	6138      	str	r0, [r7, #16]
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0x1b4>
 8008bca:	f7fd ff89 	bl	8006ae0 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x1b4>
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e1a1      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d0f0      	beq.n	8008bca <HAL_RCC_OscConfig+0x1a2>
 8008be8:	4b2a      	ldr	r3, [pc, #168]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4927      	ldr	r1, [pc, #156]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]
 8008bfc:	e015      	b.n	8008c2a <HAL_RCC_OscConfig+0x202>
 8008bfe:	4b26      	ldr	r3, [pc, #152]	@ (8008c98 <HAL_RCC_OscConfig+0x270>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	f7fd ff6c 	bl	8006ae0 <HAL_GetTick>
 8008c08:	6138      	str	r0, [r7, #16]
 8008c0a:	e008      	b.n	8008c1e <HAL_RCC_OscConfig+0x1f6>
 8008c0c:	f7fd ff68 	bl	8006ae0 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x1f6>
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e180      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1f0      	bne.n	8008c0c <HAL_RCC_OscConfig+0x1e4>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d03a      	beq.n	8008cac <HAL_RCC_OscConfig+0x284>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d019      	beq.n	8008c72 <HAL_RCC_OscConfig+0x24a>
 8008c3e:	4b17      	ldr	r3, [pc, #92]	@ (8008c9c <HAL_RCC_OscConfig+0x274>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	f7fd ff4c 	bl	8006ae0 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x236>
 8008c4c:	f7fd ff48 	bl	8006ae0 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x236>
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e160      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c94 <HAL_RCC_OscConfig+0x26c>)
 8008c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0f0      	beq.n	8008c4c <HAL_RCC_OscConfig+0x224>
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	f000 face 	bl	800920c <RCC_Delay>
 8008c70:	e01c      	b.n	8008cac <HAL_RCC_OscConfig+0x284>
 8008c72:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <HAL_RCC_OscConfig+0x274>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f7fd ff32 	bl	8006ae0 <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]
 8008c7e:	e00f      	b.n	8008ca0 <HAL_RCC_OscConfig+0x278>
 8008c80:	f7fd ff2e 	bl	8006ae0 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d908      	bls.n	8008ca0 <HAL_RCC_OscConfig+0x278>
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e146      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008c92:	bf00      	nop
 8008c94:	40021000 	.word	0x40021000
 8008c98:	42420000 	.word	0x42420000
 8008c9c:	42420480 	.word	0x42420480
 8008ca0:	4b92      	ldr	r3, [pc, #584]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e9      	bne.n	8008c80 <HAL_RCC_OscConfig+0x258>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 80a6 	beq.w	8008e06 <HAL_RCC_OscConfig+0x3de>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
 8008cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10d      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x2be>
 8008cca:	4b88      	ldr	r3, [pc, #544]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4a87      	ldr	r2, [pc, #540]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cd4:	61d3      	str	r3, [r2, #28]
 8008cd6:	4b85      	ldr	r3, [pc, #532]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	60bb      	str	r3, [r7, #8]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
 8008ce6:	4b82      	ldr	r3, [pc, #520]	@ (8008ef0 <HAL_RCC_OscConfig+0x4c8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d118      	bne.n	8008d24 <HAL_RCC_OscConfig+0x2fc>
 8008cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ef0 <HAL_RCC_OscConfig+0x4c8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ef0 <HAL_RCC_OscConfig+0x4c8>)
 8008cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	f7fd feef 	bl	8006ae0 <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x2f0>
 8008d06:	f7fd feeb 	bl	8006ae0 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b64      	cmp	r3, #100	@ 0x64
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x2f0>
 8008d14:	2303      	movs	r3, #3
 8008d16:	e103      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008d18:	4b75      	ldr	r3, [pc, #468]	@ (8008ef0 <HAL_RCC_OscConfig+0x4c8>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x2de>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCC_OscConfig+0x312>
 8008d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	4a6e      	ldr	r2, [pc, #440]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	6213      	str	r3, [r2, #32]
 8008d38:	e02d      	b.n	8008d96 <HAL_RCC_OscConfig+0x36e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10c      	bne.n	8008d5c <HAL_RCC_OscConfig+0x334>
 8008d42:	4b6a      	ldr	r3, [pc, #424]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4a69      	ldr	r2, [pc, #420]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	6213      	str	r3, [r2, #32]
 8008d4e:	4b67      	ldr	r3, [pc, #412]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	4a66      	ldr	r2, [pc, #408]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d54:	f023 0304 	bic.w	r3, r3, #4
 8008d58:	6213      	str	r3, [r2, #32]
 8008d5a:	e01c      	b.n	8008d96 <HAL_RCC_OscConfig+0x36e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	2b05      	cmp	r3, #5
 8008d62:	d10c      	bne.n	8008d7e <HAL_RCC_OscConfig+0x356>
 8008d64:	4b61      	ldr	r3, [pc, #388]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d66:	6a1b      	ldr	r3, [r3, #32]
 8008d68:	4a60      	ldr	r2, [pc, #384]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d6a:	f043 0304 	orr.w	r3, r3, #4
 8008d6e:	6213      	str	r3, [r2, #32]
 8008d70:	4b5e      	ldr	r3, [pc, #376]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	4a5d      	ldr	r2, [pc, #372]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d76:	f043 0301 	orr.w	r3, r3, #1
 8008d7a:	6213      	str	r3, [r2, #32]
 8008d7c:	e00b      	b.n	8008d96 <HAL_RCC_OscConfig+0x36e>
 8008d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	4a5a      	ldr	r2, [pc, #360]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	6213      	str	r3, [r2, #32]
 8008d8a:	4b58      	ldr	r3, [pc, #352]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	4a57      	ldr	r2, [pc, #348]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008d90:	f023 0304 	bic.w	r3, r3, #4
 8008d94:	6213      	str	r3, [r2, #32]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d015      	beq.n	8008dca <HAL_RCC_OscConfig+0x3a2>
 8008d9e:	f7fd fe9f 	bl	8006ae0 <HAL_GetTick>
 8008da2:	6138      	str	r0, [r7, #16]
 8008da4:	e00a      	b.n	8008dbc <HAL_RCC_OscConfig+0x394>
 8008da6:	f7fd fe9b 	bl	8006ae0 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x394>
 8008db8:	2303      	movs	r3, #3
 8008dba:	e0b1      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0ee      	beq.n	8008da6 <HAL_RCC_OscConfig+0x37e>
 8008dc8:	e014      	b.n	8008df4 <HAL_RCC_OscConfig+0x3cc>
 8008dca:	f7fd fe89 	bl	8006ae0 <HAL_GetTick>
 8008dce:	6138      	str	r0, [r7, #16]
 8008dd0:	e00a      	b.n	8008de8 <HAL_RCC_OscConfig+0x3c0>
 8008dd2:	f7fd fe85 	bl	8006ae0 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d901      	bls.n	8008de8 <HAL_RCC_OscConfig+0x3c0>
 8008de4:	2303      	movs	r3, #3
 8008de6:	e09b      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008de8:	4b40      	ldr	r3, [pc, #256]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1ee      	bne.n	8008dd2 <HAL_RCC_OscConfig+0x3aa>
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d105      	bne.n	8008e06 <HAL_RCC_OscConfig+0x3de>
 8008dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e04:	61d3      	str	r3, [r2, #28]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 8087 	beq.w	8008f1e <HAL_RCC_OscConfig+0x4f6>
 8008e10:	4b36      	ldr	r3, [pc, #216]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f003 030c 	and.w	r3, r3, #12
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d061      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x4b8>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d146      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x48a>
 8008e24:	4b33      	ldr	r3, [pc, #204]	@ (8008ef4 <HAL_RCC_OscConfig+0x4cc>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	f7fd fe59 	bl	8006ae0 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]
 8008e30:	e008      	b.n	8008e44 <HAL_RCC_OscConfig+0x41c>
 8008e32:	f7fd fe55 	bl	8006ae0 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d901      	bls.n	8008e44 <HAL_RCC_OscConfig+0x41c>
 8008e40:	2303      	movs	r3, #3
 8008e42:	e06d      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008e44:	4b29      	ldr	r3, [pc, #164]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f0      	bne.n	8008e32 <HAL_RCC_OscConfig+0x40a>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e58:	d108      	bne.n	8008e6c <HAL_RCC_OscConfig+0x444>
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	4921      	ldr	r1, [pc, #132]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	604b      	str	r3, [r1, #4]
 8008e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a19      	ldr	r1, [r3, #32]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	491b      	ldr	r1, [pc, #108]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	604b      	str	r3, [r1, #4]
 8008e84:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef4 <HAL_RCC_OscConfig+0x4cc>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	f7fd fe29 	bl	8006ae0 <HAL_GetTick>
 8008e8e:	6138      	str	r0, [r7, #16]
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x47c>
 8008e92:	f7fd fe25 	bl	8006ae0 <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x47c>
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e03d      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008ea4:	4b11      	ldr	r3, [pc, #68]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0f0      	beq.n	8008e92 <HAL_RCC_OscConfig+0x46a>
 8008eb0:	e035      	b.n	8008f1e <HAL_RCC_OscConfig+0x4f6>
 8008eb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <HAL_RCC_OscConfig+0x4cc>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f7fd fe12 	bl	8006ae0 <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]
 8008ebe:	e008      	b.n	8008ed2 <HAL_RCC_OscConfig+0x4aa>
 8008ec0:	f7fd fe0e 	bl	8006ae0 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x4aa>
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e026      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <HAL_RCC_OscConfig+0x4c4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f0      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x498>
 8008ede:	e01e      	b.n	8008f1e <HAL_RCC_OscConfig+0x4f6>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d107      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x4d0>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e019      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	40007000 	.word	0x40007000
 8008ef4:	42420060 	.word	0x42420060
 8008ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <HAL_RCC_OscConfig+0x500>)
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	60fb      	str	r3, [r7, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d106      	bne.n	8008f1a <HAL_RCC_OscConfig+0x4f2>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d001      	beq.n	8008f1e <HAL_RCC_OscConfig+0x4f6>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <HAL_RCC_OscConfig+0x4f8>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	40021000 	.word	0x40021000

08008f2c <HAL_RCC_ClockConfig>:
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x14>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0d0      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 8008f40:	4b6a      	ldr	r3, [pc, #424]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d910      	bls.n	8008f70 <HAL_RCC_ClockConfig+0x44>
 8008f4e:	4b67      	ldr	r3, [pc, #412]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f023 0207 	bic.w	r2, r3, #7
 8008f56:	4965      	ldr	r1, [pc, #404]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	600b      	str	r3, [r1, #0]
 8008f5e:	4b63      	ldr	r3, [pc, #396]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d001      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x44>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e0b8      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d020      	beq.n	8008fbe <HAL_RCC_ClockConfig+0x92>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x68>
 8008f88:	4b59      	ldr	r3, [pc, #356]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	4a58      	ldr	r2, [pc, #352]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008f8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f92:	6053      	str	r3, [r2, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_RCC_ClockConfig+0x80>
 8008fa0:	4b53      	ldr	r3, [pc, #332]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4a52      	ldr	r2, [pc, #328]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8008faa:	6053      	str	r3, [r2, #4]
 8008fac:	4b50      	ldr	r3, [pc, #320]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	494d      	ldr	r1, [pc, #308]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	604b      	str	r3, [r1, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d040      	beq.n	800904c <HAL_RCC_ClockConfig+0x120>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d107      	bne.n	8008fe2 <HAL_RCC_ClockConfig+0xb6>
 8008fd2:	4b47      	ldr	r3, [pc, #284]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d115      	bne.n	800900a <HAL_RCC_ClockConfig+0xde>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e07f      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCC_ClockConfig+0xce>
 8008fea:	4b41      	ldr	r3, [pc, #260]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <HAL_RCC_ClockConfig+0xde>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e073      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 8008ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_RCC_ClockConfig+0xde>
 8009006:	2301      	movs	r3, #1
 8009008:	e06b      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 800900a:	4b39      	ldr	r3, [pc, #228]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f023 0203 	bic.w	r2, r3, #3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4936      	ldr	r1, [pc, #216]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009018:	4313      	orrs	r3, r2
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	f7fd fd60 	bl	8006ae0 <HAL_GetTick>
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	e00a      	b.n	800903a <HAL_RCC_ClockConfig+0x10e>
 8009024:	f7fd fd5c 	bl	8006ae0 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009032:	4293      	cmp	r3, r2
 8009034:	d901      	bls.n	800903a <HAL_RCC_ClockConfig+0x10e>
 8009036:	2303      	movs	r3, #3
 8009038:	e053      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 800903a:	4b2d      	ldr	r3, [pc, #180]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f003 020c 	and.w	r2, r3, #12
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	429a      	cmp	r2, r3
 800904a:	d1eb      	bne.n	8009024 <HAL_RCC_ClockConfig+0xf8>
 800904c:	4b27      	ldr	r3, [pc, #156]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d210      	bcs.n	800907c <HAL_RCC_ClockConfig+0x150>
 800905a:	4b24      	ldr	r3, [pc, #144]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f023 0207 	bic.w	r2, r3, #7
 8009062:	4922      	ldr	r1, [pc, #136]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	4313      	orrs	r3, r2
 8009068:	600b      	str	r3, [r1, #0]
 800906a:	4b20      	ldr	r3, [pc, #128]	@ (80090ec <HAL_RCC_ClockConfig+0x1c0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d001      	beq.n	800907c <HAL_RCC_ClockConfig+0x150>
 8009078:	2301      	movs	r3, #1
 800907a:	e032      	b.n	80090e2 <HAL_RCC_ClockConfig+0x1b6>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d008      	beq.n	800909a <HAL_RCC_ClockConfig+0x16e>
 8009088:	4b19      	ldr	r3, [pc, #100]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4916      	ldr	r1, [pc, #88]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 8009096:	4313      	orrs	r3, r2
 8009098:	604b      	str	r3, [r1, #4]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <HAL_RCC_ClockConfig+0x18e>
 80090a6:	4b12      	ldr	r3, [pc, #72]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	490e      	ldr	r1, [pc, #56]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	604b      	str	r3, [r1, #4]
 80090ba:	f000 f821 	bl	8009100 <HAL_RCC_GetSysClockFreq>
 80090be:	4602      	mov	r2, r0
 80090c0:	4b0b      	ldr	r3, [pc, #44]	@ (80090f0 <HAL_RCC_ClockConfig+0x1c4>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	091b      	lsrs	r3, r3, #4
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	490a      	ldr	r1, [pc, #40]	@ (80090f4 <HAL_RCC_ClockConfig+0x1c8>)
 80090cc:	5ccb      	ldrb	r3, [r1, r3]
 80090ce:	fa22 f303 	lsr.w	r3, r2, r3
 80090d2:	4a09      	ldr	r2, [pc, #36]	@ (80090f8 <HAL_RCC_ClockConfig+0x1cc>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	4b09      	ldr	r3, [pc, #36]	@ (80090fc <HAL_RCC_ClockConfig+0x1d0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd fcbe 	bl	8006a5c <HAL_InitTick>
 80090e0:	2300      	movs	r3, #0
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	40022000 	.word	0x40022000
 80090f0:	40021000 	.word	0x40021000
 80090f4:	0800a164 	.word	0x0800a164
 80090f8:	20000018 	.word	0x20000018
 80090fc:	2000001c 	.word	0x2000001c

08009100 <HAL_RCC_GetSysClockFreq>:
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
 8009116:	2300      	movs	r3, #0
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	4b1e      	ldr	r3, [pc, #120]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x94>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 030c 	and.w	r3, r3, #12
 8009126:	2b04      	cmp	r3, #4
 8009128:	d002      	beq.n	8009130 <HAL_RCC_GetSysClockFreq+0x30>
 800912a:	2b08      	cmp	r3, #8
 800912c:	d003      	beq.n	8009136 <HAL_RCC_GetSysClockFreq+0x36>
 800912e:	e027      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x80>
 8009130:	4b19      	ldr	r3, [pc, #100]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x98>)
 8009132:	613b      	str	r3, [r7, #16]
 8009134:	e027      	b.n	8009186 <HAL_RCC_GetSysClockFreq+0x86>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	0c9b      	lsrs	r3, r3, #18
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	4a17      	ldr	r2, [pc, #92]	@ (800919c <HAL_RCC_GetSysClockFreq+0x9c>)
 8009140:	5cd3      	ldrb	r3, [r2, r3]
 8009142:	607b      	str	r3, [r7, #4]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d010      	beq.n	8009170 <HAL_RCC_GetSysClockFreq+0x70>
 800914e:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x94>)
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	0c5b      	lsrs	r3, r3, #17
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	4a11      	ldr	r2, [pc, #68]	@ (80091a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800915a:	5cd3      	ldrb	r3, [r2, r3]
 800915c:	60bb      	str	r3, [r7, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a0d      	ldr	r2, [pc, #52]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x98>)
 8009162:	fb03 f202 	mul.w	r2, r3, r2
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	fbb2 f3f3 	udiv	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e004      	b.n	800917a <HAL_RCC_GetSysClockFreq+0x7a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a0c      	ldr	r2, [pc, #48]	@ (80091a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	613b      	str	r3, [r7, #16]
 800917e:	e002      	b.n	8009186 <HAL_RCC_GetSysClockFreq+0x86>
 8009180:	4b05      	ldr	r3, [pc, #20]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x98>)
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	bf00      	nop
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	4618      	mov	r0, r3
 800918a:	371c      	adds	r7, #28
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40021000 	.word	0x40021000
 8009198:	007a1200 	.word	0x007a1200
 800919c:	0800a17c 	.word	0x0800a17c
 80091a0:	0800a18c 	.word	0x0800a18c
 80091a4:	003d0900 	.word	0x003d0900

080091a8 <HAL_RCC_GetHCLKFreq>:
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	4b02      	ldr	r3, [pc, #8]	@ (80091b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr
 80091b8:	20000018 	.word	0x20000018

080091bc <HAL_RCC_GetPCLK1Freq>:
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
 80091c0:	f7ff fff2 	bl	80091a8 <HAL_RCC_GetHCLKFreq>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	4903      	ldr	r1, [pc, #12]	@ (80091e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091d2:	5ccb      	ldrb	r3, [r1, r3]
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	4618      	mov	r0, r3
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40021000 	.word	0x40021000
 80091e0:	0800a174 	.word	0x0800a174

080091e4 <HAL_RCC_GetPCLK2Freq>:
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	f7ff ffde 	bl	80091a8 <HAL_RCC_GetHCLKFreq>
 80091ec:	4602      	mov	r2, r0
 80091ee:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	0adb      	lsrs	r3, r3, #11
 80091f4:	f003 0307 	and.w	r3, r3, #7
 80091f8:	4903      	ldr	r1, [pc, #12]	@ (8009208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091fa:	5ccb      	ldrb	r3, [r1, r3]
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40021000 	.word	0x40021000
 8009208:	0800a174 	.word	0x0800a174

0800920c <RCC_Delay>:
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	4b0a      	ldr	r3, [pc, #40]	@ (8009240 <RCC_Delay+0x34>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a0a      	ldr	r2, [pc, #40]	@ (8009244 <RCC_Delay+0x38>)
 800921a:	fba2 2303 	umull	r2, r3, r2, r3
 800921e:	0a5b      	lsrs	r3, r3, #9
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	fb02 f303 	mul.w	r3, r2, r3
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	bf00      	nop
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	60fa      	str	r2, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f9      	bne.n	8009228 <RCC_Delay+0x1c>
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr
 8009240:	20000018 	.word	0x20000018
 8009244:	10624dd3 	.word	0x10624dd3

08009248 <HAL_RCCEx_PeriphCLKConfig>:
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	2300      	movs	r3, #0
 8009252:	613b      	str	r3, [r7, #16]
 8009254:	2300      	movs	r3, #0
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d07d      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009264:	2300      	movs	r3, #0
 8009266:	75fb      	strb	r3, [r7, #23]
 8009268:	4b4f      	ldr	r3, [pc, #316]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10d      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8009274:	4b4c      	ldr	r3, [pc, #304]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4a4b      	ldr	r2, [pc, #300]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800927a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800927e:	61d3      	str	r3, [r2, #28]
 8009280:	4b49      	ldr	r3, [pc, #292]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009288:	60bb      	str	r3, [r7, #8]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]
 8009290:	4b46      	ldr	r3, [pc, #280]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d118      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x86>
 800929c:	4b43      	ldr	r3, [pc, #268]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a42      	ldr	r2, [pc, #264]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	f7fd fc1a 	bl	8006ae0 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]
 80092ae:	e008      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80092b0:	f7fd fc16 	bl	8006ae0 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b64      	cmp	r3, #100	@ 0x64
 80092bc:	d901      	bls.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80092be:	2303      	movs	r3, #3
 80092c0:	e06d      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x156>
 80092c2:	4b3a      	ldr	r3, [pc, #232]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f0      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80092ce:	4b36      	ldr	r3, [pc, #216]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d02e      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d027      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80092ec:	4b2e      	ldr	r3, [pc, #184]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	4b2e      	ldr	r3, [pc, #184]	@ (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	4b2c      	ldr	r3, [pc, #176]	@ (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	4a29      	ldr	r2, [pc, #164]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6213      	str	r3, [r2, #32]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d014      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009312:	f7fd fbe5 	bl	8006ae0 <HAL_GetTick>
 8009316:	6138      	str	r0, [r7, #16]
 8009318:	e00a      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800931a:	f7fd fbe1 	bl	8006ae0 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009328:	4293      	cmp	r3, r2
 800932a:	d901      	bls.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800932c:	2303      	movs	r3, #3
 800932e:	e036      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8009330:	4b1d      	ldr	r3, [pc, #116]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0ee      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 800933c:	4b1a      	ldr	r3, [pc, #104]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	4917      	ldr	r1, [pc, #92]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800934a:	4313      	orrs	r3, r2
 800934c:	620b      	str	r3, [r1, #32]
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d105      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8009354:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4a13      	ldr	r2, [pc, #76]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800935a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800935e:	61d3      	str	r3, [r2, #28]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d008      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800936c:	4b0e      	ldr	r3, [pc, #56]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	490b      	ldr	r1, [pc, #44]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800937a:	4313      	orrs	r3, r2
 800937c:	604b      	str	r3, [r1, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	2b00      	cmp	r3, #0
 8009388:	d008      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800938a:	4b07      	ldr	r3, [pc, #28]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	4904      	ldr	r1, [pc, #16]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009398:	4313      	orrs	r3, r2
 800939a:	604b      	str	r3, [r1, #4]
 800939c:	2300      	movs	r3, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	40021000 	.word	0x40021000
 80093ac:	40007000 	.word	0x40007000
 80093b0:	42420440 	.word	0x42420440

080093b4 <HAL_RCCEx_GetPeriphCLKFreq>:
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b10      	cmp	r3, #16
 80093d4:	d00a      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b10      	cmp	r3, #16
 80093da:	f200 808a 	bhi.w	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d045      	beq.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d075      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80093ea:	e082      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80093ec:	4b46      	ldr	r3, [pc, #280]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	4b45      	ldr	r3, [pc, #276]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d07b      	beq.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	0c9b      	lsrs	r3, r3, #18
 8009402:	f003 030f 	and.w	r3, r3, #15
 8009406:	4a41      	ldr	r2, [pc, #260]	@ (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8009408:	5cd3      	ldrb	r3, [r2, r3]
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d015      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8009416:	4b3c      	ldr	r3, [pc, #240]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	0c5b      	lsrs	r3, r3, #17
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	4a3b      	ldr	r2, [pc, #236]	@ (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8009422:	5cd3      	ldrb	r3, [r2, r3]
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00d      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8009430:	4a38      	ldr	r2, [pc, #224]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	fbb2 f2f3 	udiv	r2, r2, r3
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	fb02 f303 	mul.w	r3, r2, r3
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e004      	b.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	4a34      	ldr	r2, [pc, #208]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009446:	fb02 f303 	mul.w	r3, r2, r3
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	4b2e      	ldr	r3, [pc, #184]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009454:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009458:	d102      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	e04a      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	4a2d      	ldr	r2, [pc, #180]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009466:	fba2 2303 	umull	r2, r3, r2, r3
 800946a:	085b      	lsrs	r3, r3, #1
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	e042      	b.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8009470:	4b25      	ldr	r3, [pc, #148]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800947c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009480:	d108      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800948c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e01f      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800949a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949e:	d109      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80094a0:	4b19      	ldr	r3, [pc, #100]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80094ac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	e00f      	b.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094be:	d11c      	bne.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80094c0:	4b11      	ldr	r3, [pc, #68]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d016      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80094cc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80094d0:	61bb      	str	r3, [r7, #24]
 80094d2:	e012      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80094d4:	e011      	b.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80094d6:	f7ff fe85 	bl	80091e4 <HAL_RCC_GetPCLK2Freq>
 80094da:	4602      	mov	r2, r0
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	0b9b      	lsrs	r3, r3, #14
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	3301      	adds	r3, #1
 80094e8:	005b      	lsls	r3, r3, #1
 80094ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	e004      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80094f2:	bf00      	nop
 80094f4:	e002      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80094f6:	bf00      	nop
 80094f8:	e000      	b.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80094fa:	bf00      	nop
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	4618      	mov	r0, r3
 8009500:	3720      	adds	r7, #32
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	40021000 	.word	0x40021000
 800950c:	0800a190 	.word	0x0800a190
 8009510:	0800a1a0 	.word	0x0800a1a0
 8009514:	007a1200 	.word	0x007a1200
 8009518:	003d0900 	.word	0x003d0900
 800951c:	aaaaaaab 	.word	0xaaaaaaab

08009520 <HAL_TIM_Base_Init>:
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_TIM_Base_Init+0x12>
 800952e:	2301      	movs	r3, #1
 8009530:	e041      	b.n	80095b6 <HAL_TIM_Base_Init+0x96>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <HAL_TIM_Base_Init+0x2c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7fd fa0c 	bl	8006964 <HAL_TIM_Base_MspInit>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f000 fa64 	bl	8009a2c <TIM_Base_SetConfig>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80095b4:	2300      	movs	r3, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <HAL_TIM_Base_Start_IT>:
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d001      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x18>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e03a      	b.n	800964e <HAL_TIM_Base_Start_IT+0x8e>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	60da      	str	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a18      	ldr	r2, [pc, #96]	@ (8009658 <HAL_TIM_Base_Start_IT+0x98>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00e      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x58>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009602:	d009      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x58>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a14      	ldr	r2, [pc, #80]	@ (800965c <HAL_TIM_Base_Start_IT+0x9c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d004      	beq.n	8009618 <HAL_TIM_Base_Start_IT+0x58>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a13      	ldr	r2, [pc, #76]	@ (8009660 <HAL_TIM_Base_Start_IT+0xa0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d111      	bne.n	800963c <HAL_TIM_Base_Start_IT+0x7c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b06      	cmp	r3, #6
 8009628:	d010      	beq.n	800964c <HAL_TIM_Base_Start_IT+0x8c>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0201 	orr.w	r2, r2, #1
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	e007      	b.n	800964c <HAL_TIM_Base_Start_IT+0x8c>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	2300      	movs	r3, #0
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr
 8009658:	40012c00 	.word	0x40012c00
 800965c:	40000400 	.word	0x40000400
 8009660:	40000800 	.word	0x40000800

08009664 <HAL_TIM_IRQHandler>:
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	60bb      	str	r3, [r7, #8]
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d020      	beq.n	80096c8 <HAL_TIM_IRQHandler+0x64>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01b      	beq.n	80096c8 <HAL_TIM_IRQHandler+0x64>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f06f 0202 	mvn.w	r2, #2
 8009698:	611a      	str	r2, [r3, #16]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	771a      	strb	r2, [r3, #28]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d003      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x52>
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f9a1 	bl	80099f6 <HAL_TIM_IC_CaptureCallback>
 80096b4:	e005      	b.n	80096c2 <HAL_TIM_IRQHandler+0x5e>
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f994 	bl	80099e4 <HAL_TIM_OC_DelayElapsedCallback>
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f9a3 	bl	8009a08 <HAL_TIM_PWM_PulseFinishedCallback>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	771a      	strb	r2, [r3, #28]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d020      	beq.n	8009714 <HAL_TIM_IRQHandler+0xb0>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01b      	beq.n	8009714 <HAL_TIM_IRQHandler+0xb0>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f06f 0204 	mvn.w	r2, #4
 80096e4:	611a      	str	r2, [r3, #16]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2202      	movs	r2, #2
 80096ea:	771a      	strb	r2, [r3, #28]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_TIM_IRQHandler+0x9e>
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f97b 	bl	80099f6 <HAL_TIM_IC_CaptureCallback>
 8009700:	e005      	b.n	800970e <HAL_TIM_IRQHandler+0xaa>
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f96e 	bl	80099e4 <HAL_TIM_OC_DelayElapsedCallback>
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f97d 	bl	8009a08 <HAL_TIM_PWM_PulseFinishedCallback>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	771a      	strb	r2, [r3, #28]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	2b00      	cmp	r3, #0
 800971c:	d020      	beq.n	8009760 <HAL_TIM_IRQHandler+0xfc>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01b      	beq.n	8009760 <HAL_TIM_IRQHandler+0xfc>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f06f 0208 	mvn.w	r2, #8
 8009730:	611a      	str	r2, [r3, #16]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2204      	movs	r2, #4
 8009736:	771a      	strb	r2, [r3, #28]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f003 0303 	and.w	r3, r3, #3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_TIM_IRQHandler+0xea>
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f955 	bl	80099f6 <HAL_TIM_IC_CaptureCallback>
 800974c:	e005      	b.n	800975a <HAL_TIM_IRQHandler+0xf6>
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f948 	bl	80099e4 <HAL_TIM_OC_DelayElapsedCallback>
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f957 	bl	8009a08 <HAL_TIM_PWM_PulseFinishedCallback>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	771a      	strb	r2, [r3, #28]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b00      	cmp	r3, #0
 8009768:	d020      	beq.n	80097ac <HAL_TIM_IRQHandler+0x148>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01b      	beq.n	80097ac <HAL_TIM_IRQHandler+0x148>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0210 	mvn.w	r2, #16
 800977c:	611a      	str	r2, [r3, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2208      	movs	r2, #8
 8009782:	771a      	strb	r2, [r3, #28]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_TIM_IRQHandler+0x136>
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f92f 	bl	80099f6 <HAL_TIM_IC_CaptureCallback>
 8009798:	e005      	b.n	80097a6 <HAL_TIM_IRQHandler+0x142>
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f922 	bl	80099e4 <HAL_TIM_OC_DelayElapsedCallback>
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f931 	bl	8009a08 <HAL_TIM_PWM_PulseFinishedCallback>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	771a      	strb	r2, [r3, #28]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x16c>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x16c>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0201 	mvn.w	r2, #1
 80097c8:	611a      	str	r2, [r3, #16]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f901 	bl	80099d2 <HAL_TIM_PeriodElapsedCallback>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x190>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x190>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80097ec:	611a      	str	r2, [r3, #16]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa87 	bl	8009d02 <HAL_TIMEx_BreakCallback>
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <HAL_TIM_IRQHandler+0x1b4>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_TIM_IRQHandler+0x1b4>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009810:	611a      	str	r2, [r3, #16]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f901 	bl	8009a1a <HAL_TIM_TriggerCallback>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00c      	beq.n	800983c <HAL_TIM_IRQHandler+0x1d8>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <HAL_TIM_IRQHandler+0x1d8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f06f 0220 	mvn.w	r2, #32
 8009834:	611a      	str	r2, [r3, #16]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa5a 	bl	8009cf0 <HAL_TIMEx_CommutCallback>
 800983c:	bf00      	nop
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_TIM_ConfigClockSource>:
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	73fb      	strb	r3, [r7, #15]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_TIM_ConfigClockSource+0x1c>
 800985c:	2302      	movs	r3, #2
 800985e:	e0b4      	b.n	80099ca <HAL_TIM_ConfigClockSource+0x186>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	60bb      	str	r3, [r7, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800987e:	60bb      	str	r3, [r7, #8]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009886:	60bb      	str	r3, [r7, #8]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	609a      	str	r2, [r3, #8]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009898:	d03e      	beq.n	8009918 <HAL_TIM_ConfigClockSource+0xd4>
 800989a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800989e:	f200 8087 	bhi.w	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a6:	f000 8086 	beq.w	80099b6 <HAL_TIM_ConfigClockSource+0x172>
 80098aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ae:	d87f      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b0:	2b70      	cmp	r3, #112	@ 0x70
 80098b2:	d01a      	beq.n	80098ea <HAL_TIM_ConfigClockSource+0xa6>
 80098b4:	2b70      	cmp	r3, #112	@ 0x70
 80098b6:	d87b      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098b8:	2b60      	cmp	r3, #96	@ 0x60
 80098ba:	d050      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x11a>
 80098bc:	2b60      	cmp	r3, #96	@ 0x60
 80098be:	d877      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c0:	2b50      	cmp	r3, #80	@ 0x50
 80098c2:	d03c      	beq.n	800993e <HAL_TIM_ConfigClockSource+0xfa>
 80098c4:	2b50      	cmp	r3, #80	@ 0x50
 80098c6:	d873      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098c8:	2b40      	cmp	r3, #64	@ 0x40
 80098ca:	d058      	beq.n	800997e <HAL_TIM_ConfigClockSource+0x13a>
 80098cc:	2b40      	cmp	r3, #64	@ 0x40
 80098ce:	d86f      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098d0:	2b30      	cmp	r3, #48	@ 0x30
 80098d2:	d064      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098d4:	2b30      	cmp	r3, #48	@ 0x30
 80098d6:	d86b      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098d8:	2b20      	cmp	r3, #32
 80098da:	d060      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098dc:	2b20      	cmp	r3, #32
 80098de:	d867      	bhi.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d05c      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098e4:	2b10      	cmp	r3, #16
 80098e6:	d05a      	beq.n	800999e <HAL_TIM_ConfigClockSource+0x15a>
 80098e8:	e062      	b.n	80099b0 <HAL_TIM_ConfigClockSource+0x16c>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	6899      	ldr	r1, [r3, #8]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f000 f97c 	bl	8009bf6 <TIM_ETR_SetConfig>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	60bb      	str	r3, [r7, #8]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800990c:	60bb      	str	r3, [r7, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	609a      	str	r2, [r3, #8]
 8009916:	e04f      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6899      	ldr	r1, [r3, #8]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f000 f965 	bl	8009bf6 <TIM_ETR_SetConfig>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800993a:	609a      	str	r2, [r3, #8]
 800993c:	e03c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6859      	ldr	r1, [r3, #4]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	461a      	mov	r2, r3
 800994c:	f000 f8dc 	bl	8009b08 <TIM_TI1_ConfigInputStage>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2150      	movs	r1, #80	@ 0x50
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f933 	bl	8009bc2 <TIM_ITRx_SetConfig>
 800995c:	e02c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	6859      	ldr	r1, [r3, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	461a      	mov	r2, r3
 800996c:	f000 f8fa 	bl	8009b64 <TIM_TI2_ConfigInputStage>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2160      	movs	r1, #96	@ 0x60
 8009976:	4618      	mov	r0, r3
 8009978:	f000 f923 	bl	8009bc2 <TIM_ITRx_SetConfig>
 800997c:	e01c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6818      	ldr	r0, [r3, #0]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	6859      	ldr	r1, [r3, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	461a      	mov	r2, r3
 800998c:	f000 f8bc 	bl	8009b08 <TIM_TI1_ConfigInputStage>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2140      	movs	r1, #64	@ 0x40
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f913 	bl	8009bc2 <TIM_ITRx_SetConfig>
 800999c:	e00c      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f000 f90a 	bl	8009bc2 <TIM_ITRx_SetConfig>
 80099ae:	e003      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
 80099b4:	e000      	b.n	80099b8 <HAL_TIM_ConfigClockSource+0x174>
 80099b6:	bf00      	nop
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_TIM_PeriodElapsedCallback>:
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	bc80      	pop	{r7}
 80099e2:	4770      	bx	lr

080099e4 <HAL_TIM_OC_DelayElapsedCallback>:
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr

080099f6 <HAL_TIM_IC_CaptureCallback>:
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bc80      	pop	{r7}
 8009a06:	4770      	bx	lr

08009a08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bc80      	pop	{r7}
 8009a18:	4770      	bx	lr

08009a1a <HAL_TIM_TriggerCallback>:
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr

08009a2c <TIM_Base_SetConfig>:
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8009afc <TIM_Base_SetConfig+0xd0>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00b      	beq.n	8009a5c <TIM_Base_SetConfig+0x30>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d007      	beq.n	8009a5c <TIM_Base_SetConfig+0x30>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b00 <TIM_Base_SetConfig+0xd4>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_Base_SetConfig+0x30>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a2b      	ldr	r2, [pc, #172]	@ (8009b04 <TIM_Base_SetConfig+0xd8>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d108      	bne.n	8009a6e <TIM_Base_SetConfig+0x42>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a22      	ldr	r2, [pc, #136]	@ (8009afc <TIM_Base_SetConfig+0xd0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00b      	beq.n	8009a8e <TIM_Base_SetConfig+0x62>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7c:	d007      	beq.n	8009a8e <TIM_Base_SetConfig+0x62>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1f      	ldr	r2, [pc, #124]	@ (8009b00 <TIM_Base_SetConfig+0xd4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d003      	beq.n	8009a8e <TIM_Base_SetConfig+0x62>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a1e      	ldr	r2, [pc, #120]	@ (8009b04 <TIM_Base_SetConfig+0xd8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d108      	bne.n	8009aa0 <TIM_Base_SetConfig+0x74>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8009afc <TIM_Base_SetConfig+0xd0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d103      	bne.n	8009ad4 <TIM_Base_SetConfig+0xa8>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	615a      	str	r2, [r3, #20]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <TIM_Base_SetConfig+0xc6>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f023 0201 	bic.w	r2, r3, #1
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	611a      	str	r2, [r3, #16]
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr
 8009afc:	40012c00 	.word	0x40012c00
 8009b00:	40000400 	.word	0x40000400
 8009b04:	40000800 	.word	0x40000800

08009b08 <TIM_TI1_ConfigInputStage>:
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	617b      	str	r3, [r7, #20]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f023 0201 	bic.w	r2, r3, #1
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	621a      	str	r2, [r3, #32]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f023 030a 	bic.w	r3, r3, #10
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	619a      	str	r2, [r3, #24]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	621a      	str	r2, [r3, #32]
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <TIM_TI2_ConfigInputStage>:
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	617b      	str	r3, [r7, #20]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f023 0210 	bic.w	r2, r3, #16
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	621a      	str	r2, [r3, #32]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	613b      	str	r3, [r7, #16]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b8e:	613b      	str	r3, [r7, #16]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	031b      	lsls	r3, r3, #12
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	619a      	str	r2, [r3, #24]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_ITRx_SetConfig>:
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f043 0307 	orr.w	r3, r3, #7
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	609a      	str	r2, [r3, #8]
 8009bec:	bf00      	nop
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bc80      	pop	{r7}
 8009bf4:	4770      	bx	lr

08009bf6 <TIM_ETR_SetConfig>:
 8009bf6:	b480      	push	{r7}
 8009bf8:	b087      	sub	sp, #28
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	60f8      	str	r0, [r7, #12]
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c10:	617b      	str	r3, [r7, #20]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	021a      	lsls	r2, r3, #8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	609a      	str	r2, [r3, #8]
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bc80      	pop	{r7}
 8009c32:	4770      	bx	lr

08009c34 <HAL_TIMEx_MasterConfigSynchronization>:
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e046      	b.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	60bb      	str	r3, [r7, #8]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a16      	ldr	r2, [pc, #88]	@ (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00e      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c98:	d009      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a12      	ldr	r2, [pc, #72]	@ (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d004      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a10      	ldr	r2, [pc, #64]	@ (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d10c      	bne.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cb4:	60bb      	str	r3, [r7, #8]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	609a      	str	r2, [r3, #8]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009cd8:	2300      	movs	r3, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr
 8009ce4:	40012c00 	.word	0x40012c00
 8009ce8:	40000400 	.word	0x40000400
 8009cec:	40000800 	.word	0x40000800

08009cf0 <HAL_TIMEx_CommutCallback>:
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bc80      	pop	{r7}
 8009d00:	4770      	bx	lr

08009d02 <HAL_TIMEx_BreakCallback>:
 8009d02:	b480      	push	{r7}
 8009d04:	b083      	sub	sp, #12
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <memset>:
 8009d14:	4603      	mov	r3, r0
 8009d16:	4402      	add	r2, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d100      	bne.n	8009d1e <memset+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d22:	e7f9      	b.n	8009d18 <memset+0x4>

08009d24 <__errno>:
 8009d24:	4b01      	ldr	r3, [pc, #4]	@ (8009d2c <__errno+0x8>)
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20000024 	.word	0x20000024

08009d30 <__libc_init_array>:
 8009d30:	b570      	push	{r4, r5, r6, lr}
 8009d32:	2600      	movs	r6, #0
 8009d34:	4d0c      	ldr	r5, [pc, #48]	@ (8009d68 <__libc_init_array+0x38>)
 8009d36:	4c0d      	ldr	r4, [pc, #52]	@ (8009d6c <__libc_init_array+0x3c>)
 8009d38:	1b64      	subs	r4, r4, r5
 8009d3a:	10a4      	asrs	r4, r4, #2
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	d109      	bne.n	8009d54 <__libc_init_array+0x24>
 8009d40:	f000 fa04 	bl	800a14c <_init>
 8009d44:	2600      	movs	r6, #0
 8009d46:	4d0a      	ldr	r5, [pc, #40]	@ (8009d70 <__libc_init_array+0x40>)
 8009d48:	4c0a      	ldr	r4, [pc, #40]	@ (8009d74 <__libc_init_array+0x44>)
 8009d4a:	1b64      	subs	r4, r4, r5
 8009d4c:	10a4      	asrs	r4, r4, #2
 8009d4e:	42a6      	cmp	r6, r4
 8009d50:	d105      	bne.n	8009d5e <__libc_init_array+0x2e>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d58:	4798      	blx	r3
 8009d5a:	3601      	adds	r6, #1
 8009d5c:	e7ee      	b.n	8009d3c <__libc_init_array+0xc>
 8009d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d62:	4798      	blx	r3
 8009d64:	3601      	adds	r6, #1
 8009d66:	e7f2      	b.n	8009d4e <__libc_init_array+0x1e>
 8009d68:	0800a1a4 	.word	0x0800a1a4
 8009d6c:	0800a1a4 	.word	0x0800a1a4
 8009d70:	0800a1a4 	.word	0x0800a1a4
 8009d74:	0800a1a8 	.word	0x0800a1a8

08009d78 <log>:
 8009d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	f000 f833 	bl	8009de8 <__ieee754_log>
 8009d82:	4622      	mov	r2, r4
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	462b      	mov	r3, r5
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fe35 	bl	80009fc <__aeabi_dcmpun>
 8009d92:	b998      	cbnz	r0, 8009dbc <log+0x44>
 8009d94:	2200      	movs	r2, #0
 8009d96:	2300      	movs	r3, #0
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fe24 	bl	80009e8 <__aeabi_dcmpgt>
 8009da0:	b960      	cbnz	r0, 8009dbc <log+0x44>
 8009da2:	2200      	movs	r2, #0
 8009da4:	2300      	movs	r3, #0
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fdf5 	bl	8000998 <__aeabi_dcmpeq>
 8009dae:	b140      	cbz	r0, 8009dc2 <log+0x4a>
 8009db0:	f7ff ffb8 	bl	8009d24 <__errno>
 8009db4:	2322      	movs	r3, #34	@ 0x22
 8009db6:	2600      	movs	r6, #0
 8009db8:	4f06      	ldr	r7, [pc, #24]	@ (8009dd4 <log+0x5c>)
 8009dba:	6003      	str	r3, [r0, #0]
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc2:	f7ff ffaf 	bl	8009d24 <__errno>
 8009dc6:	2321      	movs	r3, #33	@ 0x21
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	4803      	ldr	r0, [pc, #12]	@ (8009dd8 <log+0x60>)
 8009dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dd0:	f000 b804 	b.w	8009ddc <nan>
 8009dd4:	fff00000 	.word	0xfff00000
 8009dd8:	0800a1a2 	.word	0x0800a1a2

08009ddc <nan>:
 8009ddc:	2000      	movs	r0, #0
 8009dde:	4901      	ldr	r1, [pc, #4]	@ (8009de4 <nan+0x8>)
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	7ff80000 	.word	0x7ff80000

08009de8 <__ieee754_log>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	460d      	mov	r5, r1
 8009df6:	b087      	sub	sp, #28
 8009df8:	da24      	bge.n	8009e44 <__ieee754_log+0x5c>
 8009dfa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009dfe:	4304      	orrs	r4, r0
 8009e00:	d108      	bne.n	8009e14 <__ieee754_log+0x2c>
 8009e02:	2200      	movs	r2, #0
 8009e04:	2300      	movs	r3, #0
 8009e06:	2000      	movs	r0, #0
 8009e08:	49cb      	ldr	r1, [pc, #812]	@ (800a138 <__ieee754_log+0x350>)
 8009e0a:	f7f6 fc87 	bl	800071c <__aeabi_ddiv>
 8009e0e:	b007      	add	sp, #28
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	2900      	cmp	r1, #0
 8009e16:	da04      	bge.n	8009e22 <__ieee754_log+0x3a>
 8009e18:	f7f6 f99e 	bl	8000158 <__aeabi_dsub>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e7f3      	b.n	8009e0a <__ieee754_log+0x22>
 8009e22:	2200      	movs	r2, #0
 8009e24:	4bc5      	ldr	r3, [pc, #788]	@ (800a13c <__ieee754_log+0x354>)
 8009e26:	f7f6 fb4f 	bl	80004c8 <__aeabi_dmul>
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	4602      	mov	r2, r0
 8009e30:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8009e34:	48c2      	ldr	r0, [pc, #776]	@ (800a140 <__ieee754_log+0x358>)
 8009e36:	4285      	cmp	r5, r0
 8009e38:	dd06      	ble.n	8009e48 <__ieee754_log+0x60>
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f7f6 f98d 	bl	800015c <__adddf3>
 8009e42:	e7e4      	b.n	8009e0e <__ieee754_log+0x26>
 8009e44:	2100      	movs	r1, #0
 8009e46:	e7f5      	b.n	8009e34 <__ieee754_log+0x4c>
 8009e48:	152c      	asrs	r4, r5, #20
 8009e4a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009e4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009e52:	440c      	add	r4, r1
 8009e54:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8009e58:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8009e5c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8009e60:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8009e64:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8009e68:	ea41 0305 	orr.w	r3, r1, r5
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4619      	mov	r1, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	4bb4      	ldr	r3, [pc, #720]	@ (800a144 <__ieee754_log+0x35c>)
 8009e74:	f7f6 f970 	bl	8000158 <__aeabi_dsub>
 8009e78:	1cab      	adds	r3, r5, #2
 8009e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8009e8c:	dc53      	bgt.n	8009f36 <__ieee754_log+0x14e>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7f6 fd82 	bl	8000998 <__aeabi_dcmpeq>
 8009e94:	b1d0      	cbz	r0, 8009ecc <__ieee754_log+0xe4>
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	f000 8120 	beq.w	800a0dc <__ieee754_log+0x2f4>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7f6 faa9 	bl	80003f4 <__aeabi_i2d>
 8009ea2:	a391      	add	r3, pc, #580	@ (adr r3, 800a0e8 <__ieee754_log+0x300>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	460f      	mov	r7, r1
 8009eac:	f7f6 fb0c 	bl	80004c8 <__aeabi_dmul>
 8009eb0:	a38f      	add	r3, pc, #572	@ (adr r3, 800a0f0 <__ieee754_log+0x308>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	460d      	mov	r5, r1
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 fb03 	bl	80004c8 <__aeabi_dmul>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	e7b8      	b.n	8009e3e <__ieee754_log+0x56>
 8009ecc:	a38a      	add	r3, pc, #552	@ (adr r3, 800a0f8 <__ieee754_log+0x310>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	4650      	mov	r0, sl
 8009ed4:	4659      	mov	r1, fp
 8009ed6:	f7f6 faf7 	bl	80004c8 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	2000      	movs	r0, #0
 8009ee0:	4999      	ldr	r1, [pc, #612]	@ (800a148 <__ieee754_log+0x360>)
 8009ee2:	f7f6 f939 	bl	8000158 <__aeabi_dsub>
 8009ee6:	4652      	mov	r2, sl
 8009ee8:	4606      	mov	r6, r0
 8009eea:	460f      	mov	r7, r1
 8009eec:	465b      	mov	r3, fp
 8009eee:	4650      	mov	r0, sl
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	f7f6 fae9 	bl	80004c8 <__aeabi_dmul>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4630      	mov	r0, r6
 8009efc:	4639      	mov	r1, r7
 8009efe:	f7f6 fae3 	bl	80004c8 <__aeabi_dmul>
 8009f02:	4606      	mov	r6, r0
 8009f04:	460f      	mov	r7, r1
 8009f06:	b914      	cbnz	r4, 8009f0e <__ieee754_log+0x126>
 8009f08:	4632      	mov	r2, r6
 8009f0a:	463b      	mov	r3, r7
 8009f0c:	e0a0      	b.n	800a050 <__ieee754_log+0x268>
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7f6 fa70 	bl	80003f4 <__aeabi_i2d>
 8009f14:	a374      	add	r3, pc, #464	@ (adr r3, 800a0e8 <__ieee754_log+0x300>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	f7f6 fad3 	bl	80004c8 <__aeabi_dmul>
 8009f22:	a373      	add	r3, pc, #460	@ (adr r3, 800a0f0 <__ieee754_log+0x308>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 faca 	bl	80004c8 <__aeabi_dmul>
 8009f34:	e0a5      	b.n	800a082 <__ieee754_log+0x29a>
 8009f36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f3a:	f7f6 f90f 	bl	800015c <__adddf3>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4650      	mov	r0, sl
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7f6 fbe9 	bl	800071c <__aeabi_ddiv>
 8009f4a:	e9cd 0100 	strd	r0, r1, [sp]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7f6 fa50 	bl	80003f4 <__aeabi_i2d>
 8009f54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4619      	mov	r1, r3
 8009f60:	f7f6 fab2 	bl	80004c8 <__aeabi_dmul>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f6c:	f7f6 faac 	bl	80004c8 <__aeabi_dmul>
 8009f70:	a363      	add	r3, pc, #396	@ (adr r3, 800a100 <__ieee754_log+0x318>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	4680      	mov	r8, r0
 8009f78:	4689      	mov	r9, r1
 8009f7a:	f7f6 faa5 	bl	80004c8 <__aeabi_dmul>
 8009f7e:	a362      	add	r3, pc, #392	@ (adr r3, 800a108 <__ieee754_log+0x320>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7f6 f8ea 	bl	800015c <__adddf3>
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f7f6 fa9c 	bl	80004c8 <__aeabi_dmul>
 8009f90:	a35f      	add	r3, pc, #380	@ (adr r3, 800a110 <__ieee754_log+0x328>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f7f6 f8e1 	bl	800015c <__adddf3>
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	f7f6 fa93 	bl	80004c8 <__aeabi_dmul>
 8009fa2:	a35d      	add	r3, pc, #372	@ (adr r3, 800a118 <__ieee754_log+0x330>)
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f7f6 f8d8 	bl	800015c <__adddf3>
 8009fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fb0:	f7f6 fa8a 	bl	80004c8 <__aeabi_dmul>
 8009fb4:	a35a      	add	r3, pc, #360	@ (adr r3, 800a120 <__ieee754_log+0x338>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 fa81 	bl	80004c8 <__aeabi_dmul>
 8009fc6:	a358      	add	r3, pc, #352	@ (adr r3, 800a128 <__ieee754_log+0x340>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f7f6 f8c6 	bl	800015c <__adddf3>
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	f7f6 fa78 	bl	80004c8 <__aeabi_dmul>
 8009fd8:	a355      	add	r3, pc, #340	@ (adr r3, 800a130 <__ieee754_log+0x348>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 f8bd 	bl	800015c <__adddf3>
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	464b      	mov	r3, r9
 8009fe6:	f7f6 fa6f 	bl	80004c8 <__aeabi_dmul>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ff2:	f7f6 f8b3 	bl	800015c <__adddf3>
 8009ff6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009ffa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009ffe:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a002:	3551      	adds	r5, #81	@ 0x51
 800a004:	4335      	orrs	r5, r6
 800a006:	2d00      	cmp	r5, #0
 800a008:	4680      	mov	r8, r0
 800a00a:	4689      	mov	r9, r1
 800a00c:	dd48      	ble.n	800a0a0 <__ieee754_log+0x2b8>
 800a00e:	2200      	movs	r2, #0
 800a010:	4b4d      	ldr	r3, [pc, #308]	@ (800a148 <__ieee754_log+0x360>)
 800a012:	4650      	mov	r0, sl
 800a014:	4659      	mov	r1, fp
 800a016:	f7f6 fa57 	bl	80004c8 <__aeabi_dmul>
 800a01a:	4652      	mov	r2, sl
 800a01c:	465b      	mov	r3, fp
 800a01e:	f7f6 fa53 	bl	80004c8 <__aeabi_dmul>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 f895 	bl	800015c <__adddf3>
 800a032:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a036:	f7f6 fa47 	bl	80004c8 <__aeabi_dmul>
 800a03a:	4680      	mov	r8, r0
 800a03c:	4689      	mov	r9, r1
 800a03e:	b964      	cbnz	r4, 800a05a <__ieee754_log+0x272>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 f886 	bl	8000158 <__aeabi_dsub>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 f880 	bl	8000158 <__aeabi_dsub>
 800a058:	e6d9      	b.n	8009e0e <__ieee754_log+0x26>
 800a05a:	a323      	add	r3, pc, #140	@ (adr r3, 800a0e8 <__ieee754_log+0x300>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a064:	f7f6 fa30 	bl	80004c8 <__aeabi_dmul>
 800a068:	a321      	add	r3, pc, #132	@ (adr r3, 800a0f0 <__ieee754_log+0x308>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	4604      	mov	r4, r0
 800a070:	460d      	mov	r5, r1
 800a072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a076:	f7f6 fa27 	bl	80004c8 <__aeabi_dmul>
 800a07a:	4642      	mov	r2, r8
 800a07c:	464b      	mov	r3, r9
 800a07e:	f7f6 f86d 	bl	800015c <__adddf3>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f865 	bl	8000158 <__aeabi_dsub>
 800a08e:	4652      	mov	r2, sl
 800a090:	465b      	mov	r3, fp
 800a092:	f7f6 f861 	bl	8000158 <__aeabi_dsub>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4620      	mov	r0, r4
 800a09c:	4629      	mov	r1, r5
 800a09e:	e7d9      	b.n	800a054 <__ieee754_log+0x26c>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	4659      	mov	r1, fp
 800a0a8:	f7f6 f856 	bl	8000158 <__aeabi_dsub>
 800a0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0b0:	f7f6 fa0a 	bl	80004c8 <__aeabi_dmul>
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	f43f af25 	beq.w	8009f08 <__ieee754_log+0x120>
 800a0be:	a30a      	add	r3, pc, #40	@ (adr r3, 800a0e8 <__ieee754_log+0x300>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0c8:	f7f6 f9fe 	bl	80004c8 <__aeabi_dmul>
 800a0cc:	a308      	add	r3, pc, #32	@ (adr r3, 800a0f0 <__ieee754_log+0x308>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	460d      	mov	r5, r1
 800a0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0da:	e729      	b.n	8009f30 <__ieee754_log+0x148>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	2100      	movs	r1, #0
 800a0e0:	e695      	b.n	8009e0e <__ieee754_log+0x26>
 800a0e2:	bf00      	nop
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	fee00000 	.word	0xfee00000
 800a0ec:	3fe62e42 	.word	0x3fe62e42
 800a0f0:	35793c76 	.word	0x35793c76
 800a0f4:	3dea39ef 	.word	0x3dea39ef
 800a0f8:	55555555 	.word	0x55555555
 800a0fc:	3fd55555 	.word	0x3fd55555
 800a100:	df3e5244 	.word	0xdf3e5244
 800a104:	3fc2f112 	.word	0x3fc2f112
 800a108:	96cb03de 	.word	0x96cb03de
 800a10c:	3fc74664 	.word	0x3fc74664
 800a110:	94229359 	.word	0x94229359
 800a114:	3fd24924 	.word	0x3fd24924
 800a118:	55555593 	.word	0x55555593
 800a11c:	3fe55555 	.word	0x3fe55555
 800a120:	d078c69f 	.word	0xd078c69f
 800a124:	3fc39a09 	.word	0x3fc39a09
 800a128:	1d8e78af 	.word	0x1d8e78af
 800a12c:	3fcc71c5 	.word	0x3fcc71c5
 800a130:	9997fa04 	.word	0x9997fa04
 800a134:	3fd99999 	.word	0x3fd99999
 800a138:	c3500000 	.word	0xc3500000
 800a13c:	43500000 	.word	0x43500000
 800a140:	7fefffff 	.word	0x7fefffff
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	3fe00000 	.word	0x3fe00000

0800a14c <_init>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr

0800a158 <_fini>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr
