
3512_PostBank_DATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004290  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800439c  0800439c  0000539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004500  08004500  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004500  08004500  00005500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004508  08004508  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800450c  0800450c  0000550c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004510  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000060  08004570  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004570  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9e6  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d5  00000000  00000000  00012a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00014c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ac  00000000  00000000  000158b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020f3  00000000  00000000  00016264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4c0  00000000  00000000  00018357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089247  00000000  00000000  00027817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003984  00000000  00000000  000b0aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b4428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004384 	.word	0x08004384

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004384 	.word	0x08004384

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Segments_Scan>:

uint8_t segment_position = 0;
uint8_t segment_value[14] = {0};

void Segments_Scan(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  if(++segment_position > 10)
 8000160:	4b58      	ldr	r3, [pc, #352]	@ (80002c4 <Segments_Scan+0x168>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	3301      	adds	r3, #1
 8000166:	b2da      	uxtb	r2, r3
 8000168:	4b56      	ldr	r3, [pc, #344]	@ (80002c4 <Segments_Scan+0x168>)
 800016a:	701a      	strb	r2, [r3, #0]
 800016c:	4b55      	ldr	r3, [pc, #340]	@ (80002c4 <Segments_Scan+0x168>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0a      	cmp	r3, #10
 8000172:	d902      	bls.n	800017a <Segments_Scan+0x1e>
    segment_position = 0;
 8000174:	4b53      	ldr	r3, [pc, #332]	@ (80002c4 <Segments_Scan+0x168>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(SEG_H1,LOW);
 800017a:	2200      	movs	r2, #0
 800017c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000180:	4851      	ldr	r0, [pc, #324]	@ (80002c8 <Segments_Scan+0x16c>)
 8000182:	f001 fd29 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_H2,LOW);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800018c:	484f      	ldr	r0, [pc, #316]	@ (80002cc <Segments_Scan+0x170>)
 800018e:	f001 fd23 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_M1,LOW);
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000198:	484c      	ldr	r0, [pc, #304]	@ (80002cc <Segments_Scan+0x170>)
 800019a:	f001 fd1d 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_M2,LOW);
 800019e:	2200      	movs	r2, #0
 80001a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a4:	4849      	ldr	r0, [pc, #292]	@ (80002cc <Segments_Scan+0x170>)
 80001a6:	f001 fd17 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_S1,LOW);
 80001aa:	2200      	movs	r2, #0
 80001ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001b0:	4846      	ldr	r0, [pc, #280]	@ (80002cc <Segments_Scan+0x170>)
 80001b2:	f001 fd11 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_S2,LOW);
 80001b6:	2200      	movs	r2, #0
 80001b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001bc:	4843      	ldr	r0, [pc, #268]	@ (80002cc <Segments_Scan+0x170>)
 80001be:	f001 fd0b 	bl	8001bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_DAY,LOW);
 80001c2:	2200      	movs	r2, #0
 80001c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001c8:	4840      	ldr	r0, [pc, #256]	@ (80002cc <Segments_Scan+0x170>)
 80001ca:	f001 fd05 	bl	8001bd8 <HAL_GPIO_WritePin>

  Segment_Map(segment_value[segment_position]);
 80001ce:	4b3d      	ldr	r3, [pc, #244]	@ (80002c4 <Segments_Scan+0x168>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b3e      	ldr	r3, [pc, #248]	@ (80002d0 <Segments_Scan+0x174>)
 80001d6:	5c9b      	ldrb	r3, [r3, r2]
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 f87b 	bl	80002d4 <Segment_Map>

    switch (segment_position)
 80001de:	4b39      	ldr	r3, [pc, #228]	@ (80002c4 <Segments_Scan+0x168>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b06      	cmp	r3, #6
 80001e4:	d841      	bhi.n	800026a <Segments_Scan+0x10e>
 80001e6:	a201      	add	r2, pc, #4	@ (adr r2, 80001ec <Segments_Scan+0x90>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000209 	.word	0x08000209
 80001f0:	08000217 	.word	0x08000217
 80001f4:	08000225 	.word	0x08000225
 80001f8:	08000233 	.word	0x08000233
 80001fc:	08000241 	.word	0x08000241
 8000200:	0800024f 	.word	0x0800024f
 8000204:	0800025d 	.word	0x0800025d
    {
    case 0:
        HAL_GPIO_WritePin(SEG_H1,HIGH);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800020e:	482e      	ldr	r0, [pc, #184]	@ (80002c8 <Segments_Scan+0x16c>)
 8000210:	f001 fce2 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000214:	e054      	b.n	80002c0 <Segments_Scan+0x164>
    case 1:
        HAL_GPIO_WritePin(SEG_H2,HIGH);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800021c:	482b      	ldr	r0, [pc, #172]	@ (80002cc <Segments_Scan+0x170>)
 800021e:	f001 fcdb 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000222:	e04d      	b.n	80002c0 <Segments_Scan+0x164>
    case 2:
        HAL_GPIO_WritePin(SEG_M1,HIGH);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022a:	4828      	ldr	r0, [pc, #160]	@ (80002cc <Segments_Scan+0x170>)
 800022c:	f001 fcd4 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000230:	e046      	b.n	80002c0 <Segments_Scan+0x164>
    case 3:
        HAL_GPIO_WritePin(SEG_M2,HIGH);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000238:	4824      	ldr	r0, [pc, #144]	@ (80002cc <Segments_Scan+0x170>)
 800023a:	f001 fccd 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800023e:	e03f      	b.n	80002c0 <Segments_Scan+0x164>
    case 4:
        HAL_GPIO_WritePin(SEG_S1,HIGH);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000246:	4821      	ldr	r0, [pc, #132]	@ (80002cc <Segments_Scan+0x170>)
 8000248:	f001 fcc6 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800024c:	e038      	b.n	80002c0 <Segments_Scan+0x164>
    case 5:
        HAL_GPIO_WritePin(SEG_S2,HIGH);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000254:	481d      	ldr	r0, [pc, #116]	@ (80002cc <Segments_Scan+0x170>)
 8000256:	f001 fcbf 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800025a:	e031      	b.n	80002c0 <Segments_Scan+0x164>
    case 6:
        HAL_GPIO_WritePin(SEG_DAY,HIGH);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000262:	481a      	ldr	r0, [pc, #104]	@ (80002cc <Segments_Scan+0x170>)
 8000264:	f001 fcb8 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000268:	e02a      	b.n	80002c0 <Segments_Scan+0x164>
    default:
        HAL_GPIO_WritePin(SEG_H1,LOW);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000270:	4815      	ldr	r0, [pc, #84]	@ (80002c8 <Segments_Scan+0x16c>)
 8000272:	f001 fcb1 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_H2,LOW);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800027c:	4813      	ldr	r0, [pc, #76]	@ (80002cc <Segments_Scan+0x170>)
 800027e:	f001 fcab 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M1,LOW);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000288:	4810      	ldr	r0, [pc, #64]	@ (80002cc <Segments_Scan+0x170>)
 800028a:	f001 fca5 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M2,LOW);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000294:	480d      	ldr	r0, [pc, #52]	@ (80002cc <Segments_Scan+0x170>)
 8000296:	f001 fc9f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S1,LOW);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002a0:	480a      	ldr	r0, [pc, #40]	@ (80002cc <Segments_Scan+0x170>)
 80002a2:	f001 fc99 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S2,LOW);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002ac:	4807      	ldr	r0, [pc, #28]	@ (80002cc <Segments_Scan+0x170>)
 80002ae:	f001 fc93 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_DAY,LOW);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <Segments_Scan+0x170>)
 80002ba:	f001 fc8d 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80002be:	bf00      	nop
    }

}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	2000007c 	.word	0x2000007c
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	40010800 	.word	0x40010800
 80002d0:	20000080 	.word	0x20000080

080002d4 <Segment_Map>:

void Segment_Map(uint8_t value)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
    switch (value)
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b74      	cmp	r3, #116	@ 0x74
 80002e2:	f200 849b 	bhi.w	8000c1c <Segment_Map+0x948>
 80002e6:	a201      	add	r2, pc, #4	@ (adr r2, 80002ec <Segment_Map+0x18>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	08000515 	.word	0x08000515
 80002f0:	08000569 	.word	0x08000569
 80002f4:	080005bd 	.word	0x080005bd
 80002f8:	08000611 	.word	0x08000611
 80002fc:	08000665 	.word	0x08000665
 8000300:	080006b9 	.word	0x080006b9
 8000304:	0800070d 	.word	0x0800070d
 8000308:	08000761 	.word	0x08000761
 800030c:	080007b5 	.word	0x080007b5
 8000310:	08000821 	.word	0x08000821
 8000314:	08000c1d 	.word	0x08000c1d
 8000318:	08000c1d 	.word	0x08000c1d
 800031c:	08000c1d 	.word	0x08000c1d
 8000320:	08000c1d 	.word	0x08000c1d
 8000324:	08000c1d 	.word	0x08000c1d
 8000328:	08000c1d 	.word	0x08000c1d
 800032c:	08000c1d 	.word	0x08000c1d
 8000330:	08000c1d 	.word	0x08000c1d
 8000334:	08000c1d 	.word	0x08000c1d
 8000338:	08000c1d 	.word	0x08000c1d
 800033c:	08000c1d 	.word	0x08000c1d
 8000340:	08000c1d 	.word	0x08000c1d
 8000344:	08000c1d 	.word	0x08000c1d
 8000348:	08000c1d 	.word	0x08000c1d
 800034c:	08000c1d 	.word	0x08000c1d
 8000350:	08000c1d 	.word	0x08000c1d
 8000354:	08000c1d 	.word	0x08000c1d
 8000358:	08000c1d 	.word	0x08000c1d
 800035c:	08000c1d 	.word	0x08000c1d
 8000360:	08000c1d 	.word	0x08000c1d
 8000364:	08000c1d 	.word	0x08000c1d
 8000368:	08000c1d 	.word	0x08000c1d
 800036c:	08000c1d 	.word	0x08000c1d
 8000370:	08000c1d 	.word	0x08000c1d
 8000374:	08000c1d 	.word	0x08000c1d
 8000378:	08000c1d 	.word	0x08000c1d
 800037c:	08000c1d 	.word	0x08000c1d
 8000380:	08000c1d 	.word	0x08000c1d
 8000384:	08000c1d 	.word	0x08000c1d
 8000388:	08000c1d 	.word	0x08000c1d
 800038c:	08000c1d 	.word	0x08000c1d
 8000390:	08000c1d 	.word	0x08000c1d
 8000394:	08000c1d 	.word	0x08000c1d
 8000398:	08000c1d 	.word	0x08000c1d
 800039c:	08000c1d 	.word	0x08000c1d
 80003a0:	08000c1d 	.word	0x08000c1d
 80003a4:	08000c1d 	.word	0x08000c1d
 80003a8:	08000c1d 	.word	0x08000c1d
 80003ac:	08000c1d 	.word	0x08000c1d
 80003b0:	08000c1d 	.word	0x08000c1d
 80003b4:	08000c1d 	.word	0x08000c1d
 80003b8:	08000c1d 	.word	0x08000c1d
 80003bc:	08000c1d 	.word	0x08000c1d
 80003c0:	08000c1d 	.word	0x08000c1d
 80003c4:	08000c1d 	.word	0x08000c1d
 80003c8:	08000c1d 	.word	0x08000c1d
 80003cc:	08000c1d 	.word	0x08000c1d
 80003d0:	08000c1d 	.word	0x08000c1d
 80003d4:	08000c1d 	.word	0x08000c1d
 80003d8:	08000c1d 	.word	0x08000c1d
 80003dc:	08000c1d 	.word	0x08000c1d
 80003e0:	08000c1d 	.word	0x08000c1d
 80003e4:	08000c1d 	.word	0x08000c1d
 80003e8:	08000c1d 	.word	0x08000c1d
 80003ec:	08000c1d 	.word	0x08000c1d
 80003f0:	08000c1d 	.word	0x08000c1d
 80003f4:	08000c1d 	.word	0x08000c1d
 80003f8:	080008c9 	.word	0x080008c9
 80003fc:	08000971 	.word	0x08000971
 8000400:	08000c1d 	.word	0x08000c1d
 8000404:	08000bc9 	.word	0x08000bc9
 8000408:	08000c1d 	.word	0x08000c1d
 800040c:	08000b75 	.word	0x08000b75
 8000410:	08000c1d 	.word	0x08000c1d
 8000414:	08000c1d 	.word	0x08000c1d
 8000418:	08000c1d 	.word	0x08000c1d
 800041c:	08000c1d 	.word	0x08000c1d
 8000420:	08000a6d 	.word	0x08000a6d
 8000424:	080004c1 	.word	0x080004c1
 8000428:	08000c1d 	.word	0x08000c1d
 800042c:	08000c1d 	.word	0x08000c1d
 8000430:	08000c1d 	.word	0x08000c1d
 8000434:	08000c1d 	.word	0x08000c1d
 8000438:	08000a19 	.word	0x08000a19
 800043c:	08000ac1 	.word	0x08000ac1
 8000440:	0800091d 	.word	0x0800091d
 8000444:	08000c1d 	.word	0x08000c1d
 8000448:	08000b15 	.word	0x08000b15
 800044c:	08000c1d 	.word	0x08000c1d
 8000450:	08000c1d 	.word	0x08000c1d
 8000454:	08000c1d 	.word	0x08000c1d
 8000458:	08000c1d 	.word	0x08000c1d
 800045c:	08000c1d 	.word	0x08000c1d
 8000460:	08000c1d 	.word	0x08000c1d
 8000464:	08000c1d 	.word	0x08000c1d
 8000468:	08000c1d 	.word	0x08000c1d
 800046c:	08000c1d 	.word	0x08000c1d
 8000470:	08000c1d 	.word	0x08000c1d
 8000474:	08000c1d 	.word	0x08000c1d
 8000478:	08000c1d 	.word	0x08000c1d
 800047c:	08000c1d 	.word	0x08000c1d
 8000480:	08000c1d 	.word	0x08000c1d
 8000484:	08000c1d 	.word	0x08000c1d
 8000488:	08000c1d 	.word	0x08000c1d
 800048c:	08000c1d 	.word	0x08000c1d
 8000490:	08000c1d 	.word	0x08000c1d
 8000494:	08000c1d 	.word	0x08000c1d
 8000498:	08000c1d 	.word	0x08000c1d
 800049c:	08000c1d 	.word	0x08000c1d
 80004a0:	08000c1d 	.word	0x08000c1d
 80004a4:	08000c1d 	.word	0x08000c1d
 80004a8:	08000875 	.word	0x08000875
 80004ac:	08000c1d 	.word	0x08000c1d
 80004b0:	08000c1d 	.word	0x08000c1d
 80004b4:	08000c1d 	.word	0x08000c1d
 80004b8:	08000c1d 	.word	0x08000c1d
 80004bc:	080009c5 	.word	0x080009c5
    {
    case 'N':
        HAL_GPIO_WritePin(A,LOW);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004c6:	48d3      	ldr	r0, [pc, #844]	@ (8000814 <Segment_Map+0x540>)
 80004c8:	f001 fb86 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004d2:	48d0      	ldr	r0, [pc, #832]	@ (8000814 <Segment_Map+0x540>)
 80004d4:	f001 fb80 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004de:	48cd      	ldr	r0, [pc, #820]	@ (8000814 <Segment_Map+0x540>)
 80004e0:	f001 fb7a 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2101      	movs	r1, #1
 80004e8:	48cb      	ldr	r0, [pc, #812]	@ (8000818 <Segment_Map+0x544>)
 80004ea:	f001 fb75 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004f4:	48c9      	ldr	r0, [pc, #804]	@ (800081c <Segment_Map+0x548>)
 80004f6:	f001 fb6f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000500:	48c4      	ldr	r0, [pc, #784]	@ (8000814 <Segment_Map+0x540>)
 8000502:	f001 fb69 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	48c3      	ldr	r0, [pc, #780]	@ (800081c <Segment_Map+0x548>)
 800050e:	f001 fb63 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000512:	e3ad      	b.n	8000c70 <Segment_Map+0x99c>
    case 0:
        HAL_GPIO_WritePin(A,HIGH);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800051a:	48be      	ldr	r0, [pc, #760]	@ (8000814 <Segment_Map+0x540>)
 800051c:	f001 fb5c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000526:	48bb      	ldr	r0, [pc, #748]	@ (8000814 <Segment_Map+0x540>)
 8000528:	f001 fb56 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000532:	48b8      	ldr	r0, [pc, #736]	@ (8000814 <Segment_Map+0x540>)
 8000534:	f001 fb50 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	48b6      	ldr	r0, [pc, #728]	@ (8000818 <Segment_Map+0x544>)
 800053e:	f001 fb4b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000548:	48b4      	ldr	r0, [pc, #720]	@ (800081c <Segment_Map+0x548>)
 800054a:	f001 fb45 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000554:	48af      	ldr	r0, [pc, #700]	@ (8000814 <Segment_Map+0x540>)
 8000556:	f001 fb3f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000560:	48ae      	ldr	r0, [pc, #696]	@ (800081c <Segment_Map+0x548>)
 8000562:	f001 fb39 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000566:	e383      	b.n	8000c70 <Segment_Map+0x99c>
    case 1:
        HAL_GPIO_WritePin(A,LOW);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800056e:	48a9      	ldr	r0, [pc, #676]	@ (8000814 <Segment_Map+0x540>)
 8000570:	f001 fb32 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057a:	48a6      	ldr	r0, [pc, #664]	@ (8000814 <Segment_Map+0x540>)
 800057c:	f001 fb2c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000586:	48a3      	ldr	r0, [pc, #652]	@ (8000814 <Segment_Map+0x540>)
 8000588:	f001 fb26 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	48a1      	ldr	r0, [pc, #644]	@ (8000818 <Segment_Map+0x544>)
 8000592:	f001 fb21 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059c:	489f      	ldr	r0, [pc, #636]	@ (800081c <Segment_Map+0x548>)
 800059e:	f001 fb1b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a8:	489a      	ldr	r0, [pc, #616]	@ (8000814 <Segment_Map+0x540>)
 80005aa:	f001 fb15 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b4:	4899      	ldr	r0, [pc, #612]	@ (800081c <Segment_Map+0x548>)
 80005b6:	f001 fb0f 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80005ba:	e359      	b.n	8000c70 <Segment_Map+0x99c>
    case 2:
        HAL_GPIO_WritePin(A,HIGH);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c2:	4894      	ldr	r0, [pc, #592]	@ (8000814 <Segment_Map+0x540>)
 80005c4:	f001 fb08 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ce:	4891      	ldr	r0, [pc, #580]	@ (8000814 <Segment_Map+0x540>)
 80005d0:	f001 fb02 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005da:	488e      	ldr	r0, [pc, #568]	@ (8000814 <Segment_Map+0x540>)
 80005dc:	f001 fafc 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2101      	movs	r1, #1
 80005e4:	488c      	ldr	r0, [pc, #560]	@ (8000818 <Segment_Map+0x544>)
 80005e6:	f001 faf7 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f0:	488a      	ldr	r0, [pc, #552]	@ (800081c <Segment_Map+0x548>)
 80005f2:	f001 faf1 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fc:	4885      	ldr	r0, [pc, #532]	@ (8000814 <Segment_Map+0x540>)
 80005fe:	f001 faeb 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000608:	4884      	ldr	r0, [pc, #528]	@ (800081c <Segment_Map+0x548>)
 800060a:	f001 fae5 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800060e:	e32f      	b.n	8000c70 <Segment_Map+0x99c>
    case 3:
        HAL_GPIO_WritePin(A,HIGH);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	487f      	ldr	r0, [pc, #508]	@ (8000814 <Segment_Map+0x540>)
 8000618:	f001 fade 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000622:	487c      	ldr	r0, [pc, #496]	@ (8000814 <Segment_Map+0x540>)
 8000624:	f001 fad8 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4879      	ldr	r0, [pc, #484]	@ (8000814 <Segment_Map+0x540>)
 8000630:	f001 fad2 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4877      	ldr	r0, [pc, #476]	@ (8000818 <Segment_Map+0x544>)
 800063a:	f001 facd 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000644:	4875      	ldr	r0, [pc, #468]	@ (800081c <Segment_Map+0x548>)
 8000646:	f001 fac7 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000650:	4870      	ldr	r0, [pc, #448]	@ (8000814 <Segment_Map+0x540>)
 8000652:	f001 fac1 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065c:	486f      	ldr	r0, [pc, #444]	@ (800081c <Segment_Map+0x548>)
 800065e:	f001 fabb 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000662:	e305      	b.n	8000c70 <Segment_Map+0x99c>
    case 4:
        HAL_GPIO_WritePin(A,LOW);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066a:	486a      	ldr	r0, [pc, #424]	@ (8000814 <Segment_Map+0x540>)
 800066c:	f001 fab4 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000676:	4867      	ldr	r0, [pc, #412]	@ (8000814 <Segment_Map+0x540>)
 8000678:	f001 faae 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000682:	4864      	ldr	r0, [pc, #400]	@ (8000814 <Segment_Map+0x540>)
 8000684:	f001 faa8 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000688:	2200      	movs	r2, #0
 800068a:	2101      	movs	r1, #1
 800068c:	4862      	ldr	r0, [pc, #392]	@ (8000818 <Segment_Map+0x544>)
 800068e:	f001 faa3 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000698:	4860      	ldr	r0, [pc, #384]	@ (800081c <Segment_Map+0x548>)
 800069a:	f001 fa9d 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a4:	485b      	ldr	r0, [pc, #364]	@ (8000814 <Segment_Map+0x540>)
 80006a6:	f001 fa97 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b0:	485a      	ldr	r0, [pc, #360]	@ (800081c <Segment_Map+0x548>)
 80006b2:	f001 fa91 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80006b6:	e2db      	b.n	8000c70 <Segment_Map+0x99c>
    case 5:
        HAL_GPIO_WritePin(A,HIGH);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006be:	4855      	ldr	r0, [pc, #340]	@ (8000814 <Segment_Map+0x540>)
 80006c0:	f001 fa8a 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ca:	4852      	ldr	r0, [pc, #328]	@ (8000814 <Segment_Map+0x540>)
 80006cc:	f001 fa84 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d6:	484f      	ldr	r0, [pc, #316]	@ (8000814 <Segment_Map+0x540>)
 80006d8:	f001 fa7e 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80006dc:	2201      	movs	r2, #1
 80006de:	2101      	movs	r1, #1
 80006e0:	484d      	ldr	r0, [pc, #308]	@ (8000818 <Segment_Map+0x544>)
 80006e2:	f001 fa79 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ec:	484b      	ldr	r0, [pc, #300]	@ (800081c <Segment_Map+0x548>)
 80006ee:	f001 fa73 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f8:	4846      	ldr	r0, [pc, #280]	@ (8000814 <Segment_Map+0x540>)
 80006fa:	f001 fa6d 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4845      	ldr	r0, [pc, #276]	@ (800081c <Segment_Map+0x548>)
 8000706:	f001 fa67 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800070a:	e2b1      	b.n	8000c70 <Segment_Map+0x99c>
    case 6:
        HAL_GPIO_WritePin(A,HIGH);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000712:	4840      	ldr	r0, [pc, #256]	@ (8000814 <Segment_Map+0x540>)
 8000714:	f001 fa60 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071e:	483d      	ldr	r0, [pc, #244]	@ (8000814 <Segment_Map+0x540>)
 8000720:	f001 fa5a 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072a:	483a      	ldr	r0, [pc, #232]	@ (8000814 <Segment_Map+0x540>)
 800072c:	f001 fa54 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4838      	ldr	r0, [pc, #224]	@ (8000818 <Segment_Map+0x544>)
 8000736:	f001 fa4f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000740:	4836      	ldr	r0, [pc, #216]	@ (800081c <Segment_Map+0x548>)
 8000742:	f001 fa49 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800074c:	4831      	ldr	r0, [pc, #196]	@ (8000814 <Segment_Map+0x540>)
 800074e:	f001 fa43 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000758:	4830      	ldr	r0, [pc, #192]	@ (800081c <Segment_Map+0x548>)
 800075a:	f001 fa3d 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800075e:	e287      	b.n	8000c70 <Segment_Map+0x99c>
    case 7:
        HAL_GPIO_WritePin(A,HIGH);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000766:	482b      	ldr	r0, [pc, #172]	@ (8000814 <Segment_Map+0x540>)
 8000768:	f001 fa36 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000772:	4828      	ldr	r0, [pc, #160]	@ (8000814 <Segment_Map+0x540>)
 8000774:	f001 fa30 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077e:	4825      	ldr	r0, [pc, #148]	@ (8000814 <Segment_Map+0x540>)
 8000780:	f001 fa2a 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4823      	ldr	r0, [pc, #140]	@ (8000818 <Segment_Map+0x544>)
 800078a:	f001 fa25 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000794:	4821      	ldr	r0, [pc, #132]	@ (800081c <Segment_Map+0x548>)
 8000796:	f001 fa1f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a0:	481c      	ldr	r0, [pc, #112]	@ (8000814 <Segment_Map+0x540>)
 80007a2:	f001 fa19 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	481b      	ldr	r0, [pc, #108]	@ (800081c <Segment_Map+0x548>)
 80007ae:	f001 fa13 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80007b2:	e25d      	b.n	8000c70 <Segment_Map+0x99c>
    case 8:
        HAL_GPIO_WritePin(A,HIGH);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ba:	4816      	ldr	r0, [pc, #88]	@ (8000814 <Segment_Map+0x540>)
 80007bc:	f001 fa0c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A,HIGH);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c6:	4813      	ldr	r0, [pc, #76]	@ (8000814 <Segment_Map+0x540>)
 80007c8:	f001 fa06 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d2:	4810      	ldr	r0, [pc, #64]	@ (8000814 <Segment_Map+0x540>)
 80007d4:	f001 fa00 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <Segment_Map+0x540>)
 80007e0:	f001 f9fa 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <Segment_Map+0x544>)
 80007ea:	f001 f9f5 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f4:	4809      	ldr	r0, [pc, #36]	@ (800081c <Segment_Map+0x548>)
 80007f6:	f001 f9ef 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <Segment_Map+0x540>)
 8000802:	f001 f9e9 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080c:	4803      	ldr	r0, [pc, #12]	@ (800081c <Segment_Map+0x548>)
 800080e:	f001 f9e3 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000812:	e22d      	b.n	8000c70 <Segment_Map+0x99c>
 8000814:	40010c00 	.word	0x40010c00
 8000818:	40010800 	.word	0x40010800
 800081c:	40011000 	.word	0x40011000
    case 9:
        HAL_GPIO_WritePin(A,HIGH);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000826:	48d0      	ldr	r0, [pc, #832]	@ (8000b68 <Segment_Map+0x894>)
 8000828:	f001 f9d6 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000832:	48cd      	ldr	r0, [pc, #820]	@ (8000b68 <Segment_Map+0x894>)
 8000834:	f001 f9d0 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083e:	48ca      	ldr	r0, [pc, #808]	@ (8000b68 <Segment_Map+0x894>)
 8000840:	f001 f9ca 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000844:	2201      	movs	r2, #1
 8000846:	2101      	movs	r1, #1
 8000848:	48c8      	ldr	r0, [pc, #800]	@ (8000b6c <Segment_Map+0x898>)
 800084a:	f001 f9c5 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000854:	48c6      	ldr	r0, [pc, #792]	@ (8000b70 <Segment_Map+0x89c>)
 8000856:	f001 f9bf 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000860:	48c1      	ldr	r0, [pc, #772]	@ (8000b68 <Segment_Map+0x894>)
 8000862:	f001 f9b9 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	48c0      	ldr	r0, [pc, #768]	@ (8000b70 <Segment_Map+0x89c>)
 800086e:	f001 f9b3 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000872:	e1fd      	b.n	8000c70 <Segment_Map+0x99c>
    case 'o':
        HAL_GPIO_WritePin(A,HIGH);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800087a:	48bb      	ldr	r0, [pc, #748]	@ (8000b68 <Segment_Map+0x894>)
 800087c:	f001 f9ac 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000886:	48b8      	ldr	r0, [pc, #736]	@ (8000b68 <Segment_Map+0x894>)
 8000888:	f001 f9a6 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000892:	48b5      	ldr	r0, [pc, #724]	@ (8000b68 <Segment_Map+0x894>)
 8000894:	f001 f9a0 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	48b3      	ldr	r0, [pc, #716]	@ (8000b6c <Segment_Map+0x898>)
 800089e:	f001 f99b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a8:	48b1      	ldr	r0, [pc, #708]	@ (8000b70 <Segment_Map+0x89c>)
 80008aa:	f001 f995 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b4:	48ac      	ldr	r0, [pc, #688]	@ (8000b68 <Segment_Map+0x894>)
 80008b6:	f001 f98f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	48ab      	ldr	r0, [pc, #684]	@ (8000b70 <Segment_Map+0x89c>)
 80008c2:	f001 f989 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80008c6:	e1d3      	b.n	8000c70 <Segment_Map+0x99c>
    case 'C':
        HAL_GPIO_WritePin(A,HIGH);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008ce:	48a6      	ldr	r0, [pc, #664]	@ (8000b68 <Segment_Map+0x894>)
 80008d0:	f001 f982 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008da:	48a3      	ldr	r0, [pc, #652]	@ (8000b68 <Segment_Map+0x894>)
 80008dc:	f001 f97c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e6:	48a0      	ldr	r0, [pc, #640]	@ (8000b68 <Segment_Map+0x894>)
 80008e8:	f001 f976 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	489e      	ldr	r0, [pc, #632]	@ (8000b6c <Segment_Map+0x898>)
 80008f2:	f001 f971 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	489c      	ldr	r0, [pc, #624]	@ (8000b70 <Segment_Map+0x89c>)
 80008fe:	f001 f96b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000908:	4897      	ldr	r0, [pc, #604]	@ (8000b68 <Segment_Map+0x894>)
 800090a:	f001 f965 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000914:	4896      	ldr	r0, [pc, #600]	@ (8000b70 <Segment_Map+0x89c>)
 8000916:	f001 f95f 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800091a:	e1a9      	b.n	8000c70 <Segment_Map+0x99c>
    case 'U':
        HAL_GPIO_WritePin(A,HIGH);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000922:	4891      	ldr	r0, [pc, #580]	@ (8000b68 <Segment_Map+0x894>)
 8000924:	f001 f958 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092e:	488e      	ldr	r0, [pc, #568]	@ (8000b68 <Segment_Map+0x894>)
 8000930:	f001 f952 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093a:	488b      	ldr	r0, [pc, #556]	@ (8000b68 <Segment_Map+0x894>)
 800093c:	f001 f94c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4889      	ldr	r0, [pc, #548]	@ (8000b6c <Segment_Map+0x898>)
 8000946:	f001 f947 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000950:	4887      	ldr	r0, [pc, #540]	@ (8000b70 <Segment_Map+0x89c>)
 8000952:	f001 f941 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	4882      	ldr	r0, [pc, #520]	@ (8000b68 <Segment_Map+0x894>)
 800095e:	f001 f93b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	4881      	ldr	r0, [pc, #516]	@ (8000b70 <Segment_Map+0x89c>)
 800096a:	f001 f935 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 800096e:	e17f      	b.n	8000c70 <Segment_Map+0x99c>
    case 'D':
        HAL_GPIO_WritePin(A,LOW);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000976:	487c      	ldr	r0, [pc, #496]	@ (8000b68 <Segment_Map+0x894>)
 8000978:	f001 f92e 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000982:	4879      	ldr	r0, [pc, #484]	@ (8000b68 <Segment_Map+0x894>)
 8000984:	f001 f928 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800098e:	4876      	ldr	r0, [pc, #472]	@ (8000b68 <Segment_Map+0x894>)
 8000990:	f001 f922 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	4874      	ldr	r0, [pc, #464]	@ (8000b6c <Segment_Map+0x898>)
 800099a:	f001 f91d 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a4:	4872      	ldr	r0, [pc, #456]	@ (8000b70 <Segment_Map+0x89c>)
 80009a6:	f001 f917 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	486d      	ldr	r0, [pc, #436]	@ (8000b68 <Segment_Map+0x894>)
 80009b2:	f001 f911 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009bc:	486c      	ldr	r0, [pc, #432]	@ (8000b70 <Segment_Map+0x89c>)
 80009be:	f001 f90b 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 80009c2:	e155      	b.n	8000c70 <Segment_Map+0x99c>
    case 't':
        HAL_GPIO_WritePin(A,LOW);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ca:	4867      	ldr	r0, [pc, #412]	@ (8000b68 <Segment_Map+0x894>)
 80009cc:	f001 f904 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d6:	4864      	ldr	r0, [pc, #400]	@ (8000b68 <Segment_Map+0x894>)
 80009d8:	f001 f8fe 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e2:	4861      	ldr	r0, [pc, #388]	@ (8000b68 <Segment_Map+0x894>)
 80009e4:	f001 f8f8 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	485f      	ldr	r0, [pc, #380]	@ (8000b6c <Segment_Map+0x898>)
 80009ee:	f001 f8f3 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f8:	485d      	ldr	r0, [pc, #372]	@ (8000b70 <Segment_Map+0x89c>)
 80009fa:	f001 f8ed 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4858      	ldr	r0, [pc, #352]	@ (8000b68 <Segment_Map+0x894>)
 8000a06:	f001 f8e7 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a10:	4857      	ldr	r0, [pc, #348]	@ (8000b70 <Segment_Map+0x89c>)
 8000a12:	f001 f8e1 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000a16:	e12b      	b.n	8000c70 <Segment_Map+0x99c>
    case 'S':
        HAL_GPIO_WritePin(A,LOW);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1e:	4852      	ldr	r0, [pc, #328]	@ (8000b68 <Segment_Map+0x894>)
 8000a20:	f001 f8da 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a2a:	484f      	ldr	r0, [pc, #316]	@ (8000b68 <Segment_Map+0x894>)
 8000a2c:	f001 f8d4 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a36:	484c      	ldr	r0, [pc, #304]	@ (8000b68 <Segment_Map+0x894>)
 8000a38:	f001 f8ce 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	484a      	ldr	r0, [pc, #296]	@ (8000b6c <Segment_Map+0x898>)
 8000a42:	f001 f8c9 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4c:	4848      	ldr	r0, [pc, #288]	@ (8000b70 <Segment_Map+0x89c>)
 8000a4e:	f001 f8c3 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8000a52:	2201      	movs	r2, #1
 8000a54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a58:	4843      	ldr	r0, [pc, #268]	@ (8000b68 <Segment_Map+0x894>)
 8000a5a:	f001 f8bd 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a64:	4842      	ldr	r0, [pc, #264]	@ (8000b70 <Segment_Map+0x89c>)
 8000a66:	f001 f8b7 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000a6a:	e101      	b.n	8000c70 <Segment_Map+0x99c>
    case 'M':
        HAL_GPIO_WritePin(A,LOW);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a72:	483d      	ldr	r0, [pc, #244]	@ (8000b68 <Segment_Map+0x894>)
 8000a74:	f001 f8b0 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7e:	483a      	ldr	r0, [pc, #232]	@ (8000b68 <Segment_Map+0x894>)
 8000a80:	f001 f8aa 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a8a:	4837      	ldr	r0, [pc, #220]	@ (8000b68 <Segment_Map+0x894>)
 8000a8c:	f001 f8a4 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	4835      	ldr	r0, [pc, #212]	@ (8000b6c <Segment_Map+0x898>)
 8000a96:	f001 f89f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa0:	4833      	ldr	r0, [pc, #204]	@ (8000b70 <Segment_Map+0x89c>)
 8000aa2:	f001 f899 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aac:	482e      	ldr	r0, [pc, #184]	@ (8000b68 <Segment_Map+0x894>)
 8000aae:	f001 f893 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab8:	482d      	ldr	r0, [pc, #180]	@ (8000b70 <Segment_Map+0x89c>)
 8000aba:	f001 f88d 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000abe:	e0d7      	b.n	8000c70 <Segment_Map+0x99c>
    case 'T':
        HAL_GPIO_WritePin(A,LOW);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac6:	4828      	ldr	r0, [pc, #160]	@ (8000b68 <Segment_Map+0x894>)
 8000ac8:	f001 f886 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad2:	4825      	ldr	r0, [pc, #148]	@ (8000b68 <Segment_Map+0x894>)
 8000ad4:	f001 f880 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ade:	4822      	ldr	r0, [pc, #136]	@ (8000b68 <Segment_Map+0x894>)
 8000ae0:	f001 f87a 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4820      	ldr	r0, [pc, #128]	@ (8000b6c <Segment_Map+0x898>)
 8000aea:	f001 f875 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000af4:	481e      	ldr	r0, [pc, #120]	@ (8000b70 <Segment_Map+0x89c>)
 8000af6:	f001 f86f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b00:	4819      	ldr	r0, [pc, #100]	@ (8000b68 <Segment_Map+0x894>)
 8000b02:	f001 f869 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b0c:	4818      	ldr	r0, [pc, #96]	@ (8000b70 <Segment_Map+0x89c>)
 8000b0e:	f001 f863 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000b12:	e0ad      	b.n	8000c70 <Segment_Map+0x99c>
    case 'W':
        HAL_GPIO_WritePin(A,LOW);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <Segment_Map+0x894>)
 8000b1c:	f001 f85c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b26:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <Segment_Map+0x894>)
 8000b28:	f001 f856 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b32:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <Segment_Map+0x894>)
 8000b34:	f001 f850 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <Segment_Map+0x898>)
 8000b3e:	f001 f84b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b48:	4809      	ldr	r0, [pc, #36]	@ (8000b70 <Segment_Map+0x89c>)
 8000b4a:	f001 f845 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <Segment_Map+0x894>)
 8000b56:	f001 f83f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b60:	4803      	ldr	r0, [pc, #12]	@ (8000b70 <Segment_Map+0x89c>)
 8000b62:	f001 f839 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000b66:	e083      	b.n	8000c70 <Segment_Map+0x99c>
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40011000 	.word	0x40011000
    case 'H':
        HAL_GPIO_WritePin(A,LOW);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7a:	483f      	ldr	r0, [pc, #252]	@ (8000c78 <Segment_Map+0x9a4>)
 8000b7c:	f001 f82c 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b86:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <Segment_Map+0x9a4>)
 8000b88:	f001 f826 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b92:	4839      	ldr	r0, [pc, #228]	@ (8000c78 <Segment_Map+0x9a4>)
 8000b94:	f001 f820 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4837      	ldr	r0, [pc, #220]	@ (8000c7c <Segment_Map+0x9a8>)
 8000b9e:	f001 f81b 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba8:	4835      	ldr	r0, [pc, #212]	@ (8000c80 <Segment_Map+0x9ac>)
 8000baa:	f001 f815 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bb4:	4830      	ldr	r0, [pc, #192]	@ (8000c78 <Segment_Map+0x9a4>)
 8000bb6:	f001 f80f 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc0:	482f      	ldr	r0, [pc, #188]	@ (8000c80 <Segment_Map+0x9ac>)
 8000bc2:	f001 f809 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000bc6:	e053      	b.n	8000c70 <Segment_Map+0x99c>
    case 'F':
        HAL_GPIO_WritePin(A,LOW);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bce:	482a      	ldr	r0, [pc, #168]	@ (8000c78 <Segment_Map+0x9a4>)
 8000bd0:	f001 f802 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bda:	4827      	ldr	r0, [pc, #156]	@ (8000c78 <Segment_Map+0x9a4>)
 8000bdc:	f000 fffc 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be6:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <Segment_Map+0x9a4>)
 8000be8:	f000 fff6 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4822      	ldr	r0, [pc, #136]	@ (8000c7c <Segment_Map+0x9a8>)
 8000bf2:	f000 fff1 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfc:	4820      	ldr	r0, [pc, #128]	@ (8000c80 <Segment_Map+0x9ac>)
 8000bfe:	f000 ffeb 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	481b      	ldr	r0, [pc, #108]	@ (8000c78 <Segment_Map+0x9a4>)
 8000c0a:	f000 ffe5 	bl	8001bd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c14:	481a      	ldr	r0, [pc, #104]	@ (8000c80 <Segment_Map+0x9ac>)
 8000c16:	f000 ffdf 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000c1a:	e029      	b.n	8000c70 <Segment_Map+0x99c>
    default:
    	HAL_GPIO_WritePin(A,LOW);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c22:	4815      	ldr	r0, [pc, #84]	@ (8000c78 <Segment_Map+0x9a4>)
 8000c24:	f000 ffd8 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B,LOW);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <Segment_Map+0x9a4>)
 8000c30:	f000 ffd2 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C,LOW);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3a:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <Segment_Map+0x9a4>)
 8000c3c:	f000 ffcc 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D,LOW);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <Segment_Map+0x9a8>)
 8000c46:	f000 ffc7 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E,LOW);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <Segment_Map+0x9ac>)
 8000c52:	f000 ffc1 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F,LOW);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c5c:	4806      	ldr	r0, [pc, #24]	@ (8000c78 <Segment_Map+0x9a4>)
 8000c5e:	f000 ffbb 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G,HIGH);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <Segment_Map+0x9ac>)
 8000c6a:	f000 ffb5 	bl	8001bd8 <HAL_GPIO_WritePin>
        break;
 8000c6e:	bf00      	nop
    }
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40011000 	.word	0x40011000

08000c84 <Segment_Set>:

void Segment_Set(uint8_t seg, uint8_t value)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]

    segment_value[seg] = value;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4904      	ldr	r1, [pc, #16]	@ (8000ca8 <Segment_Set+0x24>)
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	54ca      	strb	r2, [r1, r3]

}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000080 	.word	0x20000080

08000cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a38      	ldr	r2, [pc, #224]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0310 	and.w	r3, r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd8:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a32      	ldr	r2, [pc, #200]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b30      	ldr	r3, [pc, #192]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b27      	ldr	r3, [pc, #156]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a26      	ldr	r2, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b24      	ldr	r3, [pc, #144]	@ (8000da8 <MX_GPIO_Init+0xfc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|E_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d26:	4821      	ldr	r0, [pc, #132]	@ (8000dac <MX_GPIO_Init+0x100>)
 8000d28:	f000 ff56 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin|Seg_4_VCC_Pin
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f649 7101 	movw	r1, #40705	@ 0x9f01
 8000d32:	481f      	ldr	r0, [pc, #124]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d34:	f000 ff50 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Date_Point_Pin|A_Pin|F_Pin|B_Pin
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f24f 2121 	movw	r1, #61985	@ 0xf221
 8000d3e:	481d      	ldr	r0, [pc, #116]	@ (8000db4 <MX_GPIO_Init+0x108>)
 8000d40:	f000 ff4a 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |Seg_1_VCC_Pin|Buzzer_Pin|C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : G_Pin E_Pin */
  GPIO_InitStruct.Pin = G_Pin|E_Pin;
 8000d44:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_GPIO_Init+0x100>)
 8000d5e:	f000 fdb7 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin Seg_2_VCC_Pin Seg_3_VCC_Pin Seg_4_VCC_Pin
                           Seg_5_VCC_Pin Seg_6_VCC_Pin Seg_7_VCC_Pin */
  GPIO_InitStruct.Pin = D_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin|Seg_4_VCC_Pin
 8000d62:	f649 7301 	movw	r3, #40705	@ 0x9f01
 8000d66:	613b      	str	r3, [r7, #16]
                          |Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_GPIO_Init+0x104>)
 8000d7c:	f000 fda8 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Date_Point_Pin A_Pin F_Pin B_Pin
                           Seg_1_VCC_Pin Buzzer_Pin C_Pin */
  GPIO_InitStruct.Pin = Date_Point_Pin|A_Pin|F_Pin|B_Pin
 8000d80:	f24f 2321 	movw	r3, #61985	@ 0xf221
 8000d84:	613b      	str	r3, [r7, #16]
                          |Seg_1_VCC_Pin|Buzzer_Pin|C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_GPIO_Init+0x108>)
 8000d9a:	f000 fd99 	bl	80018d0 <HAL_GPIO_Init>

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f000 fb41 	bl	8001444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f8fb 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f7ff ff71 	bl	8000cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dca:	f000 fa29 	bl	8001220 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000dce:	f000 fa97 	bl	8001300 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 HAL_UART_Receive_IT(&huart2, &received_data, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	496d      	ldr	r1, [pc, #436]	@ (8000f8c <main+0x1d4>)
 8000dd6:	486e      	ldr	r0, [pc, #440]	@ (8000f90 <main+0x1d8>)
 8000dd8:	f001 ff70 	bl	8002cbc <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ddc:	486d      	ldr	r0, [pc, #436]	@ (8000f94 <main+0x1dc>)
 8000dde:	f001 fb73 	bl	80024c8 <HAL_TIM_Base_Start_IT>
  for (int i = 0; i < 10; i++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e02e      	b.n	8000e46 <main+0x8e>
    {
      Segment_Set(0,i);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ff48 	bl	8000c84 <Segment_Set>
      Segment_Set(1,i);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff42 	bl	8000c84 <Segment_Set>
      Segment_Set(2,i);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff ff3c 	bl	8000c84 <Segment_Set>
      Segment_Set(3,i);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	2003      	movs	r0, #3
 8000e14:	f7ff ff36 	bl	8000c84 <Segment_Set>
      Segment_Set(4,i);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2004      	movs	r0, #4
 8000e20:	f7ff ff30 	bl	8000c84 <Segment_Set>
      Segment_Set(5,i);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2005      	movs	r0, #5
 8000e2c:	f7ff ff2a 	bl	8000c84 <Segment_Set>
      HAL_Delay(200);
 8000e30:	20c8      	movs	r0, #200	@ 0xc8
 8000e32:	f000 fb69 	bl	8001508 <HAL_Delay>
      //HAL_GPIO_WritePin(blinky_Point,HIGH);
      HAL_GPIO_WritePin(date_Point,HIGH);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4857      	ldr	r0, [pc, #348]	@ (8000f98 <main+0x1e0>)
 8000e3c:	f000 fecc 	bl	8001bd8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b09      	cmp	r3, #9
 8000e4a:	ddcd      	ble.n	8000de8 <main+0x30>
    }
  HAL_GPIO_WritePin(date_Point,LOW);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4851      	ldr	r0, [pc, #324]	@ (8000f98 <main+0x1e0>)
 8000e52:	f000 fec1 	bl	8001bd8 <HAL_GPIO_WritePin>
  Segment_Set(0,'U');Segment_Set(1,'L');Segment_Set(2,0);Segment_Set(3,1);Segment_Set(4,'N');Segment_Set(5,'N');
 8000e56:	2155      	movs	r1, #85	@ 0x55
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff13 	bl	8000c84 <Segment_Set>
 8000e5e:	214c      	movs	r1, #76	@ 0x4c
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff ff0f 	bl	8000c84 <Segment_Set>
 8000e66:	2100      	movs	r1, #0
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f7ff ff0b 	bl	8000c84 <Segment_Set>
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff07 	bl	8000c84 <Segment_Set>
 8000e76:	214e      	movs	r1, #78	@ 0x4e
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f7ff ff03 	bl	8000c84 <Segment_Set>
 8000e7e:	214e      	movs	r1, #78	@ 0x4e
 8000e80:	2005      	movs	r0, #5
 8000e82:	f7ff feff 	bl	8000c84 <Segment_Set>
  HAL_Delay(1000);
 8000e86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8a:	f000 fb3d 	bl	8001508 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(work_Mode == MODE_NORMAL)
 8000e8e:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <main+0x1e4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b52      	cmp	r3, #82	@ 0x52
 8000e94:	d1fb      	bne.n	8000e8e <main+0xd6>
    {
      Segment_Set(0,pdate_Year/10);
 8000e96:	4b42      	ldr	r3, [pc, #264]	@ (8000fa0 <main+0x1e8>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	4a42      	ldr	r2, [pc, #264]	@ (8000fa4 <main+0x1ec>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff feeb 	bl	8000c84 <Segment_Set>
      Segment_Set(1,pdate_Year%10);
 8000eae:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa0 <main+0x1e8>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <main+0x1ec>)
 8000eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb8:	08d9      	lsrs	r1, r3, #3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff feda 	bl	8000c84 <Segment_Set>
      Segment_Set(2,pdate_Mounth/10);
 8000ed0:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <main+0x1f0>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	4a33      	ldr	r2, [pc, #204]	@ (8000fa4 <main+0x1ec>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	08db      	lsrs	r3, r3, #3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff fece 	bl	8000c84 <Segment_Set>
      Segment_Set(3,pdate_Mounth%10);
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <main+0x1f0>)
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <main+0x1ec>)
 8000eee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ef2:	08d9      	lsrs	r1, r3, #3
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	440b      	add	r3, r1
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	2003      	movs	r0, #3
 8000f06:	f7ff febd 	bl	8000c84 <Segment_Set>
      Segment_Set(4,pdate_Day/10);
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <main+0x1f4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	4a25      	ldr	r2, [pc, #148]	@ (8000fa4 <main+0x1ec>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f7ff feb1 	bl	8000c84 <Segment_Set>
      Segment_Set(5,pdate_Day%10);
 8000f22:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <main+0x1f4>)
 8000f24:	881a      	ldrh	r2, [r3, #0]
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <main+0x1ec>)
 8000f28:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2c:	08d9      	lsrs	r1, r3, #3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2005      	movs	r0, #5
 8000f40:	f7ff fea0 	bl	8000c84 <Segment_Set>
    
      HAL_GPIO_WritePin(date_Point,GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4813      	ldr	r0, [pc, #76]	@ (8000f98 <main+0x1e0>)
 8000f4a:	f000 fe45 	bl	8001bd8 <HAL_GPIO_WritePin>

      if(uart_Flag == 1)
 8000f4e:	4b18      	ldr	r3, [pc, #96]	@ (8000fb0 <main+0x1f8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d19b      	bne.n	8000e8e <main+0xd6>
      {
        uart_Flag = 0;
 8000f56:	4b16      	ldr	r3, [pc, #88]	@ (8000fb0 <main+0x1f8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
        sscanf(rxBuffer, "%2d%2d%2d", &pdate_Year, &pdate_Mounth, &pdate_Day);
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <main+0x1f4>)
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <main+0x1f0>)
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <main+0x1e8>)
 8000f64:	4913      	ldr	r1, [pc, #76]	@ (8000fb4 <main+0x1fc>)
 8000f66:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <main+0x200>)
 8000f68:	f002 fbe0 	bl	800372c <siscanf>
        for(int i = 0;i < 6; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e007      	b.n	8000f82 <main+0x1ca>
          rxBuffer[i] = 0;
 8000f72:	4a11      	ldr	r2, [pc, #68]	@ (8000fb8 <main+0x200>)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
        for(int i = 0;i < 6; i++)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	ddf4      	ble.n	8000f72 <main+0x1ba>
    if(work_Mode == MODE_NORMAL)
 8000f88:	e781      	b.n	8000e8e <main+0xd6>
 8000f8a:	bf00      	nop
 8000f8c:	20000095 	.word	0x20000095
 8000f90:	200000f0 	.word	0x200000f0
 8000f94:	200000a8 	.word	0x200000a8
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	2000008e 	.word	0x2000008e
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	20000090 	.word	0x20000090
 8000fac:	20000092 	.word	0x20000092
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	0800439c 	.word	0x0800439c
 8000fb8:	20000098 	.word	0x20000098

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b090      	sub	sp, #64	@ 0x40
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	2228      	movs	r2, #40	@ 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fbda 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fe03 	bl	8001c08 <HAL_RCC_OscConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001008:	f000 f854 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100c:	230f      	movs	r3, #15
 800100e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2302      	movs	r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001022:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f001 f86f 	bl	800210c <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001034:	f000 f83e 	bl	80010b4 <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3740      	adds	r7, #64	@ 0x40
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <HAL_UART_RxCpltCallback+0x5c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d120      	bne.n	8001094 <HAL_UART_RxCpltCallback+0x54>
  {
    if (received_data == '\n' )
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <HAL_UART_RxCpltCallback+0x60>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b0a      	cmp	r3, #10
 8001058:	d10c      	bne.n	8001074 <HAL_UART_RxCpltCallback+0x34>
      {
          rxBuffer[rxIndex] = '\0';  // Null terminate the string
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_UART_RxCpltCallback+0x64>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_UART_RxCpltCallback+0x68>)
 8001062:	2100      	movs	r1, #0
 8001064:	5499      	strb	r1, [r3, r2]
          uart_Flag = 1;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_RxCpltCallback+0x6c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
          rxIndex = 0; // Reset index for next message
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <HAL_UART_RxCpltCallback+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <HAL_UART_RxCpltCallback+0x4a>
      }
      else
      {
          rxBuffer[rxIndex++] = received_data;
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_UART_RxCpltCallback+0x64>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b2d1      	uxtb	r1, r2
 800107c:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <HAL_UART_RxCpltCallback+0x64>)
 800107e:	7011      	strb	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <HAL_UART_RxCpltCallback+0x60>)
 8001084:	7819      	ldrb	r1, [r3, #0]
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x68>)
 8001088:	5499      	strb	r1, [r3, r2]


    // Process or copy received_data here if needed

    // Re-enable UART interrupt for the next message
    HAL_UART_Receive_IT(&huart2, &received_data, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	4904      	ldr	r1, [pc, #16]	@ (80010a0 <HAL_UART_RxCpltCallback+0x60>)
 800108e:	4808      	ldr	r0, [pc, #32]	@ (80010b0 <HAL_UART_RxCpltCallback+0x70>)
 8001090:	f001 fe14 	bl	8002cbc <HAL_UART_Receive_IT>
  }
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40004400 	.word	0x40004400
 80010a0:	20000095 	.word	0x20000095
 80010a4:	200000a2 	.word	0x200000a2
 80010a8:	20000098 	.word	0x20000098
 80010ac:	20000094 	.word	0x20000094
 80010b0:	200000f0 	.word	0x200000f0

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <Error_Handler+0x8>

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <HAL_MspInit+0x5c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a14      	ldr	r2, [pc, #80]	@ (800111c <HAL_MspInit+0x5c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_MspInit+0x5c>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_MspInit+0x5c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_MspInit+0x60>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_MspInit+0x60>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <NMI_Handler+0x4>

0800112c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <UsageFault_Handler+0x4>

0800114c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f9ac 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  Segments_Scan();
 8001180:	f7fe ffec 	bl	800015c <Segments_Scan>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <TIM2_IRQHandler+0x14>)
 8001186:	f001 f9f1 	bl	800256c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000a8 	.word	0x200000a8

08001194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART2_IRQHandler+0x10>)
 800119a:	f001 fdb5 	bl	8002d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000f0 	.word	0x200000f0

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f002 fadc 	bl	8003794 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20005000 	.word	0x20005000
 8001208:	00000400 	.word	0x00000400
 800120c:	200000a4 	.word	0x200000a4
 8001210:	20000288 	.word	0x20000288

08001214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <MX_TIM2_Init+0x94>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <MX_TIM2_Init+0x94>)
 8001246:	2247      	movs	r2, #71	@ 0x47
 8001248:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_TIM2_Init+0x94>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500 - 1;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <MX_TIM2_Init+0x94>)
 8001252:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001256:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_TIM2_Init+0x94>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125e:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <MX_TIM2_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001264:	4813      	ldr	r0, [pc, #76]	@ (80012b4 <MX_TIM2_Init+0x94>)
 8001266:	f001 f8df 	bl	8002428 <HAL_TIM_Base_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001270:	f7ff ff20 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001278:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <MX_TIM2_Init+0x94>)
 8001282:	f001 fa63 	bl	800274c <HAL_TIM_ConfigClockSource>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800128c:	f7ff ff12 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_TIM2_Init+0x94>)
 800129e:	f001 fc4d 	bl	8002b3c <HAL_TIMEx_MasterConfigSynchronization>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012a8:	f7ff ff04 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000a8 	.word	0x200000a8

080012b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c8:	d113      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	f000 fa09 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ec:	201c      	movs	r0, #28
 80012ee:	f000 fa22 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_USART2_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_USART2_UART_Init+0x4c>)
 8001338:	f001 fc70 	bl	8002c1c <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f7ff feb7 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000f0 	.word	0x200000f0
 8001350:	40004400 	.word	0x40004400

08001354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <HAL_UART_MspInit+0x98>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d137      	bne.n	80013e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001374:	4b1e      	ldr	r3, [pc, #120]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_UART_MspInit+0x9c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <HAL_UART_MspInit+0xa0>)
 80013b8:	f000 fa8a 	bl	80018d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013bc:	2308      	movs	r3, #8
 80013be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <HAL_UART_MspInit+0xa0>)
 80013d0:	f000 fa7e 	bl	80018d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2026      	movs	r0, #38	@ 0x26
 80013da:	f000 f990 	bl	80016fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013de:	2026      	movs	r0, #38	@ 0x26
 80013e0:	f000 f9a9 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010800 	.word	0x40010800

080013f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f8:	f7ff ff0c 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480b      	ldr	r0, [pc, #44]	@ (800142c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fe:	490c      	ldr	r1, [pc, #48]	@ (8001430 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001414:	4c09      	ldr	r4, [pc, #36]	@ (800143c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001422:	f002 f9bd 	bl	80037a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001426:	f7ff fcc7 	bl	8000db8 <main>
  bx lr
 800142a:	4770      	bx	lr
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001434:	08004510 	.word	0x08004510
  ldr r2, =_sbss
 8001438:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800143c:	20000284 	.word	0x20000284

08001440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_2_IRQHandler>
	...

08001444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <HAL_Init+0x28>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	@ (800146c <HAL_Init+0x28>)
 800144e:	f043 0310 	orr.w	r3, r3, #16
 8001452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f947 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	200f      	movs	r0, #15
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff fe2e 	bl	80010c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f95f 	bl	8001752 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f927 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000004 	.word	0x20000004
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x1c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x20>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a03      	ldr	r2, [pc, #12]	@ (80014f0 <HAL_IncTick+0x20>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000138 	.word	0x20000138

080014f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b02      	ldr	r3, [pc, #8]	@ (8001504 <HAL_GetTick+0x10>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	20000138 	.word	0x20000138

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff0 	bl	80014f4 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffe0 	bl	80014f4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4906      	ldr	r1, [pc, #24]	@ (80015e8 <__NVIC_EnableIRQ+0x34>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff90 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff2d 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff42 	bl	8001598 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff35 	bl	80015b4 <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa2 	bl	80016a4 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d008      	beq.n	8001794 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2204      	movs	r2, #4
 8001786:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e020      	b.n	80017d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 020e 	bic.w	r2, r2, #14
 80017a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d005      	beq.n	8001804 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2204      	movs	r2, #4
 80017fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	e051      	b.n	80018a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <HAL_DMA_Abort_IT+0xd4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d029      	beq.n	8001882 <HAL_DMA_Abort_IT+0xa2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <HAL_DMA_Abort_IT+0xd8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d022      	beq.n	800187e <HAL_DMA_Abort_IT+0x9e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a1f      	ldr	r2, [pc, #124]	@ (80018bc <HAL_DMA_Abort_IT+0xdc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_Abort_IT+0x98>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1e      	ldr	r2, [pc, #120]	@ (80018c0 <HAL_DMA_Abort_IT+0xe0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d012      	beq.n	8001872 <HAL_DMA_Abort_IT+0x92>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1c      	ldr	r2, [pc, #112]	@ (80018c4 <HAL_DMA_Abort_IT+0xe4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00a      	beq.n	800186c <HAL_DMA_Abort_IT+0x8c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1b      	ldr	r2, [pc, #108]	@ (80018c8 <HAL_DMA_Abort_IT+0xe8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_DMA_Abort_IT+0x86>
 8001860:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001864:	e00e      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 8001866:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800186a:	e00b      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 800186c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001870:	e008      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	e005      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 8001878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187c:	e002      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 800187e:	2310      	movs	r3, #16
 8001880:	e000      	b.n	8001884 <HAL_DMA_Abort_IT+0xa4>
 8001882:	2301      	movs	r3, #1
 8001884:	4a11      	ldr	r2, [pc, #68]	@ (80018cc <HAL_DMA_Abort_IT+0xec>)
 8001886:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
    } 
  }
  return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020008 	.word	0x40020008
 80018b8:	4002001c 	.word	0x4002001c
 80018bc:	40020030 	.word	0x40020030
 80018c0:	40020044 	.word	0x40020044
 80018c4:	40020058 	.word	0x40020058
 80018c8:	4002006c 	.word	0x4002006c
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b08b      	sub	sp, #44	@ 0x2c
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e169      	b.n	8001bb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e4:	2201      	movs	r2, #1
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8158 	bne.w	8001bb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a9a      	ldr	r2, [pc, #616]	@ (8001b70 <HAL_GPIO_Init+0x2a0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d05e      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 800190c:	4a98      	ldr	r2, [pc, #608]	@ (8001b70 <HAL_GPIO_Init+0x2a0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d875      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001912:	4a98      	ldr	r2, [pc, #608]	@ (8001b74 <HAL_GPIO_Init+0x2a4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d058      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001918:	4a96      	ldr	r2, [pc, #600]	@ (8001b74 <HAL_GPIO_Init+0x2a4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d86f      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800191e:	4a96      	ldr	r2, [pc, #600]	@ (8001b78 <HAL_GPIO_Init+0x2a8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d052      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001924:	4a94      	ldr	r2, [pc, #592]	@ (8001b78 <HAL_GPIO_Init+0x2a8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d869      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800192a:	4a94      	ldr	r2, [pc, #592]	@ (8001b7c <HAL_GPIO_Init+0x2ac>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d04c      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 8001930:	4a92      	ldr	r2, [pc, #584]	@ (8001b7c <HAL_GPIO_Init+0x2ac>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d863      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001936:	4a92      	ldr	r2, [pc, #584]	@ (8001b80 <HAL_GPIO_Init+0x2b0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d046      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
 800193c:	4a90      	ldr	r2, [pc, #576]	@ (8001b80 <HAL_GPIO_Init+0x2b0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d85d      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d82a      	bhi.n	800199c <HAL_GPIO_Init+0xcc>
 8001946:	2b12      	cmp	r3, #18
 8001948:	d859      	bhi.n	80019fe <HAL_GPIO_Init+0x12e>
 800194a:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <HAL_GPIO_Init+0x80>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019a5 	.word	0x080019a5
 8001958:	080019b7 	.word	0x080019b7
 800195c:	080019f9 	.word	0x080019f9
 8001960:	080019ff 	.word	0x080019ff
 8001964:	080019ff 	.word	0x080019ff
 8001968:	080019ff 	.word	0x080019ff
 800196c:	080019ff 	.word	0x080019ff
 8001970:	080019ff 	.word	0x080019ff
 8001974:	080019ff 	.word	0x080019ff
 8001978:	080019ff 	.word	0x080019ff
 800197c:	080019ff 	.word	0x080019ff
 8001980:	080019ff 	.word	0x080019ff
 8001984:	080019ff 	.word	0x080019ff
 8001988:	080019ff 	.word	0x080019ff
 800198c:	080019ff 	.word	0x080019ff
 8001990:	080019ff 	.word	0x080019ff
 8001994:	080019ad 	.word	0x080019ad
 8001998:	080019c1 	.word	0x080019c1
 800199c:	4a79      	ldr	r2, [pc, #484]	@ (8001b84 <HAL_GPIO_Init+0x2b4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a2:	e02c      	b.n	80019fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e029      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	3304      	adds	r3, #4
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e024      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	3308      	adds	r3, #8
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e01f      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	330c      	adds	r3, #12
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e01a      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d102      	bne.n	80019d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d2:	2304      	movs	r3, #4
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e013      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	611a      	str	r2, [r3, #16]
          break;
 80019ea:	e009      	b.n	8001a00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ec:	2308      	movs	r3, #8
 80019ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	615a      	str	r2, [r3, #20]
          break;
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x130>
          break;
 80019fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d801      	bhi.n	8001a0a <HAL_GPIO_Init+0x13a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	e001      	b.n	8001a0e <HAL_GPIO_Init+0x13e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	@ 0xff
 8001a14:	d802      	bhi.n	8001a1c <HAL_GPIO_Init+0x14c>
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x152>
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	3b08      	subs	r3, #8
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	210f      	movs	r1, #15
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	6a39      	ldr	r1, [r7, #32]
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80b1 	beq.w	8001bb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a50:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a68:	4a48      	ldr	r2, [pc, #288]	@ (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a40      	ldr	r2, [pc, #256]	@ (8001b90 <HAL_GPIO_Init+0x2c0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d013      	beq.n	8001abc <HAL_GPIO_Init+0x1ec>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a3f      	ldr	r2, [pc, #252]	@ (8001b94 <HAL_GPIO_Init+0x2c4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_GPIO_Init+0x1e8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b98 <HAL_GPIO_Init+0x2c8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d007      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8001b9c <HAL_GPIO_Init+0x2cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d101      	bne.n	8001ab0 <HAL_GPIO_Init+0x1e0>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e006      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e004      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_GPIO_Init+0x1ee>
 8001abc:	2300      	movs	r3, #0
 8001abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac0:	f002 0203 	and.w	r2, r2, #3
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	4093      	lsls	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ace:	492f      	ldr	r1, [pc, #188]	@ (8001b8c <HAL_GPIO_Init+0x2bc>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	492c      	ldr	r1, [pc, #176]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4928      	ldr	r1, [pc, #160]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	4922      	ldr	r1, [pc, #136]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	491e      	ldr	r1, [pc, #120]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b38:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4918      	ldr	r1, [pc, #96]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b46:	4b16      	ldr	r3, [pc, #88]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4914      	ldr	r1, [pc, #80]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d021      	beq.n	8001ba4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	490e      	ldr	r1, [pc, #56]	@ (8001ba0 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e021      	b.n	8001bb2 <HAL_GPIO_Init+0x2e2>
 8001b6e:	bf00      	nop
 8001b70:	10320000 	.word	0x10320000
 8001b74:	10310000 	.word	0x10310000
 8001b78:	10220000 	.word	0x10220000
 8001b7c:	10210000 	.word	0x10210000
 8001b80:	10120000 	.word	0x10120000
 8001b84:	10110000 	.word	0x10110000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40011400 	.word	0x40011400
 8001ba0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4909      	ldr	r1, [pc, #36]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f47f ae8e 	bne.w	80018e4 <HAL_GPIO_Init+0x14>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	372c      	adds	r7, #44	@ 0x2c
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e272      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e24c      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fc06 	bl	80014f4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fc02 	bl	80014f4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e200      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fbf2 	bl	80014f4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fbee 	bl	80014f4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	@ 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1ec      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1c0      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fba7 	bl	80014f4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fba3 	bl	80014f4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff fb86 	bl	80014f4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fb82 	bl	80014f4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e180      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fb66 	bl	80014f4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fb62 	bl	80014f4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e160      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 face 	bl	80023ec <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fb4c 	bl	80014f4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fb48 	bl	80014f4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e146      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b92      	ldr	r3, [pc, #584]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b88      	ldr	r3, [pc, #544]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a87      	ldr	r2, [pc, #540]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b85      	ldr	r3, [pc, #532]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b82      	ldr	r3, [pc, #520]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb09 	bl	80014f4 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fb05 	bl	80014f4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	@ 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e103      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b75      	ldr	r3, [pc, #468]	@ (80020d0 <HAL_RCC_OscConfig+0x4c8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a69      	ldr	r2, [pc, #420]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b67      	ldr	r3, [pc, #412]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a66      	ldr	r2, [pc, #408]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a60      	ldr	r2, [pc, #384]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a57      	ldr	r2, [pc, #348]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fab9 	bl	80014f4 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff fab5 	bl	80014f4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0b1      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7ff faa3 	bl	80014f4 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff fa9f 	bl	80014f4 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09b      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b40      	ldr	r3, [pc, #256]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b3c      	ldr	r3, [pc, #240]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b36      	ldr	r3, [pc, #216]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff fa73 	bl	80014f4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff fa6f 	bl	80014f4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e06d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	4921      	ldr	r1, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	491b      	ldr	r1, [pc, #108]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fa43 	bl	80014f4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fa3f 	bl	80014f4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e03d      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e035      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fa2c 	bl	80014f4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff fa28 	bl	80014f4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e026      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e01e      	b.n	80020fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e019      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_OscConfig+0x500>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0d0      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b6a      	ldr	r3, [pc, #424]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b67      	ldr	r3, [pc, #412]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4965      	ldr	r1, [pc, #404]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002172:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800218a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d040      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e073      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06b      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4936      	ldr	r1, [pc, #216]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f97a 	bl	80014f4 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff f976 	bl	80014f4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e053      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d210      	bcs.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b24      	ldr	r3, [pc, #144]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4922      	ldr	r1, [pc, #136]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1cc>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f8d8 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	080043b4 	.word	0x080043b4
 80022d8:	20000004 	.word	0x20000004
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x30>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x36>
 800230e:	e027      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	e027      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0c9b      	lsrs	r3, r3, #18
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800232e:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x94>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0c5b      	lsrs	r3, r3, #17
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e004      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0c      	ldr	r2, [pc, #48]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	613b      	str	r3, [r7, #16]
      break;
 800235e:	e002      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	613b      	str	r3, [r7, #16]
      break;
 8002364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002366:	693b      	ldr	r3, [r7, #16]
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	080043cc 	.word	0x080043cc
 8002380:	080043dc 	.word	0x080043dc
 8002384:	003d0900 	.word	0x003d0900

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b02      	ldr	r3, [pc, #8]	@ (8002398 <HAL_RCC_GetHCLKFreq+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff2 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	080043c4 	.word	0x080043c4

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffde 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	080043c4 	.word	0x080043c4

080023ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <RCC_Delay+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002424 <RCC_Delay+0x38>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0a5b      	lsrs	r3, r3, #9
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002408:	bf00      	nop
  }
  while (Delay --);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	60fa      	str	r2, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <RCC_Delay+0x1c>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	20000004 	.word	0x20000004
 8002424:	10624dd3 	.word	0x10624dd3

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e041      	b.n	80024be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe ff32 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fa64 	bl	8002934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e03a      	b.n	8002556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_TIM_Base_Start_IT+0x98>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250a:	d009      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a14      	ldr	r2, [pc, #80]	@ (8002564 <HAL_TIM_Base_Start_IT+0x9c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x58>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <HAL_TIM_Base_Start_IT+0xa0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d111      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b06      	cmp	r3, #6
 8002530:	d010      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e007      	b.n	8002554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800

0800256c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0202 	mvn.w	r2, #2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9a1 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f994 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f9a3 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0204 	mvn.w	r2, #4
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f97b 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f96e 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f97d 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d020      	beq.n	8002668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0208 	mvn.w	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f955 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f948 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f957 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2208      	movs	r2, #8
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f92f 	bl	80028fe <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f922 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f931 	bl	8002910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0201 	mvn.w	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f901 	bl	80028da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa87 	bl	8002c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f901 	bl	8002922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00c      	beq.n	8002744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0220 	mvn.w	r2, #32
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa5a 	bl	8002bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_TIM_ConfigClockSource+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e0b4      	b.n	80028d2 <HAL_TIM_ConfigClockSource+0x186>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800278e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a0:	d03e      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0xd4>
 80027a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027a6:	f200 8087 	bhi.w	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ae:	f000 8086 	beq.w	80028be <HAL_TIM_ConfigClockSource+0x172>
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b6:	d87f      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b70      	cmp	r3, #112	@ 0x70
 80027ba:	d01a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0xa6>
 80027bc:	2b70      	cmp	r3, #112	@ 0x70
 80027be:	d87b      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b60      	cmp	r3, #96	@ 0x60
 80027c2:	d050      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0x11a>
 80027c4:	2b60      	cmp	r3, #96	@ 0x60
 80027c6:	d877      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b50      	cmp	r3, #80	@ 0x50
 80027ca:	d03c      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0xfa>
 80027cc:	2b50      	cmp	r3, #80	@ 0x50
 80027ce:	d873      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b40      	cmp	r3, #64	@ 0x40
 80027d2:	d058      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x13a>
 80027d4:	2b40      	cmp	r3, #64	@ 0x40
 80027d6:	d86f      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b30      	cmp	r3, #48	@ 0x30
 80027da:	d064      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	2b30      	cmp	r3, #48	@ 0x30
 80027de:	d86b      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d060      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d867      	bhi.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d05c      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x15a>
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d05a      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	e062      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002802:	f000 f97c 	bl	8002afe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	609a      	str	r2, [r3, #8]
      break;
 800281e:	e04f      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002830:	f000 f965 	bl	8002afe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002842:	609a      	str	r2, [r3, #8]
      break;
 8002844:	e03c      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	461a      	mov	r2, r3
 8002854:	f000 f8dc 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2150      	movs	r1, #80	@ 0x50
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f933 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 8002864:	e02c      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002872:	461a      	mov	r2, r3
 8002874:	f000 f8fa 	bl	8002a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2160      	movs	r1, #96	@ 0x60
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f923 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 8002884:	e01c      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	461a      	mov	r2, r3
 8002894:	f000 f8bc 	bl	8002a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2140      	movs	r1, #64	@ 0x40
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f913 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028a4:	e00c      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f000 f90a 	bl	8002aca <TIM_ITRx_SetConfig>
      break;
 80028b6:	e003      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e000      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a2f      	ldr	r2, [pc, #188]	@ (8002a04 <TIM_Base_SetConfig+0xd0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2c      	ldr	r2, [pc, #176]	@ (8002a08 <TIM_Base_SetConfig+0xd4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a0c <TIM_Base_SetConfig+0xd8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a22      	ldr	r2, [pc, #136]	@ (8002a04 <TIM_Base_SetConfig+0xd0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00b      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002984:	d007      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1f      	ldr	r2, [pc, #124]	@ (8002a08 <TIM_Base_SetConfig+0xd4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1e      	ldr	r2, [pc, #120]	@ (8002a0c <TIM_Base_SetConfig+0xd8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d108      	bne.n	80029a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002a04 <TIM_Base_SetConfig+0xd0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d103      	bne.n	80029dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
  }
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0201 	bic.w	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 030a 	bic.w	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0210 	bic.w	r2, r3, #16
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f043 0307 	orr.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b087      	sub	sp, #28
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	021a      	lsls	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e046      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a16      	ldr	r2, [pc, #88]	@ (8002bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a12      	ldr	r2, [pc, #72]	@ (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a10      	ldr	r2, [pc, #64]	@ (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e042      	b.n	8002cb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe fb86 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	@ 0x24
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fcd5 	bl	8003610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d112      	bne.n	8002cfc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_Receive_IT+0x26>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00b      	b.n	8002cfe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fab7 	bl	8003266 <UART_Start_Receive_IT>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	e000      	b.n	8002cfe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_UART_IRQHandler+0x66>
 8002d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fb93 	bl	8003492 <UART_Receive_IT>
      return;
 8002d6c:	e25b      	b.n	8003226 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80de 	beq.w	8002f34 <HAL_UART_IRQHandler+0x22c>
 8002d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80d1 	beq.w	8002f34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_UART_IRQHandler+0xae>
 8002d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_UART_IRQHandler+0xd2>
 8002dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_UART_IRQHandler+0xf6>
 8002de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d011      	beq.n	8002e2e <HAL_UART_IRQHandler+0x126>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f043 0208 	orr.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 81f2 	beq.w	800321c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_UART_IRQHandler+0x14e>
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fb1e 	bl	8003492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <HAL_UART_IRQHandler+0x17a>
 8002e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04f      	beq.n	8002f22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fa28 	bl	80032d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d041      	beq.n	8002f1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002eb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1d9      	bne.n	8002e96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d013      	beq.n	8002f12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eee:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <HAL_UART_IRQHandler+0x3e0>)
 8002ef0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fc72 	bl	80017e0 <HAL_DMA_Abort_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d016      	beq.n	8002f30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	e00e      	b.n	8002f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f993 	bl	800323e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00a      	b.n	8002f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f98f 	bl	800323e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e006      	b.n	8002f30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f98b 	bl	800323e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f2e:	e175      	b.n	800321c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f30:	bf00      	nop
    return;
 8002f32:	e173      	b.n	800321c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	f040 814f 	bne.w	80031dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8148 	beq.w	80031dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 8141 	beq.w	80031dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80b6 	beq.w	80030ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8145 	beq.w	8003220 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f080 813e 	bcs.w	8003220 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002faa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	f000 8088 	beq.w	80030c8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002fe4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002fe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ff0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1d9      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003028:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800302c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003030:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800303a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e1      	bne.n	8003004 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003052:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003056:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003064:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003066:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800306a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e3      	bne.n	8003040 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003098:	f023 0310 	bic.w	r3, r3, #16
 800309c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e3      	bne.n	8003086 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fb51 	bl	800176a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8b6 	bl	8003250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e4:	e09c      	b.n	8003220 <HAL_UART_IRQHandler+0x518>
 80030e6:	bf00      	nop
 80030e8:	0800339d 	.word	0x0800339d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 808e 	beq.w	8003224 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8089 	beq.w	8003224 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003128:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003136:	647a      	str	r2, [r7, #68]	@ 0x44
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800313c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e3      	bne.n	8003112 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	623b      	str	r3, [r7, #32]
   return(result);
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800316e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0310 	bic.w	r3, r3, #16
 80031a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80031b4:	61fa      	str	r2, [r7, #28]
 80031b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	617b      	str	r3, [r7, #20]
   return(result);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e3      	bne.n	8003190 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031d2:	4619      	mov	r1, r3
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f83b 	bl	8003250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031da:	e023      	b.n	8003224 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_UART_IRQHandler+0x4f4>
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8e5 	bl	80033c4 <UART_Transmit_IT>
    return;
 80031fa:	e014      	b.n	8003226 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <HAL_UART_IRQHandler+0x51e>
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f924 	bl	8003462 <UART_EndTransmit_IT>
    return;
 800321a:	e004      	b.n	8003226 <HAL_UART_IRQHandler+0x51e>
    return;
 800321c:	bf00      	nop
 800321e:	e002      	b.n	8003226 <HAL_UART_IRQHandler+0x51e>
      return;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <HAL_UART_IRQHandler+0x51e>
      return;
 8003224:	bf00      	nop
  }
}
 8003226:	37e8      	adds	r7, #232	@ 0xe8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	4613      	mov	r3, r2
 8003272:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2222      	movs	r2, #34	@ 0x22
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0220 	orr.w	r2, r2, #32
 80032ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b095      	sub	sp, #84	@ 0x54
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003300:	643a      	str	r2, [r7, #64]	@ 0x40
 8003302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800330e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	e853 3f00 	ldrex	r3, [r3]
 8003322:	61fb      	str	r3, [r7, #28]
   return(result);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3314      	adds	r3, #20
 8003332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800333a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800333c:	e841 2300 	strex	r3, r2, [r1]
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e5      	bne.n	8003314 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334c:	2b01      	cmp	r3, #1
 800334e:	d119      	bne.n	8003384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	647b      	str	r3, [r7, #68]	@ 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003370:	61ba      	str	r2, [r7, #24]
 8003372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6979      	ldr	r1, [r7, #20]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	613b      	str	r3, [r7, #16]
   return(result);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e5      	bne.n	8003350 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003392:	bf00      	nop
 8003394:	3754      	adds	r7, #84	@ 0x54
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff41 	bl	800323e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b21      	cmp	r3, #33	@ 0x21
 80033d6:	d13e      	bne.n	8003456 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e0:	d114      	bne.n	800340c <UART_Transmit_IT+0x48>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d110      	bne.n	800340c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]
 800340a:	e008      	b.n	800341e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6211      	str	r1, [r2, #32]
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29b      	uxth	r3, r3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4619      	mov	r1, r3
 800342c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003440:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003450:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fed2 	bl	800322c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b08c      	sub	sp, #48	@ 0x30
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b22      	cmp	r3, #34	@ 0x22
 80034a4:	f040 80ae 	bne.w	8003604 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b0:	d117      	bne.n	80034e2 <UART_Receive_IT+0x50>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d113      	bne.n	80034e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e0:	e026      	b.n	8003530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f4:	d007      	beq.n	8003506 <UART_Receive_IT+0x74>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <UART_Receive_IT+0x82>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e008      	b.n	8003526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003520:	b2da      	uxtb	r2, r3
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4619      	mov	r1, r3
 800353e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003540:	2b00      	cmp	r3, #0
 8003542:	d15d      	bne.n	8003600 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0220 	bic.w	r2, r2, #32
 8003552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	2b01      	cmp	r3, #1
 8003588:	d135      	bne.n	80035f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	613b      	str	r3, [r7, #16]
   return(result);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f023 0310 	bic.w	r3, r3, #16
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b0:	623a      	str	r2, [r7, #32]
 80035b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d10a      	bne.n	80035e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fe2e 	bl	8003250 <HAL_UARTEx_RxEventCallback>
 80035f4:	e002      	b.n	80035fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fd22 	bl	8001040 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e002      	b.n	8003606 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3730      	adds	r7, #48	@ 0x30
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800364a:	f023 030c 	bic.w	r3, r3, #12
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	430b      	orrs	r3, r1
 8003656:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2c      	ldr	r2, [pc, #176]	@ (8003724 <UART_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7fe fea4 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	e002      	b.n	8003686 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7fe fe8c 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8003684:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009a      	lsls	r2, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	0119      	lsls	r1, r3, #4
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009a      	lsls	r2, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003728 <UART_SetConfig+0x118>)
 80036be:	fba3 0302 	umull	r0, r3, r3, r2
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2064      	movs	r0, #100	@ 0x64
 80036c6:	fb00 f303 	mul.w	r3, r0, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	3332      	adds	r3, #50	@ 0x32
 80036d0:	4a15      	ldr	r2, [pc, #84]	@ (8003728 <UART_SetConfig+0x118>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036dc:	4419      	add	r1, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <UART_SetConfig+0x118>)
 80036f6:	fba3 0302 	umull	r0, r3, r3, r2
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2064      	movs	r0, #100	@ 0x64
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	3332      	adds	r3, #50	@ 0x32
 8003708:	4a07      	ldr	r2, [pc, #28]	@ (8003728 <UART_SetConfig+0x118>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	440a      	add	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40013800 	.word	0x40013800
 8003728:	51eb851f 	.word	0x51eb851f

0800372c <siscanf>:
 800372c:	b40e      	push	{r1, r2, r3}
 800372e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003732:	b530      	push	{r4, r5, lr}
 8003734:	b09c      	sub	sp, #112	@ 0x70
 8003736:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003738:	f854 5b04 	ldr.w	r5, [r4], #4
 800373c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003740:	9002      	str	r0, [sp, #8]
 8003742:	9006      	str	r0, [sp, #24]
 8003744:	f7fc fd02 	bl	800014c <strlen>
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <siscanf+0x4c>)
 800374a:	9003      	str	r0, [sp, #12]
 800374c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800374e:	2300      	movs	r3, #0
 8003750:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003752:	9314      	str	r3, [sp, #80]	@ 0x50
 8003754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003758:	9007      	str	r0, [sp, #28]
 800375a:	4808      	ldr	r0, [pc, #32]	@ (800377c <siscanf+0x50>)
 800375c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003760:	462a      	mov	r2, r5
 8003762:	4623      	mov	r3, r4
 8003764:	a902      	add	r1, sp, #8
 8003766:	6800      	ldr	r0, [r0, #0]
 8003768:	9401      	str	r4, [sp, #4]
 800376a:	f000 f98d 	bl	8003a88 <__ssvfiscanf_r>
 800376e:	b01c      	add	sp, #112	@ 0x70
 8003770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003774:	b003      	add	sp, #12
 8003776:	4770      	bx	lr
 8003778:	08003781 	.word	0x08003781
 800377c:	20000010 	.word	0x20000010

08003780 <__seofread>:
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr

08003784 <memset>:
 8003784:	4603      	mov	r3, r0
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <__errno>:
 8003794:	4b01      	ldr	r3, [pc, #4]	@ (800379c <__errno+0x8>)
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000010 	.word	0x20000010

080037a0 <__libc_init_array>:
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	2600      	movs	r6, #0
 80037a4:	4d0c      	ldr	r5, [pc, #48]	@ (80037d8 <__libc_init_array+0x38>)
 80037a6:	4c0d      	ldr	r4, [pc, #52]	@ (80037dc <__libc_init_array+0x3c>)
 80037a8:	1b64      	subs	r4, r4, r5
 80037aa:	10a4      	asrs	r4, r4, #2
 80037ac:	42a6      	cmp	r6, r4
 80037ae:	d109      	bne.n	80037c4 <__libc_init_array+0x24>
 80037b0:	f000 fde8 	bl	8004384 <_init>
 80037b4:	2600      	movs	r6, #0
 80037b6:	4d0a      	ldr	r5, [pc, #40]	@ (80037e0 <__libc_init_array+0x40>)
 80037b8:	4c0a      	ldr	r4, [pc, #40]	@ (80037e4 <__libc_init_array+0x44>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	42a6      	cmp	r6, r4
 80037c0:	d105      	bne.n	80037ce <__libc_init_array+0x2e>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c8:	4798      	blx	r3
 80037ca:	3601      	adds	r6, #1
 80037cc:	e7ee      	b.n	80037ac <__libc_init_array+0xc>
 80037ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d2:	4798      	blx	r3
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7f2      	b.n	80037be <__libc_init_array+0x1e>
 80037d8:	08004508 	.word	0x08004508
 80037dc:	08004508 	.word	0x08004508
 80037e0:	08004508 	.word	0x08004508
 80037e4:	0800450c 	.word	0x0800450c

080037e8 <__retarget_lock_acquire_recursive>:
 80037e8:	4770      	bx	lr

080037ea <__retarget_lock_release_recursive>:
 80037ea:	4770      	bx	lr

080037ec <_free_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4605      	mov	r5, r0
 80037f0:	2900      	cmp	r1, #0
 80037f2:	d040      	beq.n	8003876 <_free_r+0x8a>
 80037f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037f8:	1f0c      	subs	r4, r1, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfb8      	it	lt
 80037fe:	18e4      	addlt	r4, r4, r3
 8003800:	f000 f8de 	bl	80039c0 <__malloc_lock>
 8003804:	4a1c      	ldr	r2, [pc, #112]	@ (8003878 <_free_r+0x8c>)
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	b933      	cbnz	r3, 8003818 <_free_r+0x2c>
 800380a:	6063      	str	r3, [r4, #4]
 800380c:	6014      	str	r4, [r2, #0]
 800380e:	4628      	mov	r0, r5
 8003810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003814:	f000 b8da 	b.w	80039cc <__malloc_unlock>
 8003818:	42a3      	cmp	r3, r4
 800381a:	d908      	bls.n	800382e <_free_r+0x42>
 800381c:	6820      	ldr	r0, [r4, #0]
 800381e:	1821      	adds	r1, r4, r0
 8003820:	428b      	cmp	r3, r1
 8003822:	bf01      	itttt	eq
 8003824:	6819      	ldreq	r1, [r3, #0]
 8003826:	685b      	ldreq	r3, [r3, #4]
 8003828:	1809      	addeq	r1, r1, r0
 800382a:	6021      	streq	r1, [r4, #0]
 800382c:	e7ed      	b.n	800380a <_free_r+0x1e>
 800382e:	461a      	mov	r2, r3
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	b10b      	cbz	r3, 8003838 <_free_r+0x4c>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d9fa      	bls.n	800382e <_free_r+0x42>
 8003838:	6811      	ldr	r1, [r2, #0]
 800383a:	1850      	adds	r0, r2, r1
 800383c:	42a0      	cmp	r0, r4
 800383e:	d10b      	bne.n	8003858 <_free_r+0x6c>
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	4401      	add	r1, r0
 8003844:	1850      	adds	r0, r2, r1
 8003846:	4283      	cmp	r3, r0
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	d1e0      	bne.n	800380e <_free_r+0x22>
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4408      	add	r0, r1
 8003852:	6010      	str	r0, [r2, #0]
 8003854:	6053      	str	r3, [r2, #4]
 8003856:	e7da      	b.n	800380e <_free_r+0x22>
 8003858:	d902      	bls.n	8003860 <_free_r+0x74>
 800385a:	230c      	movs	r3, #12
 800385c:	602b      	str	r3, [r5, #0]
 800385e:	e7d6      	b.n	800380e <_free_r+0x22>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428b      	cmp	r3, r1
 8003866:	bf01      	itttt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	1809      	addeq	r1, r1, r0
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	6063      	str	r3, [r4, #4]
 8003872:	6054      	str	r4, [r2, #4]
 8003874:	e7cb      	b.n	800380e <_free_r+0x22>
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	20000280 	.word	0x20000280

0800387c <sbrk_aligned>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	4e0f      	ldr	r6, [pc, #60]	@ (80038bc <sbrk_aligned+0x40>)
 8003880:	460c      	mov	r4, r1
 8003882:	6831      	ldr	r1, [r6, #0]
 8003884:	4605      	mov	r5, r0
 8003886:	b911      	cbnz	r1, 800388e <sbrk_aligned+0x12>
 8003888:	f000 fc2e 	bl	80040e8 <_sbrk_r>
 800388c:	6030      	str	r0, [r6, #0]
 800388e:	4621      	mov	r1, r4
 8003890:	4628      	mov	r0, r5
 8003892:	f000 fc29 	bl	80040e8 <_sbrk_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d103      	bne.n	80038a2 <sbrk_aligned+0x26>
 800389a:	f04f 34ff 	mov.w	r4, #4294967295
 800389e:	4620      	mov	r0, r4
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
 80038a2:	1cc4      	adds	r4, r0, #3
 80038a4:	f024 0403 	bic.w	r4, r4, #3
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d0f8      	beq.n	800389e <sbrk_aligned+0x22>
 80038ac:	1a21      	subs	r1, r4, r0
 80038ae:	4628      	mov	r0, r5
 80038b0:	f000 fc1a 	bl	80040e8 <_sbrk_r>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d1f2      	bne.n	800389e <sbrk_aligned+0x22>
 80038b8:	e7ef      	b.n	800389a <sbrk_aligned+0x1e>
 80038ba:	bf00      	nop
 80038bc:	2000027c 	.word	0x2000027c

080038c0 <_malloc_r>:
 80038c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c4:	1ccd      	adds	r5, r1, #3
 80038c6:	f025 0503 	bic.w	r5, r5, #3
 80038ca:	3508      	adds	r5, #8
 80038cc:	2d0c      	cmp	r5, #12
 80038ce:	bf38      	it	cc
 80038d0:	250c      	movcc	r5, #12
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	4606      	mov	r6, r0
 80038d6:	db01      	blt.n	80038dc <_malloc_r+0x1c>
 80038d8:	42a9      	cmp	r1, r5
 80038da:	d904      	bls.n	80038e6 <_malloc_r+0x26>
 80038dc:	230c      	movs	r3, #12
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	2000      	movs	r0, #0
 80038e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039bc <_malloc_r+0xfc>
 80038ea:	f000 f869 	bl	80039c0 <__malloc_lock>
 80038ee:	f8d8 3000 	ldr.w	r3, [r8]
 80038f2:	461c      	mov	r4, r3
 80038f4:	bb44      	cbnz	r4, 8003948 <_malloc_r+0x88>
 80038f6:	4629      	mov	r1, r5
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff ffbf 	bl	800387c <sbrk_aligned>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	4604      	mov	r4, r0
 8003902:	d158      	bne.n	80039b6 <_malloc_r+0xf6>
 8003904:	f8d8 4000 	ldr.w	r4, [r8]
 8003908:	4627      	mov	r7, r4
 800390a:	2f00      	cmp	r7, #0
 800390c:	d143      	bne.n	8003996 <_malloc_r+0xd6>
 800390e:	2c00      	cmp	r4, #0
 8003910:	d04b      	beq.n	80039aa <_malloc_r+0xea>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	4639      	mov	r1, r7
 8003916:	4630      	mov	r0, r6
 8003918:	eb04 0903 	add.w	r9, r4, r3
 800391c:	f000 fbe4 	bl	80040e8 <_sbrk_r>
 8003920:	4581      	cmp	r9, r0
 8003922:	d142      	bne.n	80039aa <_malloc_r+0xea>
 8003924:	6821      	ldr	r1, [r4, #0]
 8003926:	4630      	mov	r0, r6
 8003928:	1a6d      	subs	r5, r5, r1
 800392a:	4629      	mov	r1, r5
 800392c:	f7ff ffa6 	bl	800387c <sbrk_aligned>
 8003930:	3001      	adds	r0, #1
 8003932:	d03a      	beq.n	80039aa <_malloc_r+0xea>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	442b      	add	r3, r5
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	f8d8 3000 	ldr.w	r3, [r8]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	bb62      	cbnz	r2, 800399c <_malloc_r+0xdc>
 8003942:	f8c8 7000 	str.w	r7, [r8]
 8003946:	e00f      	b.n	8003968 <_malloc_r+0xa8>
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	1b52      	subs	r2, r2, r5
 800394c:	d420      	bmi.n	8003990 <_malloc_r+0xd0>
 800394e:	2a0b      	cmp	r2, #11
 8003950:	d917      	bls.n	8003982 <_malloc_r+0xc2>
 8003952:	1961      	adds	r1, r4, r5
 8003954:	42a3      	cmp	r3, r4
 8003956:	6025      	str	r5, [r4, #0]
 8003958:	bf18      	it	ne
 800395a:	6059      	strne	r1, [r3, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	bf08      	it	eq
 8003960:	f8c8 1000 	streq.w	r1, [r8]
 8003964:	5162      	str	r2, [r4, r5]
 8003966:	604b      	str	r3, [r1, #4]
 8003968:	4630      	mov	r0, r6
 800396a:	f000 f82f 	bl	80039cc <__malloc_unlock>
 800396e:	f104 000b 	add.w	r0, r4, #11
 8003972:	1d23      	adds	r3, r4, #4
 8003974:	f020 0007 	bic.w	r0, r0, #7
 8003978:	1ac2      	subs	r2, r0, r3
 800397a:	bf1c      	itt	ne
 800397c:	1a1b      	subne	r3, r3, r0
 800397e:	50a3      	strne	r3, [r4, r2]
 8003980:	e7af      	b.n	80038e2 <_malloc_r+0x22>
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	42a3      	cmp	r3, r4
 8003986:	bf0c      	ite	eq
 8003988:	f8c8 2000 	streq.w	r2, [r8]
 800398c:	605a      	strne	r2, [r3, #4]
 800398e:	e7eb      	b.n	8003968 <_malloc_r+0xa8>
 8003990:	4623      	mov	r3, r4
 8003992:	6864      	ldr	r4, [r4, #4]
 8003994:	e7ae      	b.n	80038f4 <_malloc_r+0x34>
 8003996:	463c      	mov	r4, r7
 8003998:	687f      	ldr	r7, [r7, #4]
 800399a:	e7b6      	b.n	800390a <_malloc_r+0x4a>
 800399c:	461a      	mov	r2, r3
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	d1fb      	bne.n	800399c <_malloc_r+0xdc>
 80039a4:	2300      	movs	r3, #0
 80039a6:	6053      	str	r3, [r2, #4]
 80039a8:	e7de      	b.n	8003968 <_malloc_r+0xa8>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4630      	mov	r0, r6
 80039ae:	6033      	str	r3, [r6, #0]
 80039b0:	f000 f80c 	bl	80039cc <__malloc_unlock>
 80039b4:	e794      	b.n	80038e0 <_malloc_r+0x20>
 80039b6:	6005      	str	r5, [r0, #0]
 80039b8:	e7d6      	b.n	8003968 <_malloc_r+0xa8>
 80039ba:	bf00      	nop
 80039bc:	20000280 	.word	0x20000280

080039c0 <__malloc_lock>:
 80039c0:	4801      	ldr	r0, [pc, #4]	@ (80039c8 <__malloc_lock+0x8>)
 80039c2:	f7ff bf11 	b.w	80037e8 <__retarget_lock_acquire_recursive>
 80039c6:	bf00      	nop
 80039c8:	20000278 	.word	0x20000278

080039cc <__malloc_unlock>:
 80039cc:	4801      	ldr	r0, [pc, #4]	@ (80039d4 <__malloc_unlock+0x8>)
 80039ce:	f7ff bf0c 	b.w	80037ea <__retarget_lock_release_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000278 	.word	0x20000278

080039d8 <_sungetc_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	1c4b      	adds	r3, r1, #1
 80039dc:	4614      	mov	r4, r2
 80039de:	d103      	bne.n	80039e8 <_sungetc_r+0x10>
 80039e0:	f04f 35ff 	mov.w	r5, #4294967295
 80039e4:	4628      	mov	r0, r5
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	8993      	ldrh	r3, [r2, #12]
 80039ea:	b2cd      	uxtb	r5, r1
 80039ec:	f023 0320 	bic.w	r3, r3, #32
 80039f0:	8193      	strh	r3, [r2, #12]
 80039f2:	6853      	ldr	r3, [r2, #4]
 80039f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039f6:	b18a      	cbz	r2, 8003a1c <_sungetc_r+0x44>
 80039f8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80039fa:	429a      	cmp	r2, r3
 80039fc:	dd08      	ble.n	8003a10 <_sungetc_r+0x38>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	1e5a      	subs	r2, r3, #1
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	6063      	str	r3, [r4, #4]
 8003a0e:	e7e9      	b.n	80039e4 <_sungetc_r+0xc>
 8003a10:	4621      	mov	r1, r4
 8003a12:	f000 fb30 	bl	8004076 <__submore>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0f1      	beq.n	80039fe <_sungetc_r+0x26>
 8003a1a:	e7e1      	b.n	80039e0 <_sungetc_r+0x8>
 8003a1c:	6921      	ldr	r1, [r4, #16]
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	b141      	cbz	r1, 8003a34 <_sungetc_r+0x5c>
 8003a22:	4291      	cmp	r1, r2
 8003a24:	d206      	bcs.n	8003a34 <_sungetc_r+0x5c>
 8003a26:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003a2a:	42a9      	cmp	r1, r5
 8003a2c:	d102      	bne.n	8003a34 <_sungetc_r+0x5c>
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	e7ea      	b.n	8003a0a <_sungetc_r+0x32>
 8003a34:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003a38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a3e:	2303      	movs	r3, #3
 8003a40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a42:	4623      	mov	r3, r4
 8003a44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e7de      	b.n	8003a0c <_sungetc_r+0x34>

08003a4e <__ssrefill_r>:
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	460c      	mov	r4, r1
 8003a52:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003a54:	b169      	cbz	r1, 8003a72 <__ssrefill_r+0x24>
 8003a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a5a:	4299      	cmp	r1, r3
 8003a5c:	d001      	beq.n	8003a62 <__ssrefill_r+0x14>
 8003a5e:	f7ff fec5 	bl	80037ec <_free_r>
 8003a62:	2000      	movs	r0, #0
 8003a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a66:	6360      	str	r0, [r4, #52]	@ 0x34
 8003a68:	6063      	str	r3, [r4, #4]
 8003a6a:	b113      	cbz	r3, 8003a72 <__ssrefill_r+0x24>
 8003a6c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003a6e:	6023      	str	r3, [r4, #0]
 8003a70:	bd10      	pop	{r4, pc}
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6063      	str	r3, [r4, #4]
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f043 0320 	orr.w	r3, r3, #32
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	e7f3      	b.n	8003a70 <__ssrefill_r+0x22>

08003a88 <__ssvfiscanf_r>:
 8003a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4606      	mov	r6, r0
 8003a92:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003a96:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003a9a:	49aa      	ldr	r1, [pc, #680]	@ (8003d44 <__ssvfiscanf_r+0x2bc>)
 8003a9c:	f10d 0804 	add.w	r8, sp, #4
 8003aa0:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003aa2:	49a9      	ldr	r1, [pc, #676]	@ (8003d48 <__ssvfiscanf_r+0x2c0>)
 8003aa4:	4fa9      	ldr	r7, [pc, #676]	@ (8003d4c <__ssvfiscanf_r+0x2c4>)
 8003aa6:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003aaa:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	7813      	ldrb	r3, [r2, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8159 	beq.w	8003d68 <__ssvfiscanf_r+0x2e0>
 8003ab6:	5cf9      	ldrb	r1, [r7, r3]
 8003ab8:	1c55      	adds	r5, r2, #1
 8003aba:	f011 0108 	ands.w	r1, r1, #8
 8003abe:	d019      	beq.n	8003af4 <__ssvfiscanf_r+0x6c>
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dd0f      	ble.n	8003ae6 <__ssvfiscanf_r+0x5e>
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	5cba      	ldrb	r2, [r7, r2]
 8003acc:	0712      	lsls	r2, r2, #28
 8003ace:	d401      	bmi.n	8003ad4 <__ssvfiscanf_r+0x4c>
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	e7ec      	b.n	8003aae <__ssvfiscanf_r+0x26>
 8003ad4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	3201      	adds	r2, #1
 8003ada:	9245      	str	r2, [sp, #276]	@ 0x114
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	3a01      	subs	r2, #1
 8003ae2:	6062      	str	r2, [r4, #4]
 8003ae4:	e7ec      	b.n	8003ac0 <__ssvfiscanf_r+0x38>
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4630      	mov	r0, r6
 8003aea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003aec:	4798      	blx	r3
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0e9      	beq.n	8003ac6 <__ssvfiscanf_r+0x3e>
 8003af2:	e7ed      	b.n	8003ad0 <__ssvfiscanf_r+0x48>
 8003af4:	2b25      	cmp	r3, #37	@ 0x25
 8003af6:	d012      	beq.n	8003b1e <__ssvfiscanf_r+0x96>
 8003af8:	4699      	mov	r9, r3
 8003afa:	6863      	ldr	r3, [r4, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f340 8094 	ble.w	8003c2a <__ssvfiscanf_r+0x1a2>
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	7813      	ldrb	r3, [r2, #0]
 8003b06:	454b      	cmp	r3, r9
 8003b08:	f040 812e 	bne.w	8003d68 <__ssvfiscanf_r+0x2e0>
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	3201      	adds	r2, #1
 8003b10:	3b01      	subs	r3, #1
 8003b12:	6063      	str	r3, [r4, #4]
 8003b14:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	9345      	str	r3, [sp, #276]	@ 0x114
 8003b1c:	e7d8      	b.n	8003ad0 <__ssvfiscanf_r+0x48>
 8003b1e:	9141      	str	r1, [sp, #260]	@ 0x104
 8003b20:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003b22:	7853      	ldrb	r3, [r2, #1]
 8003b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b26:	bf04      	itt	eq
 8003b28:	2310      	moveq	r3, #16
 8003b2a:	1c95      	addeq	r5, r2, #2
 8003b2c:	f04f 020a 	mov.w	r2, #10
 8003b30:	bf08      	it	eq
 8003b32:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003b34:	46a9      	mov	r9, r5
 8003b36:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003b3a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d91e      	bls.n	8003b80 <__ssvfiscanf_r+0xf8>
 8003b42:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8003d50 <__ssvfiscanf_r+0x2c8>
 8003b46:	2203      	movs	r2, #3
 8003b48:	4650      	mov	r0, sl
 8003b4a:	f000 fadd 	bl	8004108 <memchr>
 8003b4e:	b138      	cbz	r0, 8003b60 <__ssvfiscanf_r+0xd8>
 8003b50:	2301      	movs	r3, #1
 8003b52:	464d      	mov	r5, r9
 8003b54:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003b56:	eba0 000a 	sub.w	r0, r0, sl
 8003b5a:	4083      	lsls	r3, r0
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	9341      	str	r3, [sp, #260]	@ 0x104
 8003b60:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b64:	2b78      	cmp	r3, #120	@ 0x78
 8003b66:	d806      	bhi.n	8003b76 <__ssvfiscanf_r+0xee>
 8003b68:	2b57      	cmp	r3, #87	@ 0x57
 8003b6a:	d810      	bhi.n	8003b8e <__ssvfiscanf_r+0x106>
 8003b6c:	2b25      	cmp	r3, #37	@ 0x25
 8003b6e:	d0c3      	beq.n	8003af8 <__ssvfiscanf_r+0x70>
 8003b70:	d856      	bhi.n	8003c20 <__ssvfiscanf_r+0x198>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d064      	beq.n	8003c40 <__ssvfiscanf_r+0x1b8>
 8003b76:	2303      	movs	r3, #3
 8003b78:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003b7a:	230a      	movs	r3, #10
 8003b7c:	9342      	str	r3, [sp, #264]	@ 0x108
 8003b7e:	e077      	b.n	8003c70 <__ssvfiscanf_r+0x1e8>
 8003b80:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003b82:	464d      	mov	r5, r9
 8003b84:	fb02 1103 	mla	r1, r2, r3, r1
 8003b88:	3930      	subs	r1, #48	@ 0x30
 8003b8a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003b8c:	e7d2      	b.n	8003b34 <__ssvfiscanf_r+0xac>
 8003b8e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003b92:	2a20      	cmp	r2, #32
 8003b94:	d8ef      	bhi.n	8003b76 <__ssvfiscanf_r+0xee>
 8003b96:	a101      	add	r1, pc, #4	@ (adr r1, 8003b9c <__ssvfiscanf_r+0x114>)
 8003b98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003b9c:	08003c4f 	.word	0x08003c4f
 8003ba0:	08003b77 	.word	0x08003b77
 8003ba4:	08003b77 	.word	0x08003b77
 8003ba8:	08003ca9 	.word	0x08003ca9
 8003bac:	08003b77 	.word	0x08003b77
 8003bb0:	08003b77 	.word	0x08003b77
 8003bb4:	08003b77 	.word	0x08003b77
 8003bb8:	08003b77 	.word	0x08003b77
 8003bbc:	08003b77 	.word	0x08003b77
 8003bc0:	08003b77 	.word	0x08003b77
 8003bc4:	08003b77 	.word	0x08003b77
 8003bc8:	08003cbf 	.word	0x08003cbf
 8003bcc:	08003ca5 	.word	0x08003ca5
 8003bd0:	08003c27 	.word	0x08003c27
 8003bd4:	08003c27 	.word	0x08003c27
 8003bd8:	08003c27 	.word	0x08003c27
 8003bdc:	08003b77 	.word	0x08003b77
 8003be0:	08003c61 	.word	0x08003c61
 8003be4:	08003b77 	.word	0x08003b77
 8003be8:	08003b77 	.word	0x08003b77
 8003bec:	08003b77 	.word	0x08003b77
 8003bf0:	08003b77 	.word	0x08003b77
 8003bf4:	08003ccf 	.word	0x08003ccf
 8003bf8:	08003c69 	.word	0x08003c69
 8003bfc:	08003c47 	.word	0x08003c47
 8003c00:	08003b77 	.word	0x08003b77
 8003c04:	08003b77 	.word	0x08003b77
 8003c08:	08003ccb 	.word	0x08003ccb
 8003c0c:	08003b77 	.word	0x08003b77
 8003c10:	08003ca5 	.word	0x08003ca5
 8003c14:	08003b77 	.word	0x08003b77
 8003c18:	08003b77 	.word	0x08003b77
 8003c1c:	08003c4f 	.word	0x08003c4f
 8003c20:	3b45      	subs	r3, #69	@ 0x45
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d8a7      	bhi.n	8003b76 <__ssvfiscanf_r+0xee>
 8003c26:	2305      	movs	r3, #5
 8003c28:	e021      	b.n	8003c6e <__ssvfiscanf_r+0x1e6>
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c30:	4798      	blx	r3
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f43f af65 	beq.w	8003b02 <__ssvfiscanf_r+0x7a>
 8003c38:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	f040 808c 	bne.w	8003d58 <__ssvfiscanf_r+0x2d0>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e08c      	b.n	8003d60 <__ssvfiscanf_r+0x2d8>
 8003c46:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	9241      	str	r2, [sp, #260]	@ 0x104
 8003c4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c54:	9241      	str	r2, [sp, #260]	@ 0x104
 8003c56:	2210      	movs	r2, #16
 8003c58:	2b6e      	cmp	r3, #110	@ 0x6e
 8003c5a:	9242      	str	r2, [sp, #264]	@ 0x108
 8003c5c:	d902      	bls.n	8003c64 <__ssvfiscanf_r+0x1dc>
 8003c5e:	e005      	b.n	8003c6c <__ssvfiscanf_r+0x1e4>
 8003c60:	2300      	movs	r3, #0
 8003c62:	9342      	str	r3, [sp, #264]	@ 0x108
 8003c64:	2303      	movs	r3, #3
 8003c66:	e002      	b.n	8003c6e <__ssvfiscanf_r+0x1e6>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	dd39      	ble.n	8003cea <__ssvfiscanf_r+0x262>
 8003c76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003c78:	0659      	lsls	r1, r3, #25
 8003c7a:	d404      	bmi.n	8003c86 <__ssvfiscanf_r+0x1fe>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	5cba      	ldrb	r2, [r7, r2]
 8003c82:	0712      	lsls	r2, r2, #28
 8003c84:	d438      	bmi.n	8003cf8 <__ssvfiscanf_r+0x270>
 8003c86:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	dc47      	bgt.n	8003d1c <__ssvfiscanf_r+0x294>
 8003c8c:	466b      	mov	r3, sp
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4630      	mov	r0, r6
 8003c92:	a941      	add	r1, sp, #260	@ 0x104
 8003c94:	f000 f86a 	bl	8003d6c <_scanf_chars>
 8003c98:	2801      	cmp	r0, #1
 8003c9a:	d065      	beq.n	8003d68 <__ssvfiscanf_r+0x2e0>
 8003c9c:	2802      	cmp	r0, #2
 8003c9e:	f47f af17 	bne.w	8003ad0 <__ssvfiscanf_r+0x48>
 8003ca2:	e7c9      	b.n	8003c38 <__ssvfiscanf_r+0x1b0>
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	e7d7      	b.n	8003c58 <__ssvfiscanf_r+0x1d0>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4640      	mov	r0, r8
 8003cac:	f000 f9aa 	bl	8004004 <__sccl>
 8003cb0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cb8:	9341      	str	r3, [sp, #260]	@ 0x104
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e7d7      	b.n	8003c6e <__ssvfiscanf_r+0x1e6>
 8003cbe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc4:	9341      	str	r3, [sp, #260]	@ 0x104
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e7d1      	b.n	8003c6e <__ssvfiscanf_r+0x1e6>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e7cf      	b.n	8003c6e <__ssvfiscanf_r+0x1e6>
 8003cce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003cd0:	06c3      	lsls	r3, r0, #27
 8003cd2:	f53f aefd 	bmi.w	8003ad0 <__ssvfiscanf_r+0x48>
 8003cd6:	9b00      	ldr	r3, [sp, #0]
 8003cd8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003cda:	1d19      	adds	r1, r3, #4
 8003cdc:	9100      	str	r1, [sp, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	07c0      	lsls	r0, r0, #31
 8003ce2:	bf4c      	ite	mi
 8003ce4:	801a      	strhmi	r2, [r3, #0]
 8003ce6:	601a      	strpl	r2, [r3, #0]
 8003ce8:	e6f2      	b.n	8003ad0 <__ssvfiscanf_r+0x48>
 8003cea:	4621      	mov	r1, r4
 8003cec:	4630      	mov	r0, r6
 8003cee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003cf0:	4798      	blx	r3
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0bf      	beq.n	8003c76 <__ssvfiscanf_r+0x1ee>
 8003cf6:	e79f      	b.n	8003c38 <__ssvfiscanf_r+0x1b0>
 8003cf8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	9245      	str	r2, [sp, #276]	@ 0x114
 8003cfe:	6862      	ldr	r2, [r4, #4]
 8003d00:	3a01      	subs	r2, #1
 8003d02:	2a00      	cmp	r2, #0
 8003d04:	6062      	str	r2, [r4, #4]
 8003d06:	dd02      	ble.n	8003d0e <__ssvfiscanf_r+0x286>
 8003d08:	3301      	adds	r3, #1
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	e7b6      	b.n	8003c7c <__ssvfiscanf_r+0x1f4>
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4630      	mov	r0, r6
 8003d12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003d14:	4798      	blx	r3
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d0b0      	beq.n	8003c7c <__ssvfiscanf_r+0x1f4>
 8003d1a:	e78d      	b.n	8003c38 <__ssvfiscanf_r+0x1b0>
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	dc06      	bgt.n	8003d2e <__ssvfiscanf_r+0x2a6>
 8003d20:	466b      	mov	r3, sp
 8003d22:	4622      	mov	r2, r4
 8003d24:	4630      	mov	r0, r6
 8003d26:	a941      	add	r1, sp, #260	@ 0x104
 8003d28:	f000 f87a 	bl	8003e20 <_scanf_i>
 8003d2c:	e7b4      	b.n	8003c98 <__ssvfiscanf_r+0x210>
 8003d2e:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <__ssvfiscanf_r+0x2cc>)
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f43f aecd 	beq.w	8003ad0 <__ssvfiscanf_r+0x48>
 8003d36:	466b      	mov	r3, sp
 8003d38:	4622      	mov	r2, r4
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	a941      	add	r1, sp, #260	@ 0x104
 8003d3e:	f3af 8000 	nop.w
 8003d42:	e7a9      	b.n	8003c98 <__ssvfiscanf_r+0x210>
 8003d44:	080039d9 	.word	0x080039d9
 8003d48:	08003a4f 	.word	0x08003a4f
 8003d4c:	080043fe 	.word	0x080043fe
 8003d50:	080043de 	.word	0x080043de
 8003d54:	00000000 	.word	0x00000000
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	065b      	lsls	r3, r3, #25
 8003d5c:	f53f af70 	bmi.w	8003c40 <__ssvfiscanf_r+0x1b8>
 8003d60:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d68:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003d6a:	e7f9      	b.n	8003d60 <__ssvfiscanf_r+0x2d8>

08003d6c <_scanf_chars>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4615      	mov	r5, r2
 8003d72:	688a      	ldr	r2, [r1, #8]
 8003d74:	4680      	mov	r8, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	b932      	cbnz	r2, 8003d88 <_scanf_chars+0x1c>
 8003d7a:	698a      	ldr	r2, [r1, #24]
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	bf14      	ite	ne
 8003d80:	f04f 32ff 	movne.w	r2, #4294967295
 8003d84:	2201      	moveq	r2, #1
 8003d86:	608a      	str	r2, [r1, #8]
 8003d88:	2700      	movs	r7, #0
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8003e1c <_scanf_chars+0xb0>
 8003d90:	06d1      	lsls	r1, r2, #27
 8003d92:	bf5f      	itttt	pl
 8003d94:	681a      	ldrpl	r2, [r3, #0]
 8003d96:	1d11      	addpl	r1, r2, #4
 8003d98:	6019      	strpl	r1, [r3, #0]
 8003d9a:	6816      	ldrpl	r6, [r2, #0]
 8003d9c:	69a0      	ldr	r0, [r4, #24]
 8003d9e:	b188      	cbz	r0, 8003dc4 <_scanf_chars+0x58>
 8003da0:	2801      	cmp	r0, #1
 8003da2:	d107      	bne.n	8003db4 <_scanf_chars+0x48>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	6963      	ldr	r3, [r4, #20]
 8003daa:	5c9b      	ldrb	r3, [r3, r2]
 8003dac:	b953      	cbnz	r3, 8003dc4 <_scanf_chars+0x58>
 8003dae:	2f00      	cmp	r7, #0
 8003db0:	d031      	beq.n	8003e16 <_scanf_chars+0xaa>
 8003db2:	e022      	b.n	8003dfa <_scanf_chars+0x8e>
 8003db4:	2802      	cmp	r0, #2
 8003db6:	d120      	bne.n	8003dfa <_scanf_chars+0x8e>
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003dc0:	071b      	lsls	r3, r3, #28
 8003dc2:	d41a      	bmi.n	8003dfa <_scanf_chars+0x8e>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	3701      	adds	r7, #1
 8003dc8:	06da      	lsls	r2, r3, #27
 8003dca:	bf5e      	ittt	pl
 8003dcc:	682b      	ldrpl	r3, [r5, #0]
 8003dce:	781b      	ldrbpl	r3, [r3, #0]
 8003dd0:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003dd4:	682a      	ldr	r2, [r5, #0]
 8003dd6:	686b      	ldr	r3, [r5, #4]
 8003dd8:	3201      	adds	r2, #1
 8003dda:	602a      	str	r2, [r5, #0]
 8003ddc:	68a2      	ldr	r2, [r4, #8]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	606b      	str	r3, [r5, #4]
 8003de4:	60a2      	str	r2, [r4, #8]
 8003de6:	b142      	cbz	r2, 8003dfa <_scanf_chars+0x8e>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	dcd7      	bgt.n	8003d9c <_scanf_chars+0x30>
 8003dec:	4629      	mov	r1, r5
 8003dee:	4640      	mov	r0, r8
 8003df0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003df4:	4798      	blx	r3
 8003df6:	2800      	cmp	r0, #0
 8003df8:	d0d0      	beq.n	8003d9c <_scanf_chars+0x30>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f013 0310 	ands.w	r3, r3, #16
 8003e00:	d105      	bne.n	8003e0e <_scanf_chars+0xa2>
 8003e02:	68e2      	ldr	r2, [r4, #12]
 8003e04:	3201      	adds	r2, #1
 8003e06:	60e2      	str	r2, [r4, #12]
 8003e08:	69a2      	ldr	r2, [r4, #24]
 8003e0a:	b102      	cbz	r2, 8003e0e <_scanf_chars+0xa2>
 8003e0c:	7033      	strb	r3, [r6, #0]
 8003e0e:	2000      	movs	r0, #0
 8003e10:	6923      	ldr	r3, [r4, #16]
 8003e12:	443b      	add	r3, r7
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e1a:	bf00      	nop
 8003e1c:	080043fe 	.word	0x080043fe

08003e20 <_scanf_i>:
 8003e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e24:	460c      	mov	r4, r1
 8003e26:	4698      	mov	r8, r3
 8003e28:	4b72      	ldr	r3, [pc, #456]	@ (8003ff4 <_scanf_i+0x1d4>)
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	4616      	mov	r6, r2
 8003e30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff8 <_scanf_i+0x1d8>)
 8003e3c:	69a1      	ldr	r1, [r4, #24]
 8003e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8003ffc <_scanf_i+0x1dc>)
 8003e40:	4627      	mov	r7, r4
 8003e42:	2903      	cmp	r1, #3
 8003e44:	bf08      	it	eq
 8003e46:	461a      	moveq	r2, r3
 8003e48:	68a3      	ldr	r3, [r4, #8]
 8003e4a:	9201      	str	r2, [sp, #4]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003e52:	bf81      	itttt	hi
 8003e54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003e58:	eb03 0905 	addhi.w	r9, r3, r5
 8003e5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003e60:	60a3      	strhi	r3, [r4, #8]
 8003e62:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003e66:	bf98      	it	ls
 8003e68:	f04f 0900 	movls.w	r9, #0
 8003e6c:	463d      	mov	r5, r7
 8003e6e:	f04f 0b00 	mov.w	fp, #0
 8003e72:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	6831      	ldr	r1, [r6, #0]
 8003e7a:	ab03      	add	r3, sp, #12
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	7809      	ldrb	r1, [r1, #0]
 8003e80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003e84:	f000 f940 	bl	8004108 <memchr>
 8003e88:	b328      	cbz	r0, 8003ed6 <_scanf_i+0xb6>
 8003e8a:	f1bb 0f01 	cmp.w	fp, #1
 8003e8e:	d159      	bne.n	8003f44 <_scanf_i+0x124>
 8003e90:	6862      	ldr	r2, [r4, #4]
 8003e92:	b92a      	cbnz	r2, 8003ea0 <_scanf_i+0x80>
 8003e94:	2108      	movs	r1, #8
 8003e96:	6822      	ldr	r2, [r4, #0]
 8003e98:	6061      	str	r1, [r4, #4]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9e:	6022      	str	r2, [r4, #0]
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003ea6:	6022      	str	r2, [r4, #0]
 8003ea8:	68a2      	ldr	r2, [r4, #8]
 8003eaa:	1e51      	subs	r1, r2, #1
 8003eac:	60a1      	str	r1, [r4, #8]
 8003eae:	b192      	cbz	r2, 8003ed6 <_scanf_i+0xb6>
 8003eb0:	6832      	ldr	r2, [r6, #0]
 8003eb2:	1c51      	adds	r1, r2, #1
 8003eb4:	6031      	str	r1, [r6, #0]
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	f805 2b01 	strb.w	r2, [r5], #1
 8003ebc:	6872      	ldr	r2, [r6, #4]
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	6072      	str	r2, [r6, #4]
 8003ec4:	dc07      	bgt.n	8003ed6 <_scanf_i+0xb6>
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	4650      	mov	r0, sl
 8003eca:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003ece:	4790      	blx	r2
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	f040 8085 	bne.w	8003fe0 <_scanf_i+0x1c0>
 8003ed6:	f10b 0b01 	add.w	fp, fp, #1
 8003eda:	f1bb 0f03 	cmp.w	fp, #3
 8003ede:	d1cb      	bne.n	8003e78 <_scanf_i+0x58>
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	b90b      	cbnz	r3, 8003ee8 <_scanf_i+0xc8>
 8003ee4:	230a      	movs	r3, #10
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	4945      	ldr	r1, [pc, #276]	@ (8004000 <_scanf_i+0x1e0>)
 8003eec:	6960      	ldr	r0, [r4, #20]
 8003eee:	1ac9      	subs	r1, r1, r3
 8003ef0:	f000 f888 	bl	8004004 <__sccl>
 8003ef4:	f04f 0b00 	mov.w	fp, #0
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03d      	beq.n	8003f7c <_scanf_i+0x15c>
 8003f00:	6831      	ldr	r1, [r6, #0]
 8003f02:	6960      	ldr	r0, [r4, #20]
 8003f04:	f891 c000 	ldrb.w	ip, [r1]
 8003f08:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d035      	beq.n	8003f7c <_scanf_i+0x15c>
 8003f10:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003f14:	d124      	bne.n	8003f60 <_scanf_i+0x140>
 8003f16:	0510      	lsls	r0, r2, #20
 8003f18:	d522      	bpl.n	8003f60 <_scanf_i+0x140>
 8003f1a:	f10b 0b01 	add.w	fp, fp, #1
 8003f1e:	f1b9 0f00 	cmp.w	r9, #0
 8003f22:	d003      	beq.n	8003f2c <_scanf_i+0x10c>
 8003f24:	3301      	adds	r3, #1
 8003f26:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f2a:	60a3      	str	r3, [r4, #8]
 8003f2c:	6873      	ldr	r3, [r6, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	6073      	str	r3, [r6, #4]
 8003f34:	dd1b      	ble.n	8003f6e <_scanf_i+0x14e>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	68a3      	ldr	r3, [r4, #8]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60a3      	str	r3, [r4, #8]
 8003f42:	e7d9      	b.n	8003ef8 <_scanf_i+0xd8>
 8003f44:	f1bb 0f02 	cmp.w	fp, #2
 8003f48:	d1ae      	bne.n	8003ea8 <_scanf_i+0x88>
 8003f4a:	6822      	ldr	r2, [r4, #0]
 8003f4c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003f50:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003f54:	d1bf      	bne.n	8003ed6 <_scanf_i+0xb6>
 8003f56:	2110      	movs	r1, #16
 8003f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f5c:	6061      	str	r1, [r4, #4]
 8003f5e:	e7a2      	b.n	8003ea6 <_scanf_i+0x86>
 8003f60:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003f64:	6022      	str	r2, [r4, #0]
 8003f66:	780b      	ldrb	r3, [r1, #0]
 8003f68:	f805 3b01 	strb.w	r3, [r5], #1
 8003f6c:	e7de      	b.n	8003f2c <_scanf_i+0x10c>
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4650      	mov	r0, sl
 8003f72:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003f76:	4798      	blx	r3
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d0df      	beq.n	8003f3c <_scanf_i+0x11c>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	05d9      	lsls	r1, r3, #23
 8003f80:	d50d      	bpl.n	8003f9e <_scanf_i+0x17e>
 8003f82:	42bd      	cmp	r5, r7
 8003f84:	d909      	bls.n	8003f9a <_scanf_i+0x17a>
 8003f86:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	4650      	mov	r0, sl
 8003f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f92:	f105 39ff 	add.w	r9, r5, #4294967295
 8003f96:	4798      	blx	r3
 8003f98:	464d      	mov	r5, r9
 8003f9a:	42bd      	cmp	r5, r7
 8003f9c:	d028      	beq.n	8003ff0 <_scanf_i+0x1d0>
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	f012 0210 	ands.w	r2, r2, #16
 8003fa4:	d113      	bne.n	8003fce <_scanf_i+0x1ae>
 8003fa6:	702a      	strb	r2, [r5, #0]
 8003fa8:	4639      	mov	r1, r7
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	4650      	mov	r0, sl
 8003fae:	9e01      	ldr	r6, [sp, #4]
 8003fb0:	47b0      	blx	r6
 8003fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	f8c8 2000 	str.w	r2, [r8]
 8003fbe:	f011 0f20 	tst.w	r1, #32
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	d00f      	beq.n	8003fe6 <_scanf_i+0x1c6>
 8003fc6:	6018      	str	r0, [r3, #0]
 8003fc8:	68e3      	ldr	r3, [r4, #12]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	60e3      	str	r3, [r4, #12]
 8003fce:	2000      	movs	r0, #0
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	1bed      	subs	r5, r5, r7
 8003fd4:	445d      	add	r5, fp
 8003fd6:	442b      	add	r3, r5
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	b007      	add	sp, #28
 8003fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe0:	f04f 0b00 	mov.w	fp, #0
 8003fe4:	e7ca      	b.n	8003f7c <_scanf_i+0x15c>
 8003fe6:	07ca      	lsls	r2, r1, #31
 8003fe8:	bf4c      	ite	mi
 8003fea:	8018      	strhmi	r0, [r3, #0]
 8003fec:	6018      	strpl	r0, [r3, #0]
 8003fee:	e7eb      	b.n	8003fc8 <_scanf_i+0x1a8>
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	e7f2      	b.n	8003fda <_scanf_i+0x1ba>
 8003ff4:	080043a8 	.word	0x080043a8
 8003ff8:	08004291 	.word	0x08004291
 8003ffc:	08004371 	.word	0x08004371
 8004000:	080043f2 	.word	0x080043f2

08004004 <__sccl>:
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	780b      	ldrb	r3, [r1, #0]
 8004008:	4604      	mov	r4, r0
 800400a:	2b5e      	cmp	r3, #94	@ 0x5e
 800400c:	bf0b      	itete	eq
 800400e:	784b      	ldrbeq	r3, [r1, #1]
 8004010:	1c4a      	addne	r2, r1, #1
 8004012:	1c8a      	addeq	r2, r1, #2
 8004014:	2100      	movne	r1, #0
 8004016:	bf08      	it	eq
 8004018:	2101      	moveq	r1, #1
 800401a:	3801      	subs	r0, #1
 800401c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004020:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004024:	42a8      	cmp	r0, r5
 8004026:	d1fb      	bne.n	8004020 <__sccl+0x1c>
 8004028:	b90b      	cbnz	r3, 800402e <__sccl+0x2a>
 800402a:	1e50      	subs	r0, r2, #1
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	f081 0101 	eor.w	r1, r1, #1
 8004032:	4610      	mov	r0, r2
 8004034:	54e1      	strb	r1, [r4, r3]
 8004036:	4602      	mov	r2, r0
 8004038:	f812 5b01 	ldrb.w	r5, [r2], #1
 800403c:	2d2d      	cmp	r5, #45	@ 0x2d
 800403e:	d005      	beq.n	800404c <__sccl+0x48>
 8004040:	2d5d      	cmp	r5, #93	@ 0x5d
 8004042:	d016      	beq.n	8004072 <__sccl+0x6e>
 8004044:	2d00      	cmp	r5, #0
 8004046:	d0f1      	beq.n	800402c <__sccl+0x28>
 8004048:	462b      	mov	r3, r5
 800404a:	e7f2      	b.n	8004032 <__sccl+0x2e>
 800404c:	7846      	ldrb	r6, [r0, #1]
 800404e:	2e5d      	cmp	r6, #93	@ 0x5d
 8004050:	d0fa      	beq.n	8004048 <__sccl+0x44>
 8004052:	42b3      	cmp	r3, r6
 8004054:	dcf8      	bgt.n	8004048 <__sccl+0x44>
 8004056:	461a      	mov	r2, r3
 8004058:	3002      	adds	r0, #2
 800405a:	3201      	adds	r2, #1
 800405c:	4296      	cmp	r6, r2
 800405e:	54a1      	strb	r1, [r4, r2]
 8004060:	dcfb      	bgt.n	800405a <__sccl+0x56>
 8004062:	1af2      	subs	r2, r6, r3
 8004064:	3a01      	subs	r2, #1
 8004066:	42b3      	cmp	r3, r6
 8004068:	bfa8      	it	ge
 800406a:	2200      	movge	r2, #0
 800406c:	1c5d      	adds	r5, r3, #1
 800406e:	18ab      	adds	r3, r5, r2
 8004070:	e7e1      	b.n	8004036 <__sccl+0x32>
 8004072:	4610      	mov	r0, r2
 8004074:	e7da      	b.n	800402c <__sccl+0x28>

08004076 <__submore>:
 8004076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800407a:	460c      	mov	r4, r1
 800407c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800407e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004082:	4299      	cmp	r1, r3
 8004084:	d11b      	bne.n	80040be <__submore+0x48>
 8004086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800408a:	f7ff fc19 	bl	80038c0 <_malloc_r>
 800408e:	b918      	cbnz	r0, 8004098 <__submore+0x22>
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800409c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800409e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80040a2:	6360      	str	r0, [r4, #52]	@ 0x34
 80040a4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80040a8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80040ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80040b0:	7043      	strb	r3, [r0, #1]
 80040b2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80040b6:	7003      	strb	r3, [r0, #0]
 80040b8:	6020      	str	r0, [r4, #0]
 80040ba:	2000      	movs	r0, #0
 80040bc:	e7ea      	b.n	8004094 <__submore+0x1e>
 80040be:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80040c0:	0077      	lsls	r7, r6, #1
 80040c2:	463a      	mov	r2, r7
 80040c4:	f000 f83c 	bl	8004140 <_realloc_r>
 80040c8:	4605      	mov	r5, r0
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d0e0      	beq.n	8004090 <__submore+0x1a>
 80040ce:	eb00 0806 	add.w	r8, r0, r6
 80040d2:	4601      	mov	r1, r0
 80040d4:	4632      	mov	r2, r6
 80040d6:	4640      	mov	r0, r8
 80040d8:	f000 f824 	bl	8004124 <memcpy>
 80040dc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80040e0:	f8c4 8000 	str.w	r8, [r4]
 80040e4:	e7e9      	b.n	80040ba <__submore+0x44>
	...

080040e8 <_sbrk_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	2300      	movs	r3, #0
 80040ec:	4d05      	ldr	r5, [pc, #20]	@ (8004104 <_sbrk_r+0x1c>)
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7fd f858 	bl	80011a8 <_sbrk>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_sbrk_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_sbrk_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	20000274 	.word	0x20000274

08004108 <memchr>:
 8004108:	4603      	mov	r3, r0
 800410a:	b510      	push	{r4, lr}
 800410c:	b2c9      	uxtb	r1, r1
 800410e:	4402      	add	r2, r0
 8004110:	4293      	cmp	r3, r2
 8004112:	4618      	mov	r0, r3
 8004114:	d101      	bne.n	800411a <memchr+0x12>
 8004116:	2000      	movs	r0, #0
 8004118:	e003      	b.n	8004122 <memchr+0x1a>
 800411a:	7804      	ldrb	r4, [r0, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	428c      	cmp	r4, r1
 8004120:	d1f6      	bne.n	8004110 <memchr+0x8>
 8004122:	bd10      	pop	{r4, pc}

08004124 <memcpy>:
 8004124:	440a      	add	r2, r1
 8004126:	4291      	cmp	r1, r2
 8004128:	f100 33ff 	add.w	r3, r0, #4294967295
 800412c:	d100      	bne.n	8004130 <memcpy+0xc>
 800412e:	4770      	bx	lr
 8004130:	b510      	push	{r4, lr}
 8004132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004136:	4291      	cmp	r1, r2
 8004138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800413c:	d1f9      	bne.n	8004132 <memcpy+0xe>
 800413e:	bd10      	pop	{r4, pc}

08004140 <_realloc_r>:
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	4680      	mov	r8, r0
 8004146:	4615      	mov	r5, r2
 8004148:	460c      	mov	r4, r1
 800414a:	b921      	cbnz	r1, 8004156 <_realloc_r+0x16>
 800414c:	4611      	mov	r1, r2
 800414e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004152:	f7ff bbb5 	b.w	80038c0 <_malloc_r>
 8004156:	b92a      	cbnz	r2, 8004164 <_realloc_r+0x24>
 8004158:	f7ff fb48 	bl	80037ec <_free_r>
 800415c:	2400      	movs	r4, #0
 800415e:	4620      	mov	r0, r4
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	f000 f906 	bl	8004374 <_malloc_usable_size_r>
 8004168:	4285      	cmp	r5, r0
 800416a:	4606      	mov	r6, r0
 800416c:	d802      	bhi.n	8004174 <_realloc_r+0x34>
 800416e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004172:	d8f4      	bhi.n	800415e <_realloc_r+0x1e>
 8004174:	4629      	mov	r1, r5
 8004176:	4640      	mov	r0, r8
 8004178:	f7ff fba2 	bl	80038c0 <_malloc_r>
 800417c:	4607      	mov	r7, r0
 800417e:	2800      	cmp	r0, #0
 8004180:	d0ec      	beq.n	800415c <_realloc_r+0x1c>
 8004182:	42b5      	cmp	r5, r6
 8004184:	462a      	mov	r2, r5
 8004186:	4621      	mov	r1, r4
 8004188:	bf28      	it	cs
 800418a:	4632      	movcs	r2, r6
 800418c:	f7ff ffca 	bl	8004124 <memcpy>
 8004190:	4621      	mov	r1, r4
 8004192:	4640      	mov	r0, r8
 8004194:	f7ff fb2a 	bl	80037ec <_free_r>
 8004198:	463c      	mov	r4, r7
 800419a:	e7e0      	b.n	800415e <_realloc_r+0x1e>

0800419c <_strtol_l.constprop.0>:
 800419c:	2b24      	cmp	r3, #36	@ 0x24
 800419e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a2:	4686      	mov	lr, r0
 80041a4:	4690      	mov	r8, r2
 80041a6:	d801      	bhi.n	80041ac <_strtol_l.constprop.0+0x10>
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d106      	bne.n	80041ba <_strtol_l.constprop.0+0x1e>
 80041ac:	f7ff faf2 	bl	8003794 <__errno>
 80041b0:	2316      	movs	r3, #22
 80041b2:	6003      	str	r3, [r0, #0]
 80041b4:	2000      	movs	r0, #0
 80041b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ba:	460d      	mov	r5, r1
 80041bc:	4833      	ldr	r0, [pc, #204]	@ (800428c <_strtol_l.constprop.0+0xf0>)
 80041be:	462a      	mov	r2, r5
 80041c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041c4:	5d06      	ldrb	r6, [r0, r4]
 80041c6:	f016 0608 	ands.w	r6, r6, #8
 80041ca:	d1f8      	bne.n	80041be <_strtol_l.constprop.0+0x22>
 80041cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80041ce:	d12d      	bne.n	800422c <_strtol_l.constprop.0+0x90>
 80041d0:	2601      	movs	r6, #1
 80041d2:	782c      	ldrb	r4, [r5, #0]
 80041d4:	1c95      	adds	r5, r2, #2
 80041d6:	f033 0210 	bics.w	r2, r3, #16
 80041da:	d109      	bne.n	80041f0 <_strtol_l.constprop.0+0x54>
 80041dc:	2c30      	cmp	r4, #48	@ 0x30
 80041de:	d12a      	bne.n	8004236 <_strtol_l.constprop.0+0x9a>
 80041e0:	782a      	ldrb	r2, [r5, #0]
 80041e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80041e6:	2a58      	cmp	r2, #88	@ 0x58
 80041e8:	d125      	bne.n	8004236 <_strtol_l.constprop.0+0x9a>
 80041ea:	2310      	movs	r3, #16
 80041ec:	786c      	ldrb	r4, [r5, #1]
 80041ee:	3502      	adds	r5, #2
 80041f0:	2200      	movs	r2, #0
 80041f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80041f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041fa:	fbbc f9f3 	udiv	r9, ip, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	fb03 ca19 	mls	sl, r3, r9, ip
 8004204:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004208:	2f09      	cmp	r7, #9
 800420a:	d81b      	bhi.n	8004244 <_strtol_l.constprop.0+0xa8>
 800420c:	463c      	mov	r4, r7
 800420e:	42a3      	cmp	r3, r4
 8004210:	dd27      	ble.n	8004262 <_strtol_l.constprop.0+0xc6>
 8004212:	1c57      	adds	r7, r2, #1
 8004214:	d007      	beq.n	8004226 <_strtol_l.constprop.0+0x8a>
 8004216:	4581      	cmp	r9, r0
 8004218:	d320      	bcc.n	800425c <_strtol_l.constprop.0+0xc0>
 800421a:	d101      	bne.n	8004220 <_strtol_l.constprop.0+0x84>
 800421c:	45a2      	cmp	sl, r4
 800421e:	db1d      	blt.n	800425c <_strtol_l.constprop.0+0xc0>
 8004220:	2201      	movs	r2, #1
 8004222:	fb00 4003 	mla	r0, r0, r3, r4
 8004226:	f815 4b01 	ldrb.w	r4, [r5], #1
 800422a:	e7eb      	b.n	8004204 <_strtol_l.constprop.0+0x68>
 800422c:	2c2b      	cmp	r4, #43	@ 0x2b
 800422e:	bf04      	itt	eq
 8004230:	782c      	ldrbeq	r4, [r5, #0]
 8004232:	1c95      	addeq	r5, r2, #2
 8004234:	e7cf      	b.n	80041d6 <_strtol_l.constprop.0+0x3a>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1da      	bne.n	80041f0 <_strtol_l.constprop.0+0x54>
 800423a:	2c30      	cmp	r4, #48	@ 0x30
 800423c:	bf0c      	ite	eq
 800423e:	2308      	moveq	r3, #8
 8004240:	230a      	movne	r3, #10
 8004242:	e7d5      	b.n	80041f0 <_strtol_l.constprop.0+0x54>
 8004244:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004248:	2f19      	cmp	r7, #25
 800424a:	d801      	bhi.n	8004250 <_strtol_l.constprop.0+0xb4>
 800424c:	3c37      	subs	r4, #55	@ 0x37
 800424e:	e7de      	b.n	800420e <_strtol_l.constprop.0+0x72>
 8004250:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004254:	2f19      	cmp	r7, #25
 8004256:	d804      	bhi.n	8004262 <_strtol_l.constprop.0+0xc6>
 8004258:	3c57      	subs	r4, #87	@ 0x57
 800425a:	e7d8      	b.n	800420e <_strtol_l.constprop.0+0x72>
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	e7e1      	b.n	8004226 <_strtol_l.constprop.0+0x8a>
 8004262:	1c53      	adds	r3, r2, #1
 8004264:	d108      	bne.n	8004278 <_strtol_l.constprop.0+0xdc>
 8004266:	2322      	movs	r3, #34	@ 0x22
 8004268:	4660      	mov	r0, ip
 800426a:	f8ce 3000 	str.w	r3, [lr]
 800426e:	f1b8 0f00 	cmp.w	r8, #0
 8004272:	d0a0      	beq.n	80041b6 <_strtol_l.constprop.0+0x1a>
 8004274:	1e69      	subs	r1, r5, #1
 8004276:	e006      	b.n	8004286 <_strtol_l.constprop.0+0xea>
 8004278:	b106      	cbz	r6, 800427c <_strtol_l.constprop.0+0xe0>
 800427a:	4240      	negs	r0, r0
 800427c:	f1b8 0f00 	cmp.w	r8, #0
 8004280:	d099      	beq.n	80041b6 <_strtol_l.constprop.0+0x1a>
 8004282:	2a00      	cmp	r2, #0
 8004284:	d1f6      	bne.n	8004274 <_strtol_l.constprop.0+0xd8>
 8004286:	f8c8 1000 	str.w	r1, [r8]
 800428a:	e794      	b.n	80041b6 <_strtol_l.constprop.0+0x1a>
 800428c:	080043fe 	.word	0x080043fe

08004290 <_strtol_r>:
 8004290:	f7ff bf84 	b.w	800419c <_strtol_l.constprop.0>

08004294 <_strtoul_l.constprop.0>:
 8004294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004298:	4686      	mov	lr, r0
 800429a:	460d      	mov	r5, r1
 800429c:	4e33      	ldr	r6, [pc, #204]	@ (800436c <_strtoul_l.constprop.0+0xd8>)
 800429e:	4628      	mov	r0, r5
 80042a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042a4:	5d37      	ldrb	r7, [r6, r4]
 80042a6:	f017 0708 	ands.w	r7, r7, #8
 80042aa:	d1f8      	bne.n	800429e <_strtoul_l.constprop.0+0xa>
 80042ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80042ae:	d12f      	bne.n	8004310 <_strtoul_l.constprop.0+0x7c>
 80042b0:	2701      	movs	r7, #1
 80042b2:	782c      	ldrb	r4, [r5, #0]
 80042b4:	1c85      	adds	r5, r0, #2
 80042b6:	f033 0010 	bics.w	r0, r3, #16
 80042ba:	d109      	bne.n	80042d0 <_strtoul_l.constprop.0+0x3c>
 80042bc:	2c30      	cmp	r4, #48	@ 0x30
 80042be:	d12c      	bne.n	800431a <_strtoul_l.constprop.0+0x86>
 80042c0:	7828      	ldrb	r0, [r5, #0]
 80042c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80042c6:	2858      	cmp	r0, #88	@ 0x58
 80042c8:	d127      	bne.n	800431a <_strtoul_l.constprop.0+0x86>
 80042ca:	2310      	movs	r3, #16
 80042cc:	786c      	ldrb	r4, [r5, #1]
 80042ce:	3502      	adds	r5, #2
 80042d0:	f04f 38ff 	mov.w	r8, #4294967295
 80042d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80042d8:	2600      	movs	r6, #0
 80042da:	fb03 f908 	mul.w	r9, r3, r8
 80042de:	4630      	mov	r0, r6
 80042e0:	ea6f 0909 	mvn.w	r9, r9
 80042e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80042e8:	f1bc 0f09 	cmp.w	ip, #9
 80042ec:	d81c      	bhi.n	8004328 <_strtoul_l.constprop.0+0x94>
 80042ee:	4664      	mov	r4, ip
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	dd2a      	ble.n	800434a <_strtoul_l.constprop.0+0xb6>
 80042f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80042f8:	d007      	beq.n	800430a <_strtoul_l.constprop.0+0x76>
 80042fa:	4580      	cmp	r8, r0
 80042fc:	d322      	bcc.n	8004344 <_strtoul_l.constprop.0+0xb0>
 80042fe:	d101      	bne.n	8004304 <_strtoul_l.constprop.0+0x70>
 8004300:	45a1      	cmp	r9, r4
 8004302:	db1f      	blt.n	8004344 <_strtoul_l.constprop.0+0xb0>
 8004304:	2601      	movs	r6, #1
 8004306:	fb00 4003 	mla	r0, r0, r3, r4
 800430a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800430e:	e7e9      	b.n	80042e4 <_strtoul_l.constprop.0+0x50>
 8004310:	2c2b      	cmp	r4, #43	@ 0x2b
 8004312:	bf04      	itt	eq
 8004314:	782c      	ldrbeq	r4, [r5, #0]
 8004316:	1c85      	addeq	r5, r0, #2
 8004318:	e7cd      	b.n	80042b6 <_strtoul_l.constprop.0+0x22>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1d8      	bne.n	80042d0 <_strtoul_l.constprop.0+0x3c>
 800431e:	2c30      	cmp	r4, #48	@ 0x30
 8004320:	bf0c      	ite	eq
 8004322:	2308      	moveq	r3, #8
 8004324:	230a      	movne	r3, #10
 8004326:	e7d3      	b.n	80042d0 <_strtoul_l.constprop.0+0x3c>
 8004328:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800432c:	f1bc 0f19 	cmp.w	ip, #25
 8004330:	d801      	bhi.n	8004336 <_strtoul_l.constprop.0+0xa2>
 8004332:	3c37      	subs	r4, #55	@ 0x37
 8004334:	e7dc      	b.n	80042f0 <_strtoul_l.constprop.0+0x5c>
 8004336:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800433a:	f1bc 0f19 	cmp.w	ip, #25
 800433e:	d804      	bhi.n	800434a <_strtoul_l.constprop.0+0xb6>
 8004340:	3c57      	subs	r4, #87	@ 0x57
 8004342:	e7d5      	b.n	80042f0 <_strtoul_l.constprop.0+0x5c>
 8004344:	f04f 36ff 	mov.w	r6, #4294967295
 8004348:	e7df      	b.n	800430a <_strtoul_l.constprop.0+0x76>
 800434a:	1c73      	adds	r3, r6, #1
 800434c:	d106      	bne.n	800435c <_strtoul_l.constprop.0+0xc8>
 800434e:	2322      	movs	r3, #34	@ 0x22
 8004350:	4630      	mov	r0, r6
 8004352:	f8ce 3000 	str.w	r3, [lr]
 8004356:	b932      	cbnz	r2, 8004366 <_strtoul_l.constprop.0+0xd2>
 8004358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800435c:	b107      	cbz	r7, 8004360 <_strtoul_l.constprop.0+0xcc>
 800435e:	4240      	negs	r0, r0
 8004360:	2a00      	cmp	r2, #0
 8004362:	d0f9      	beq.n	8004358 <_strtoul_l.constprop.0+0xc4>
 8004364:	b106      	cbz	r6, 8004368 <_strtoul_l.constprop.0+0xd4>
 8004366:	1e69      	subs	r1, r5, #1
 8004368:	6011      	str	r1, [r2, #0]
 800436a:	e7f5      	b.n	8004358 <_strtoul_l.constprop.0+0xc4>
 800436c:	080043fe 	.word	0x080043fe

08004370 <_strtoul_r>:
 8004370:	f7ff bf90 	b.w	8004294 <_strtoul_l.constprop.0>

08004374 <_malloc_usable_size_r>:
 8004374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004378:	1f18      	subs	r0, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfbc      	itt	lt
 800437e:	580b      	ldrlt	r3, [r1, r0]
 8004380:	18c0      	addlt	r0, r0, r3
 8004382:	4770      	bx	lr

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
