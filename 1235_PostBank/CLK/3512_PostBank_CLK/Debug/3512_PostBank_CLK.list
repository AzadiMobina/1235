
3512_PostBank_CLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080062f8  080062f8  000072f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006398  08006398  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  08006398  08006398  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006398  08006398  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080063a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000064  08006404  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006404  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff86  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002864  00000000  00000000  00018013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  0001b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e32  00000000  00000000  0001c44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014637  00000000  00000000  00035281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d64e  00000000  00000000  000498b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045bc  00000000  00000000  000d6f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000db508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080062e0 	.word	0x080062e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080062e0 	.word	0x080062e0

0800014c <Haamin_Remote>:
uint8_t valueNumber = 0;
uint8_t valueFeedback = 0;
uint8_t muteFlag = 1;

void Haamin_Remote(uint16_t action, uint8_t workMode)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	717b      	strb	r3, [r7, #5]
                valuSetting_tmp = valueFeedback;
            }

        }
    #elif  EDARI
        if(workMode == MODE_NORMAL)
 800015c:	797b      	ldrb	r3, [r7, #5]
 800015e:	2b52      	cmp	r3, #82	@ 0x52
 8000160:	d177      	bne.n	8000252 <Haamin_Remote+0x106>
        {
            if(action == INFO)
 8000162:	88fb      	ldrh	r3, [r7, #6]
 8000164:	f240 1255 	movw	r2, #341	@ 0x155
 8000168:	4293      	cmp	r3, r2
 800016a:	d10a      	bne.n	8000182 <Haamin_Remote+0x36>
            {
                work_Mode = TIME_SETTING;
 800016c:	4b87      	ldr	r3, [pc, #540]	@ (800038c <Haamin_Remote+0x240>)
 800016e:	2254      	movs	r2, #84	@ 0x54
 8000170:	701a      	strb	r2, [r3, #0]
                time_Mode = SET_HOUR;
 8000172:	4b87      	ldr	r3, [pc, #540]	@ (8000390 <Haamin_Remote+0x244>)
 8000174:	2248      	movs	r2, #72	@ 0x48
 8000176:	701a      	strb	r2, [r3, #0]
                timeValue = time_Hour;
 8000178:	4b86      	ldr	r3, [pc, #536]	@ (8000394 <Haamin_Remote+0x248>)
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	4b86      	ldr	r3, [pc, #536]	@ (8000398 <Haamin_Remote+0x24c>)
 800017e:	701a      	strb	r2, [r3, #0]
 8000180:	e063      	b.n	800024a <Haamin_Remote+0xfe>
            }
            else if(action == MENU_KEY)
 8000182:	88fb      	ldrh	r3, [r7, #6]
 8000184:	f240 1245 	movw	r2, #325	@ 0x145
 8000188:	4293      	cmp	r3, r2
 800018a:	d119      	bne.n	80001c0 <Haamin_Remote+0x74>
            {
                work_Mode = DATE_SETTING;
 800018c:	4b7f      	ldr	r3, [pc, #508]	@ (800038c <Haamin_Remote+0x240>)
 800018e:	2244      	movs	r2, #68	@ 0x44
 8000190:	701a      	strb	r2, [r3, #0]
                date_Mode = SET_YEAR;
 8000192:	4b82      	ldr	r3, [pc, #520]	@ (800039c <Haamin_Remote+0x250>)
 8000194:	2259      	movs	r2, #89	@ 0x59
 8000196:	701a      	strb	r2, [r3, #0]
                dateValue = pdate_Year;
 8000198:	4b81      	ldr	r3, [pc, #516]	@ (80003a0 <Haamin_Remote+0x254>)
 800019a:	881b      	ldrh	r3, [r3, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4b81      	ldr	r3, [pc, #516]	@ (80003a4 <Haamin_Remote+0x258>)
 80001a0:	701a      	strb	r2, [r3, #0]
                dateMounth_t = pdate_Mounth;
 80001a2:	4b81      	ldr	r3, [pc, #516]	@ (80003a8 <Haamin_Remote+0x25c>)
 80001a4:	881b      	ldrh	r3, [r3, #0]
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b80      	ldr	r3, [pc, #512]	@ (80003ac <Haamin_Remote+0x260>)
 80001aa:	701a      	strb	r2, [r3, #0]
                dateDay_t = pdate_Day;
 80001ac:	4b80      	ldr	r3, [pc, #512]	@ (80003b0 <Haamin_Remote+0x264>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4b80      	ldr	r3, [pc, #512]	@ (80003b4 <Haamin_Remote+0x268>)
 80001b4:	701a      	strb	r2, [r3, #0]
                dateWeek_t = date_Week;
 80001b6:	4b80      	ldr	r3, [pc, #512]	@ (80003b8 <Haamin_Remote+0x26c>)
 80001b8:	781a      	ldrb	r2, [r3, #0]
 80001ba:	4b80      	ldr	r3, [pc, #512]	@ (80003bc <Haamin_Remote+0x270>)
 80001bc:	701a      	strb	r2, [r3, #0]
 80001be:	e044      	b.n	800024a <Haamin_Remote+0xfe>
            }
            else if(action == MUTE)
 80001c0:	88fb      	ldrh	r3, [r7, #6]
 80001c2:	f240 1219 	movw	r2, #281	@ 0x119
 80001c6:	4293      	cmp	r3, r2
 80001c8:	d10b      	bne.n	80001e2 <Haamin_Remote+0x96>
            {
                if(muteFlag)
 80001ca:	4b7d      	ldr	r3, [pc, #500]	@ (80003c0 <Haamin_Remote+0x274>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d003      	beq.n	80001da <Haamin_Remote+0x8e>
                    muteFlag = 0;
 80001d2:	4b7b      	ldr	r3, [pc, #492]	@ (80003c0 <Haamin_Remote+0x274>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
 80001d8:	e037      	b.n	800024a <Haamin_Remote+0xfe>
                else
                    muteFlag = 1;
 80001da:	4b79      	ldr	r3, [pc, #484]	@ (80003c0 <Haamin_Remote+0x274>)
 80001dc:	2201      	movs	r2, #1
 80001de:	701a      	strb	r2, [r3, #0]
 80001e0:	e033      	b.n	800024a <Haamin_Remote+0xfe>
            }
            // else if(action == ON_OFF)
            // {
            //     work_Mode = MODE_OFF;
            // }
            else if(action == PgDn)
 80001e2:	88fb      	ldrh	r3, [r7, #6]
 80001e4:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80001e8:	d125      	bne.n	8000236 <Haamin_Remote+0xea>
            {
                if(tmpShow == 0)
 80001ea:	4b76      	ldr	r3, [pc, #472]	@ (80003c4 <Haamin_Remote+0x278>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d112      	bne.n	8000218 <Haamin_Remote+0xcc>
                {
                    tmpShow = 1;
 80001f2:	4b74      	ldr	r3, [pc, #464]	@ (80003c4 <Haamin_Remote+0x278>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	701a      	strb	r2, [r3, #0]
                    time_TmpShow = 0;
 80001f8:	4b73      	ldr	r3, [pc, #460]	@ (80003c8 <Haamin_Remote+0x27c>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
                    time_DateShow = 0;
 80001fe:	4b73      	ldr	r3, [pc, #460]	@ (80003cc <Haamin_Remote+0x280>)
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
                    Buzz(50);
 8000204:	2032      	movs	r0, #50	@ 0x32
 8000206:	f000 fb97 	bl	8000938 <Buzz>
                    HAL_Delay(50);
 800020a:	2032      	movs	r0, #50	@ 0x32
 800020c:	f002 fe34 	bl	8002e78 <HAL_Delay>
                    Buzz(50);
 8000210:	2032      	movs	r0, #50	@ 0x32
 8000212:	f000 fb91 	bl	8000938 <Buzz>
 8000216:	e018      	b.n	800024a <Haamin_Remote+0xfe>
                }
                else 
                {
                    if(time_TmpShow < 5)
 8000218:	4b6b      	ldr	r3, [pc, #428]	@ (80003c8 <Haamin_Remote+0x27c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b04      	cmp	r3, #4
 800021e:	d803      	bhi.n	8000228 <Haamin_Remote+0xdc>
                        tmpShow = 0;
 8000220:	4b68      	ldr	r3, [pc, #416]	@ (80003c4 <Haamin_Remote+0x278>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
 8000226:	e010      	b.n	800024a <Haamin_Remote+0xfe>
                    else
                    {
                        time_TmpShow = 0;
 8000228:	4b67      	ldr	r3, [pc, #412]	@ (80003c8 <Haamin_Remote+0x27c>)
 800022a:	2200      	movs	r2, #0
 800022c:	701a      	strb	r2, [r3, #0]
                        time_DateShow = 0;
 800022e:	4b67      	ldr	r3, [pc, #412]	@ (80003cc <Haamin_Remote+0x280>)
 8000230:	2200      	movs	r2, #0
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	e009      	b.n	800024a <Haamin_Remote+0xfe>
                    }
                }
            }
            else if(action == PgUp)
 8000236:	88fb      	ldrh	r3, [r7, #6]
 8000238:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800023c:	d105      	bne.n	800024a <Haamin_Remote+0xfe>
            {
                time_TmpShow = 10;
 800023e:	4b62      	ldr	r3, [pc, #392]	@ (80003c8 <Haamin_Remote+0x27c>)
 8000240:	220a      	movs	r2, #10
 8000242:	701a      	strb	r2, [r3, #0]
                time_DateShow = 10;
 8000244:	4b61      	ldr	r3, [pc, #388]	@ (80003cc <Haamin_Remote+0x280>)
 8000246:	220a      	movs	r2, #10
 8000248:	701a      	strb	r2, [r3, #0]
            }
            Buzz(100);
 800024a:	2064      	movs	r0, #100	@ 0x64
 800024c:	f000 fb74 	bl	8000938 <Buzz>
                }
            }           
            Buzz(100);
        }   
    #endif
}
 8000250:	e2eb      	b.n	800082a <Haamin_Remote+0x6de>
        else if(workMode == MODE_OFF)
 8000252:	797b      	ldrb	r3, [r7, #5]
 8000254:	2b46      	cmp	r3, #70	@ 0x46
 8000256:	d10b      	bne.n	8000270 <Haamin_Remote+0x124>
            if(action == ON_OFF)
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	f240 1259 	movw	r2, #345	@ 0x159
 800025e:	4293      	cmp	r3, r2
 8000260:	d102      	bne.n	8000268 <Haamin_Remote+0x11c>
                work_Mode = MODE_NORMAL;
 8000262:	4b4a      	ldr	r3, [pc, #296]	@ (800038c <Haamin_Remote+0x240>)
 8000264:	2252      	movs	r2, #82	@ 0x52
 8000266:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8000268:	2064      	movs	r0, #100	@ 0x64
 800026a:	f000 fb65 	bl	8000938 <Buzz>
}
 800026e:	e2dc      	b.n	800082a <Haamin_Remote+0x6de>
        else if(workMode == TIME_SETTING)
 8000270:	797b      	ldrb	r3, [r7, #5]
 8000272:	2b54      	cmp	r3, #84	@ 0x54
 8000274:	f040 8111 	bne.w	800049a <Haamin_Remote+0x34e>
            if(action == INCREASE)
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800027e:	d121      	bne.n	80002c4 <Haamin_Remote+0x178>
                if(time_Mode == SET_HOUR)
 8000280:	4b43      	ldr	r3, [pc, #268]	@ (8000390 <Haamin_Remote+0x244>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b48      	cmp	r3, #72	@ 0x48
 8000286:	d10e      	bne.n	80002a6 <Haamin_Remote+0x15a>
                    if(++timeValue > 23)
 8000288:	4b43      	ldr	r3, [pc, #268]	@ (8000398 <Haamin_Remote+0x24c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	b2da      	uxtb	r2, r3
 8000290:	4b41      	ldr	r3, [pc, #260]	@ (8000398 <Haamin_Remote+0x24c>)
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	4b40      	ldr	r3, [pc, #256]	@ (8000398 <Haamin_Remote+0x24c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b17      	cmp	r3, #23
 800029a:	f240 80fa 	bls.w	8000492 <Haamin_Remote+0x346>
                    timeValue = 0;
 800029e:	4b3e      	ldr	r3, [pc, #248]	@ (8000398 <Haamin_Remote+0x24c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	e0f5      	b.n	8000492 <Haamin_Remote+0x346>
                    if(++timeValue > 59)
 80002a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000398 <Haamin_Remote+0x24c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3301      	adds	r3, #1
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000398 <Haamin_Remote+0x24c>)
 80002b0:	701a      	strb	r2, [r3, #0]
 80002b2:	4b39      	ldr	r3, [pc, #228]	@ (8000398 <Haamin_Remote+0x24c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80002b8:	f240 80eb 	bls.w	8000492 <Haamin_Remote+0x346>
                    timeValue = 0;
 80002bc:	4b36      	ldr	r3, [pc, #216]	@ (8000398 <Haamin_Remote+0x24c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e0e6      	b.n	8000492 <Haamin_Remote+0x346>
            else if(action == DECREASE)
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80002ca:	d121      	bne.n	8000310 <Haamin_Remote+0x1c4>
                if(time_Mode == SET_HOUR)
 80002cc:	4b30      	ldr	r3, [pc, #192]	@ (8000390 <Haamin_Remote+0x244>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b48      	cmp	r3, #72	@ 0x48
 80002d2:	d10e      	bne.n	80002f2 <Haamin_Remote+0x1a6>
                    if(timeValue == 0)
 80002d4:	4b30      	ldr	r3, [pc, #192]	@ (8000398 <Haamin_Remote+0x24c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d103      	bne.n	80002e4 <Haamin_Remote+0x198>
                    timeValue = 23;
 80002dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000398 <Haamin_Remote+0x24c>)
 80002de:	2217      	movs	r2, #23
 80002e0:	701a      	strb	r2, [r3, #0]
 80002e2:	e0d6      	b.n	8000492 <Haamin_Remote+0x346>
                    timeValue--;
 80002e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000398 <Haamin_Remote+0x24c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000398 <Haamin_Remote+0x24c>)
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e0cf      	b.n	8000492 <Haamin_Remote+0x346>
                    if(timeValue == 0)
 80002f2:	4b29      	ldr	r3, [pc, #164]	@ (8000398 <Haamin_Remote+0x24c>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d103      	bne.n	8000302 <Haamin_Remote+0x1b6>
                    timeValue = 59;
 80002fa:	4b27      	ldr	r3, [pc, #156]	@ (8000398 <Haamin_Remote+0x24c>)
 80002fc:	223b      	movs	r2, #59	@ 0x3b
 80002fe:	701a      	strb	r2, [r3, #0]
 8000300:	e0c7      	b.n	8000492 <Haamin_Remote+0x346>
                    timeValue--;
 8000302:	4b25      	ldr	r3, [pc, #148]	@ (8000398 <Haamin_Remote+0x24c>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4b23      	ldr	r3, [pc, #140]	@ (8000398 <Haamin_Remote+0x24c>)
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	e0c0      	b.n	8000492 <Haamin_Remote+0x346>
            else if(action == EXIT_KEY)
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	f240 1205 	movw	r2, #261	@ 0x105
 8000316:	4293      	cmp	r3, r2
 8000318:	d103      	bne.n	8000322 <Haamin_Remote+0x1d6>
                work_Mode = MODE_NORMAL;
 800031a:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <Haamin_Remote+0x240>)
 800031c:	2252      	movs	r2, #82	@ 0x52
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	e0b7      	b.n	8000492 <Haamin_Remote+0x346>
            else if(action == OK_KEY)
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 8000328:	d15a      	bne.n	80003e0 <Haamin_Remote+0x294>
                if(time_Mode == SET_HOUR)
 800032a:	4b19      	ldr	r3, [pc, #100]	@ (8000390 <Haamin_Remote+0x244>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b48      	cmp	r3, #72	@ 0x48
 8000330:	d10b      	bne.n	800034a <Haamin_Remote+0x1fe>
                    time_Hour_t = timeValue;
 8000332:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <Haamin_Remote+0x24c>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b26      	ldr	r3, [pc, #152]	@ (80003d0 <Haamin_Remote+0x284>)
 8000338:	701a      	strb	r2, [r3, #0]
                    time_Mode = SET_MIN;
 800033a:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <Haamin_Remote+0x244>)
 800033c:	224d      	movs	r2, #77	@ 0x4d
 800033e:	701a      	strb	r2, [r3, #0]
                    timeValue = time_Minute;
 8000340:	4b24      	ldr	r3, [pc, #144]	@ (80003d4 <Haamin_Remote+0x288>)
 8000342:	781a      	ldrb	r2, [r3, #0]
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <Haamin_Remote+0x24c>)
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	e0a3      	b.n	8000492 <Haamin_Remote+0x346>
                else if(time_Mode == SET_MIN)
 800034a:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <Haamin_Remote+0x244>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000350:	f040 809f 	bne.w	8000492 <Haamin_Remote+0x346>
                    time_Minute = timeValue;
 8000354:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <Haamin_Remote+0x24c>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <Haamin_Remote+0x288>)
 800035a:	701a      	strb	r2, [r3, #0]
                    time_Hour = time_Hour_t;
 800035c:	4b1c      	ldr	r3, [pc, #112]	@ (80003d0 <Haamin_Remote+0x284>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <Haamin_Remote+0x248>)
 8000362:	701a      	strb	r2, [r3, #0]
                    time_Second = 0;
 8000364:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <Haamin_Remote+0x28c>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
                    work_Mode = MODE_NORMAL;
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <Haamin_Remote+0x240>)
 800036c:	2252      	movs	r2, #82	@ 0x52
 800036e:	701a      	strb	r2, [r3, #0]
                    DS3231_WriteTime(&hi2c2, time_Hour,time_Minute,0);
 8000370:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <Haamin_Remote+0x248>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4619      	mov	r1, r3
 8000376:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <Haamin_Remote+0x288>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	2300      	movs	r3, #0
 800037e:	4817      	ldr	r0, [pc, #92]	@ (80003dc <Haamin_Remote+0x290>)
 8000380:	f001 fb08 	bl	8001994 <DS3231_WriteTime>
                    HAL_Delay(50);
 8000384:	2032      	movs	r0, #50	@ 0x32
 8000386:	f002 fd77 	bl	8002e78 <HAL_Delay>
 800038a:	e082      	b.n	8000492 <Haamin_Remote+0x346>
 800038c:	20000001 	.word	0x20000001
 8000390:	20000002 	.word	0x20000002
 8000394:	20000130 	.word	0x20000130
 8000398:	20000148 	.word	0x20000148
 800039c:	20000003 	.word	0x20000003
 80003a0:	2000013c 	.word	0x2000013c
 80003a4:	2000014f 	.word	0x2000014f
 80003a8:	2000013e 	.word	0x2000013e
 80003ac:	20000143 	.word	0x20000143
 80003b0:	20000140 	.word	0x20000140
 80003b4:	20000144 	.word	0x20000144
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000145 	.word	0x20000145
 80003c0:	20000000 	.word	0x20000000
 80003c4:	20000005 	.word	0x20000005
 80003c8:	2000014d 	.word	0x2000014d
 80003cc:	2000014e 	.word	0x2000014e
 80003d0:	20000146 	.word	0x20000146
 80003d4:	20000131 	.word	0x20000131
 80003d8:	20000132 	.word	0x20000132
 80003dc:	200000dc 	.word	0x200000dc
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 80003e0:	88fb      	ldrh	r3, [r7, #6]
 80003e2:	f240 120f 	movw	r2, #271	@ 0x10f
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d023      	beq.n	8000432 <Haamin_Remote+0x2e6>
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 80003f0:	d01f      	beq.n	8000432 <Haamin_Remote+0x2e6>
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80003f8:	d01b      	beq.n	8000432 <Haamin_Remote+0x2e6>
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8000400:	d017      	beq.n	8000432 <Haamin_Remote+0x2e6>
 8000402:	88fb      	ldrh	r3, [r7, #6]
 8000404:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8000408:	d013      	beq.n	8000432 <Haamin_Remote+0x2e6>
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8000410:	d00f      	beq.n	8000432 <Haamin_Remote+0x2e6>
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8000418:	d00b      	beq.n	8000432 <Haamin_Remote+0x2e6>
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 8000420:	d007      	beq.n	8000432 <Haamin_Remote+0x2e6>
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8000428:	d003      	beq.n	8000432 <Haamin_Remote+0x2e6>
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8000430:	d12f      	bne.n	8000492 <Haamin_Remote+0x346>
                valueFeedback = Haamin_NumberKey(action);
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fa21 	bl	800087c <Haamin_NumberKey>
 800043a:	4603      	mov	r3, r0
 800043c:	461a      	mov	r2, r3
 800043e:	4b85      	ldr	r3, [pc, #532]	@ (8000654 <Haamin_Remote+0x508>)
 8000440:	701a      	strb	r2, [r3, #0]
                timeValue = ((valuSetting_tmp * 10) + valueFeedback);
 8000442:	4b85      	ldr	r3, [pc, #532]	@ (8000658 <Haamin_Remote+0x50c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	0092      	lsls	r2, r2, #2
 800044a:	4413      	add	r3, r2
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b80      	ldr	r3, [pc, #512]	@ (8000654 <Haamin_Remote+0x508>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4413      	add	r3, r2
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b80      	ldr	r3, [pc, #512]	@ (800065c <Haamin_Remote+0x510>)
 800045a:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback;
 800045c:	4b7d      	ldr	r3, [pc, #500]	@ (8000654 <Haamin_Remote+0x508>)
 800045e:	781a      	ldrb	r2, [r3, #0]
 8000460:	4b7d      	ldr	r3, [pc, #500]	@ (8000658 <Haamin_Remote+0x50c>)
 8000462:	701a      	strb	r2, [r3, #0]
                if(time_Mode == SET_HOUR) {  
 8000464:	4b7e      	ldr	r3, [pc, #504]	@ (8000660 <Haamin_Remote+0x514>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b48      	cmp	r3, #72	@ 0x48
 800046a:	d107      	bne.n	800047c <Haamin_Remote+0x330>
                  if(timeValue > 23) timeValue = 23;}
 800046c:	4b7b      	ldr	r3, [pc, #492]	@ (800065c <Haamin_Remote+0x510>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b17      	cmp	r3, #23
 8000472:	d90e      	bls.n	8000492 <Haamin_Remote+0x346>
 8000474:	4b79      	ldr	r3, [pc, #484]	@ (800065c <Haamin_Remote+0x510>)
 8000476:	2217      	movs	r2, #23
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e00a      	b.n	8000492 <Haamin_Remote+0x346>
                else if(time_Mode == SET_MIN){
 800047c:	4b78      	ldr	r3, [pc, #480]	@ (8000660 <Haamin_Remote+0x514>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b4d      	cmp	r3, #77	@ 0x4d
 8000482:	d106      	bne.n	8000492 <Haamin_Remote+0x346>
                  if(timeValue > 59) timeValue = 59;} 
 8000484:	4b75      	ldr	r3, [pc, #468]	@ (800065c <Haamin_Remote+0x510>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b3b      	cmp	r3, #59	@ 0x3b
 800048a:	d902      	bls.n	8000492 <Haamin_Remote+0x346>
 800048c:	4b73      	ldr	r3, [pc, #460]	@ (800065c <Haamin_Remote+0x510>)
 800048e:	223b      	movs	r2, #59	@ 0x3b
 8000490:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8000492:	2064      	movs	r0, #100	@ 0x64
 8000494:	f000 fa50 	bl	8000938 <Buzz>
}
 8000498:	e1c7      	b.n	800082a <Haamin_Remote+0x6de>
        else if(workMode == DATE_SETTING)
 800049a:	797b      	ldrb	r3, [r7, #5]
 800049c:	2b44      	cmp	r3, #68	@ 0x44
 800049e:	f040 81c4 	bne.w	800082a <Haamin_Remote+0x6de>
            if(action == INCREASE)
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80004a8:	d14c      	bne.n	8000544 <Haamin_Remote+0x3f8>
                if(date_Mode == SET_YEAR)
 80004aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000664 <Haamin_Remote+0x518>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b59      	cmp	r3, #89	@ 0x59
 80004b0:	d10e      	bne.n	80004d0 <Haamin_Remote+0x384>
                    if(++dateValue > 99)
 80004b2:	4b6d      	ldr	r3, [pc, #436]	@ (8000668 <Haamin_Remote+0x51c>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	3301      	adds	r3, #1
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b6b      	ldr	r3, [pc, #428]	@ (8000668 <Haamin_Remote+0x51c>)
 80004bc:	701a      	strb	r2, [r3, #0]
 80004be:	4b6a      	ldr	r3, [pc, #424]	@ (8000668 <Haamin_Remote+0x51c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b63      	cmp	r3, #99	@ 0x63
 80004c4:	f240 81ae 	bls.w	8000824 <Haamin_Remote+0x6d8>
                        dateValue = 0;
 80004c8:	4b67      	ldr	r3, [pc, #412]	@ (8000668 <Haamin_Remote+0x51c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	e1a9      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_MOTH)
 80004d0:	4b64      	ldr	r3, [pc, #400]	@ (8000664 <Haamin_Remote+0x518>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b74      	cmp	r3, #116	@ 0x74
 80004d6:	d10e      	bne.n	80004f6 <Haamin_Remote+0x3aa>
                    if(++dateValue > 12)
 80004d8:	4b63      	ldr	r3, [pc, #396]	@ (8000668 <Haamin_Remote+0x51c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b61      	ldr	r3, [pc, #388]	@ (8000668 <Haamin_Remote+0x51c>)
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	4b60      	ldr	r3, [pc, #384]	@ (8000668 <Haamin_Remote+0x51c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b0c      	cmp	r3, #12
 80004ea:	f240 819b 	bls.w	8000824 <Haamin_Remote+0x6d8>
                        dateValue = 1;
 80004ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000668 <Haamin_Remote+0x51c>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	e196      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DAY)
 80004f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000664 <Haamin_Remote+0x518>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b41      	cmp	r3, #65	@ 0x41
 80004fc:	d10e      	bne.n	800051c <Haamin_Remote+0x3d0>
                    if(++dateValue > 31)
 80004fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000668 <Haamin_Remote+0x51c>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b58      	ldr	r3, [pc, #352]	@ (8000668 <Haamin_Remote+0x51c>)
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	4b57      	ldr	r3, [pc, #348]	@ (8000668 <Haamin_Remote+0x51c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b1f      	cmp	r3, #31
 8000510:	f240 8188 	bls.w	8000824 <Haamin_Remote+0x6d8>
                        dateValue = 1;
 8000514:	4b54      	ldr	r3, [pc, #336]	@ (8000668 <Haamin_Remote+0x51c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e183      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DOW)
 800051c:	4b51      	ldr	r3, [pc, #324]	@ (8000664 <Haamin_Remote+0x518>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b42      	cmp	r3, #66	@ 0x42
 8000522:	f040 817f 	bne.w	8000824 <Haamin_Remote+0x6d8>
                    if(++dateValue > 7)
 8000526:	4b50      	ldr	r3, [pc, #320]	@ (8000668 <Haamin_Remote+0x51c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b4e      	ldr	r3, [pc, #312]	@ (8000668 <Haamin_Remote+0x51c>)
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	4b4d      	ldr	r3, [pc, #308]	@ (8000668 <Haamin_Remote+0x51c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b07      	cmp	r3, #7
 8000538:	f240 8174 	bls.w	8000824 <Haamin_Remote+0x6d8>
                        dateValue = 1;
 800053c:	4b4a      	ldr	r3, [pc, #296]	@ (8000668 <Haamin_Remote+0x51c>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e16f      	b.n	8000824 <Haamin_Remote+0x6d8>
            else if(action == DECREASE)
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800054a:	d14c      	bne.n	80005e6 <Haamin_Remote+0x49a>
                if(date_Mode == SET_YEAR)
 800054c:	4b45      	ldr	r3, [pc, #276]	@ (8000664 <Haamin_Remote+0x518>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b59      	cmp	r3, #89	@ 0x59
 8000552:	d10e      	bne.n	8000572 <Haamin_Remote+0x426>
                    if(dateValue == 0)
 8000554:	4b44      	ldr	r3, [pc, #272]	@ (8000668 <Haamin_Remote+0x51c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d103      	bne.n	8000564 <Haamin_Remote+0x418>
                        dateValue = 99;
 800055c:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <Haamin_Remote+0x51c>)
 800055e:	2263      	movs	r2, #99	@ 0x63
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e15f      	b.n	8000824 <Haamin_Remote+0x6d8>
                        dateValue--;
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <Haamin_Remote+0x51c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <Haamin_Remote+0x51c>)
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e158      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_MOTH)
 8000572:	4b3c      	ldr	r3, [pc, #240]	@ (8000664 <Haamin_Remote+0x518>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b74      	cmp	r3, #116	@ 0x74
 8000578:	d10e      	bne.n	8000598 <Haamin_Remote+0x44c>
                    if(dateValue == 1)
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <Haamin_Remote+0x51c>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d103      	bne.n	800058a <Haamin_Remote+0x43e>
                        dateValue = 12;
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <Haamin_Remote+0x51c>)
 8000584:	220c      	movs	r2, #12
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e14c      	b.n	8000824 <Haamin_Remote+0x6d8>
                        dateValue--;
 800058a:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <Haamin_Remote+0x51c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	3b01      	subs	r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b35      	ldr	r3, [pc, #212]	@ (8000668 <Haamin_Remote+0x51c>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e145      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DAY)
 8000598:	4b32      	ldr	r3, [pc, #200]	@ (8000664 <Haamin_Remote+0x518>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b41      	cmp	r3, #65	@ 0x41
 800059e:	d10e      	bne.n	80005be <Haamin_Remote+0x472>
                    if(dateValue == 1)
 80005a0:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <Haamin_Remote+0x51c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <Haamin_Remote+0x464>
                        dateValue = 31;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <Haamin_Remote+0x51c>)
 80005aa:	221f      	movs	r2, #31
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e139      	b.n	8000824 <Haamin_Remote+0x6d8>
                        dateValue--;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <Haamin_Remote+0x51c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <Haamin_Remote+0x51c>)
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e132      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DOW)
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <Haamin_Remote+0x518>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b42      	cmp	r3, #66	@ 0x42
 80005c4:	f040 812e 	bne.w	8000824 <Haamin_Remote+0x6d8>
                    if(dateValue == 1)
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <Haamin_Remote+0x51c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d103      	bne.n	80005d8 <Haamin_Remote+0x48c>
                        dateValue = 7;
 80005d0:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <Haamin_Remote+0x51c>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e125      	b.n	8000824 <Haamin_Remote+0x6d8>
                        dateValue--;
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <Haamin_Remote+0x51c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <Haamin_Remote+0x51c>)
 80005e2:	701a      	strb	r2, [r3, #0]
 80005e4:	e11e      	b.n	8000824 <Haamin_Remote+0x6d8>
            else if(action == MUTE)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f240 1219 	movw	r2, #281	@ 0x119
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d10b      	bne.n	8000608 <Haamin_Remote+0x4bc>
                if(muteFlag)
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <Haamin_Remote+0x520>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <Haamin_Remote+0x4b4>
                    muteFlag = 0;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <Haamin_Remote+0x520>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
 80005fe:	e111      	b.n	8000824 <Haamin_Remote+0x6d8>
                    muteFlag = 1;
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <Haamin_Remote+0x520>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e10d      	b.n	8000824 <Haamin_Remote+0x6d8>
            else if (action == OK_KEY)
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	f5b3 7f8d 	cmp.w	r3, #282	@ 0x11a
 800060e:	f040 8087 	bne.w	8000720 <Haamin_Remote+0x5d4>
                if(date_Mode == SET_YEAR)
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <Haamin_Remote+0x518>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b59      	cmp	r3, #89	@ 0x59
 8000618:	d10b      	bne.n	8000632 <Haamin_Remote+0x4e6>
                    dateYear_t = dateValue;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <Haamin_Remote+0x51c>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <Haamin_Remote+0x524>)
 8000620:	701a      	strb	r2, [r3, #0]
                    date_Mode = SET_MOTH;
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <Haamin_Remote+0x518>)
 8000624:	2274      	movs	r2, #116	@ 0x74
 8000626:	701a      	strb	r2, [r3, #0]
                    dateValue = dateMounth_t;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <Haamin_Remote+0x528>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <Haamin_Remote+0x51c>)
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e0f8      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_MOTH)
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <Haamin_Remote+0x518>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b74      	cmp	r3, #116	@ 0x74
 8000638:	d120      	bne.n	800067c <Haamin_Remote+0x530>
                    dateMounth_t = dateValue;
 800063a:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <Haamin_Remote+0x51c>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <Haamin_Remote+0x528>)
 8000640:	701a      	strb	r2, [r3, #0]
                    date_Mode = SET_DAY;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <Haamin_Remote+0x518>)
 8000644:	2241      	movs	r2, #65	@ 0x41
 8000646:	701a      	strb	r2, [r3, #0]
                    dateValue = dateDay_t;
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <Haamin_Remote+0x52c>)
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <Haamin_Remote+0x51c>)
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e0e8      	b.n	8000824 <Haamin_Remote+0x6d8>
 8000652:	bf00      	nop
 8000654:	20000082 	.word	0x20000082
 8000658:	20000080 	.word	0x20000080
 800065c:	20000148 	.word	0x20000148
 8000660:	20000002 	.word	0x20000002
 8000664:	20000003 	.word	0x20000003
 8000668:	2000014f 	.word	0x2000014f
 800066c:	20000000 	.word	0x20000000
 8000670:	20000142 	.word	0x20000142
 8000674:	20000143 	.word	0x20000143
 8000678:	20000144 	.word	0x20000144
                else if(date_Mode == SET_DAY)
 800067c:	4b6d      	ldr	r3, [pc, #436]	@ (8000834 <Haamin_Remote+0x6e8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b41      	cmp	r3, #65	@ 0x41
 8000682:	f040 80cf 	bne.w	8000824 <Haamin_Remote+0x6d8>
                    dateDay_t = dateValue;
 8000686:	4b6c      	ldr	r3, [pc, #432]	@ (8000838 <Haamin_Remote+0x6ec>)
 8000688:	781a      	ldrb	r2, [r3, #0]
 800068a:	4b6c      	ldr	r3, [pc, #432]	@ (800083c <Haamin_Remote+0x6f0>)
 800068c:	701a      	strb	r2, [r3, #0]
                    pdate_Day = dateDay_t;
 800068e:	4b6b      	ldr	r3, [pc, #428]	@ (800083c <Haamin_Remote+0x6f0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b6a      	ldr	r3, [pc, #424]	@ (8000840 <Haamin_Remote+0x6f4>)
 8000696:	801a      	strh	r2, [r3, #0]
                    pdate_Mounth = dateMounth_t;
 8000698:	4b6a      	ldr	r3, [pc, #424]	@ (8000844 <Haamin_Remote+0x6f8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b6a      	ldr	r3, [pc, #424]	@ (8000848 <Haamin_Remote+0x6fc>)
 80006a0:	801a      	strh	r2, [r3, #0]
                    pdate_Year = dateYear_t;
 80006a2:	4b6a      	ldr	r3, [pc, #424]	@ (800084c <Haamin_Remote+0x700>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b69      	ldr	r3, [pc, #420]	@ (8000850 <Haamin_Remote+0x704>)
 80006aa:	801a      	strh	r2, [r3, #0]
                    jalali_to_gregorian((1400+pdate_Year),pdate_Mounth,pdate_Day,miladi_Calender);
 80006ac:	4b68      	ldr	r3, [pc, #416]	@ (8000850 <Haamin_Remote+0x704>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	f503 60af 	add.w	r0, r3, #1400	@ 0x578
 80006b4:	4b64      	ldr	r3, [pc, #400]	@ (8000848 <Haamin_Remote+0x6fc>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b61      	ldr	r3, [pc, #388]	@ (8000840 <Haamin_Remote+0x6f4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b64      	ldr	r3, [pc, #400]	@ (8000854 <Haamin_Remote+0x708>)
 80006c2:	f001 fb43 	bl	8001d4c <jalali_to_gregorian>
                    gdate_Year = (uint16_t)miladi_Calender[0];
 80006c6:	4b63      	ldr	r3, [pc, #396]	@ (8000854 <Haamin_Remote+0x708>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b62      	ldr	r3, [pc, #392]	@ (8000858 <Haamin_Remote+0x70c>)
 80006ce:	801a      	strh	r2, [r3, #0]
                    gdate_Year = gdate_Year - 2000;
 80006d0:	4b61      	ldr	r3, [pc, #388]	@ (8000858 <Haamin_Remote+0x70c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b5f      	ldr	r3, [pc, #380]	@ (8000858 <Haamin_Remote+0x70c>)
 80006dc:	801a      	strh	r2, [r3, #0]
                    gdate_Mounth = (uint16_t)miladi_Calender[1];
 80006de:	4b5d      	ldr	r3, [pc, #372]	@ (8000854 <Haamin_Remote+0x708>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b5d      	ldr	r3, [pc, #372]	@ (800085c <Haamin_Remote+0x710>)
 80006e6:	801a      	strh	r2, [r3, #0]
                    gdate_Day = (uint16_t)miladi_Calender[2];
 80006e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000854 <Haamin_Remote+0x708>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <Haamin_Remote+0x714>)
 80006f0:	801a      	strh	r2, [r3, #0]
                    DS3231_WriteCalendar(&hi2c2,gdate_Year,gdate_Mounth,gdate_Day,date_Week);
 80006f2:	4b59      	ldr	r3, [pc, #356]	@ (8000858 <Haamin_Remote+0x70c>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4b58      	ldr	r3, [pc, #352]	@ (800085c <Haamin_Remote+0x710>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <Haamin_Remote+0x714>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	4b57      	ldr	r3, [pc, #348]	@ (8000864 <Haamin_Remote+0x718>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	4603      	mov	r3, r0
 800070c:	4856      	ldr	r0, [pc, #344]	@ (8000868 <Haamin_Remote+0x71c>)
 800070e:	f001 f9a3 	bl	8001a58 <DS3231_WriteCalendar>
                    work_Mode = MODE_NORMAL;
 8000712:	4b56      	ldr	r3, [pc, #344]	@ (800086c <Haamin_Remote+0x720>)
 8000714:	2252      	movs	r2, #82	@ 0x52
 8000716:	701a      	strb	r2, [r3, #0]
                    send_Flag = 1;
 8000718:	4b55      	ldr	r3, [pc, #340]	@ (8000870 <Haamin_Remote+0x724>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e081      	b.n	8000824 <Haamin_Remote+0x6d8>
            else if (action == EXIT_KEY)
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	f240 1205 	movw	r2, #261	@ 0x105
 8000726:	4293      	cmp	r3, r2
 8000728:	d109      	bne.n	800073e <Haamin_Remote+0x5f2>
                work_Mode = MODE_NORMAL;
 800072a:	4b50      	ldr	r3, [pc, #320]	@ (800086c <Haamin_Remote+0x720>)
 800072c:	2252      	movs	r2, #82	@ 0x52
 800072e:	701a      	strb	r2, [r3, #0]
                Buzz(50);
 8000730:	2032      	movs	r0, #50	@ 0x32
 8000732:	f000 f901 	bl	8000938 <Buzz>
                HAL_Delay(50);
 8000736:	2032      	movs	r0, #50	@ 0x32
 8000738:	f002 fb9e 	bl	8002e78 <HAL_Delay>
 800073c:	e072      	b.n	8000824 <Haamin_Remote+0x6d8>
            else if((action == KEY_0 ) || (action == KEY_1) || (action == KEY_2) || (action == KEY_3) || (action == KEY_4) || (action == KEY_5) || (action == KEY_6) || (action == KEY_7) || (action == KEY_8) || (action == KEY_9))
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	f240 120f 	movw	r2, #271	@ 0x10f
 8000744:	4293      	cmp	r3, r2
 8000746:	d023      	beq.n	8000790 <Haamin_Remote+0x644>
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 800074e:	d01f      	beq.n	8000790 <Haamin_Remote+0x644>
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 8000756:	d01b      	beq.n	8000790 <Haamin_Remote+0x644>
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800075e:	d017      	beq.n	8000790 <Haamin_Remote+0x644>
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 8000766:	d013      	beq.n	8000790 <Haamin_Remote+0x644>
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800076e:	d00f      	beq.n	8000790 <Haamin_Remote+0x644>
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8000776:	d00b      	beq.n	8000790 <Haamin_Remote+0x644>
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 800077e:	d007      	beq.n	8000790 <Haamin_Remote+0x644>
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8000786:	d003      	beq.n	8000790 <Haamin_Remote+0x644>
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800078e:	d149      	bne.n	8000824 <Haamin_Remote+0x6d8>
                valueFeedback = Haamin_NumberKey(action);
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f872 	bl	800087c <Haamin_NumberKey>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b35      	ldr	r3, [pc, #212]	@ (8000874 <Haamin_Remote+0x728>)
 800079e:	701a      	strb	r2, [r3, #0]
                dateValue = ((valuSetting_tmp * 10) + valueFeedback);
 80007a0:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <Haamin_Remote+0x72c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b31      	ldr	r3, [pc, #196]	@ (8000874 <Haamin_Remote+0x728>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007b8:	701a      	strb	r2, [r3, #0]
                valuSetting_tmp = valueFeedback;
 80007ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000874 <Haamin_Remote+0x728>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <Haamin_Remote+0x72c>)
 80007c0:	701a      	strb	r2, [r3, #0]
                if(date_Mode == SET_MOTH) {  
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <Haamin_Remote+0x6e8>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b74      	cmp	r3, #116	@ 0x74
 80007c8:	d10e      	bne.n	80007e8 <Haamin_Remote+0x69c>
                  if(dateValue > 12) dateValue = 12;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b0c      	cmp	r3, #12
 80007d0:	d902      	bls.n	80007d8 <Haamin_Remote+0x68c>
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007d4:	220c      	movs	r2, #12
 80007d6:	701a      	strb	r2, [r3, #0]
                  if(dateValue < 1) dateValue = 1;}
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d121      	bne.n	8000824 <Haamin_Remote+0x6d8>
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e01d      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DAY){
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <Haamin_Remote+0x6e8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b41      	cmp	r3, #65	@ 0x41
 80007ee:	d10e      	bne.n	800080e <Haamin_Remote+0x6c2>
                  if(dateValue > 31) dateValue = 31;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b1f      	cmp	r3, #31
 80007f6:	d902      	bls.n	80007fe <Haamin_Remote+0x6b2>
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <Haamin_Remote+0x6ec>)
 80007fa:	221f      	movs	r2, #31
 80007fc:	701a      	strb	r2, [r3, #0]
                  if(dateValue < 1) dateValue = 1;} 
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <Haamin_Remote+0x6ec>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10e      	bne.n	8000824 <Haamin_Remote+0x6d8>
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <Haamin_Remote+0x6ec>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	e00a      	b.n	8000824 <Haamin_Remote+0x6d8>
                else if(date_Mode == SET_DOW){
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <Haamin_Remote+0x6e8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b42      	cmp	r3, #66	@ 0x42
 8000814:	d106      	bne.n	8000824 <Haamin_Remote+0x6d8>
                    if(dateValue > 8) dateValue = 7;}
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <Haamin_Remote+0x6ec>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b08      	cmp	r3, #8
 800081c:	d902      	bls.n	8000824 <Haamin_Remote+0x6d8>
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <Haamin_Remote+0x6ec>)
 8000820:	2207      	movs	r2, #7
 8000822:	701a      	strb	r2, [r3, #0]
            Buzz(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f000 f887 	bl	8000938 <Buzz>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000003 	.word	0x20000003
 8000838:	2000014f 	.word	0x2000014f
 800083c:	20000144 	.word	0x20000144
 8000840:	20000140 	.word	0x20000140
 8000844:	20000143 	.word	0x20000143
 8000848:	2000013e 	.word	0x2000013e
 800084c:	20000142 	.word	0x20000142
 8000850:	2000013c 	.word	0x2000013c
 8000854:	2000015c 	.word	0x2000015c
 8000858:	20000134 	.word	0x20000134
 800085c:	20000136 	.word	0x20000136
 8000860:	20000138 	.word	0x20000138
 8000864:	20000004 	.word	0x20000004
 8000868:	200000dc 	.word	0x200000dc
 800086c:	20000001 	.word	0x20000001
 8000870:	2000014c 	.word	0x2000014c
 8000874:	20000082 	.word	0x20000082
 8000878:	20000080 	.word	0x20000080

0800087c <Haamin_NumberKey>:

uint8_t Haamin_NumberKey (uint16_t numberKey)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
    if(numberKey == KEY_0)
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f240 120f 	movw	r2, #271	@ 0x10f
 800088c:	4293      	cmp	r3, r2
 800088e:	d103      	bne.n	8000898 <Haamin_NumberKey+0x1c>
        valueNumber = 0;
 8000890:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <Haamin_NumberKey+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e046      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_1)
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	f5b3 7fa9 	cmp.w	r3, #338	@ 0x152
 800089e:	d103      	bne.n	80008a8 <Haamin_NumberKey+0x2c>
        valueNumber = 1;
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e03e      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_2)
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	f5b3 7fa8 	cmp.w	r3, #336	@ 0x150
 80008ae:	d103      	bne.n	80008b8 <Haamin_NumberKey+0x3c>
        valueNumber = 2;
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e036      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_3)
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80008be:	d103      	bne.n	80008c8 <Haamin_NumberKey+0x4c>
        valueNumber = 3;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e02e      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_4)
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	f5b3 7fab 	cmp.w	r3, #342	@ 0x156
 80008ce:	d103      	bne.n	80008d8 <Haamin_NumberKey+0x5c>
        valueNumber = 4;
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e026      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_5)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80008de:	d103      	bne.n	80008e8 <Haamin_NumberKey+0x6c>
        valueNumber = 5;
 80008e0:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008e2:	2205      	movs	r2, #5
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e01e      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_6)
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 80008ee:	d103      	bne.n	80008f8 <Haamin_NumberKey+0x7c>
        valueNumber = 6;
 80008f0:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <Haamin_NumberKey+0xb8>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e016      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_7)
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 80008fe:	d103      	bne.n	8000908 <Haamin_NumberKey+0x8c>
        valueNumber = 7;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <Haamin_NumberKey+0xb8>)
 8000902:	2207      	movs	r2, #7
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e00e      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_8)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 800090e:	d103      	bne.n	8000918 <Haamin_NumberKey+0x9c>
        valueNumber = 8;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <Haamin_NumberKey+0xb8>)
 8000912:	2208      	movs	r2, #8
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e006      	b.n	8000926 <Haamin_NumberKey+0xaa>
    else if(numberKey == KEY_9)
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 800091e:	d102      	bne.n	8000926 <Haamin_NumberKey+0xaa>
        valueNumber = 9;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <Haamin_NumberKey+0xb8>)
 8000922:	2209      	movs	r2, #9
 8000924:	701a      	strb	r2, [r3, #0]

    return valueNumber;
 8000926:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <Haamin_NumberKey+0xb8>)
 8000928:	781b      	ldrb	r3, [r3, #0]

}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	20000081 	.word	0x20000081

08000938 <Buzz>:


void Buzz(uint16_t time)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
  if(muteFlag)
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <Buzz+0x38>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00d      	beq.n	8000966 <Buzz+0x2e>
  {
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2120      	movs	r1, #32
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <Buzz+0x3c>)
 8000950:	f002 fd48 	bl	80033e4 <HAL_GPIO_WritePin>
    HAL_Delay(time);
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	4618      	mov	r0, r3
 8000958:	f002 fa8e 	bl	8002e78 <HAL_Delay>
    HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2120      	movs	r1, #32
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <Buzz+0x3c>)
 8000962:	f002 fd3f 	bl	80033e4 <HAL_GPIO_WritePin>
  }
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	40010c00 	.word	0x40010c00

08000978 <IR_SetTimeArrayValues>:
uint8_t ir_DataReady = 0;
uint16_t ir_Data = 0;
uint8_t ir_running = 0;

void IR_SetTimeArrayValues(uint16_t timevalue)// daryaft , zakhire zaman har palse 
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  if (ir_running == 2)
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <IR_SetTimeArrayValues+0x6c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d121      	bne.n	80009ce <IR_SetTimeArrayValues+0x56>
  {
    ir_TimeValue[ir_ArrayIndex] = timevalue;
 800098a:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <IR_SetTimeArrayValues+0x70>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4a16      	ldr	r2, [pc, #88]	@ (80009ec <IR_SetTimeArrayValues+0x74>)
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (++ir_ArrayIndex >= IR_FRAME_SIZE)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <IR_SetTimeArrayValues+0x70>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <IR_SetTimeArrayValues+0x70>)
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <IR_SetTimeArrayValues+0x70>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d917      	bls.n	80009dc <IR_SetTimeArrayValues+0x64>
    {
      ir_ArrayIndex = 0;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <IR_SetTimeArrayValues+0x70>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
      ir_running = 0;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <IR_SetTimeArrayValues+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
      uint8_t res = Ir_AnalyzeTimeArrayValues();
 80009b8:	f000 f81c 	bl	80009f4 <Ir_AnalyzeTimeArrayValues>
 80009bc:	4603      	mov	r3, r0
 80009be:	73fb      	strb	r3, [r7, #15]
      if (res == 13)
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b0d      	cmp	r3, #13
 80009c4:	d10a      	bne.n	80009dc <IR_SetTimeArrayValues+0x64>
      {
        ir_DataReady = 1;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <IR_SetTimeArrayValues+0x78>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
  }
  else if (ir_running == 1)
  {
    ir_running = 2;
  }
}
 80009cc:	e006      	b.n	80009dc <IR_SetTimeArrayValues+0x64>
  else if (ir_running == 1)
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <IR_SetTimeArrayValues+0x6c>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d102      	bne.n	80009dc <IR_SetTimeArrayValues+0x64>
    ir_running = 2;
 80009d6:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <IR_SetTimeArrayValues+0x6c>)
 80009d8:	2202      	movs	r2, #2
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000ca 	.word	0x200000ca
 80009e8:	200000c6 	.word	0x200000c6
 80009ec:	20000084 	.word	0x20000084
 80009f0:	200000c7 	.word	0x200000c7

080009f4 <Ir_AnalyzeTimeArrayValues>:

// NEC IR Data Analysis Function
uint16_t Ir_AnalyzeTimeArrayValues(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0

  uint8_t address = 0, address_inv = 0, command = 0, command_inv = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
 8000a02:	2300      	movs	r3, #0
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	2300      	movs	r3, #0
 8000a08:	713b      	strb	r3, [r7, #4]

  // Validate NEC Frame Start Pulse (9ms + 4.5ms)
  if (ir_TimeValue[0] < 12500 || ir_TimeValue[0] > 14500)
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d905      	bls.n	8000a22 <Ir_AnalyzeTimeArrayValues+0x2e>
 8000a16:	4b3b      	ldr	r3, [pc, #236]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	f643 02a4 	movw	r2, #14500	@ 0x38a4
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d901      	bls.n	8000a26 <Ir_AnalyzeTimeArrayValues+0x32>
  {
    return 1; // Invalid NEC frame
 8000a22:	2301      	movs	r3, #1
 8000a24:	e069      	b.n	8000afa <Ir_AnalyzeTimeArrayValues+0x106>
  }

  // Decode 32-bit NEC frame (Address + Address_inv + Command + Command_inv)
  for (int i = 0; i <= 8; i++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	e04a      	b.n	8000ac2 <Ir_AnalyzeTimeArrayValues+0xce>
  {
    if (ir_TimeValue[i + 1 + 0] > 2000)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a34      	ldr	r2, [pc, #208]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a36:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a3a:	d909      	bls.n	8000a50 <Ir_AnalyzeTimeArrayValues+0x5c>
      address |= (1 << i); // Logical 1 threshold
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	71fb      	strb	r3, [r7, #7]
    if (ir_TimeValue[i + 1 + 8] > 2000)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	3309      	adds	r3, #9
 8000a54:	4a2b      	ldr	r2, [pc, #172]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a5a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a5e:	d909      	bls.n	8000a74 <Ir_AnalyzeTimeArrayValues+0x80>
      address_inv |= (1 << i);
 8000a60:	2201      	movs	r2, #1
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	b25a      	sxtb	r2, r3
 8000a6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	71bb      	strb	r3, [r7, #6]
    if (ir_TimeValue[i + 1 + 16] > 2000)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	3311      	adds	r3, #17
 8000a78:	4a22      	ldr	r2, [pc, #136]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a82:	d909      	bls.n	8000a98 <Ir_AnalyzeTimeArrayValues+0xa4>
      command |= (1 << i);
 8000a84:	2201      	movs	r2, #1
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	717b      	strb	r3, [r7, #5]
    if (ir_TimeValue[i + 1 + 24] > 2000)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	3319      	adds	r3, #25
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <Ir_AnalyzeTimeArrayValues+0x110>)
 8000a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000aa6:	d909      	bls.n	8000abc <Ir_AnalyzeTimeArrayValues+0xc8>
      command_inv |= (1 << i);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	b25a      	sxtb	r2, r3
 8000ab2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	713b      	strb	r3, [r7, #4]
  for (int i = 0; i <= 8; i++)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	ddb1      	ble.n	8000a2c <Ir_AnalyzeTimeArrayValues+0x38>
  }

  // Validate Address and Command Integrity
  if ((address ^ address_inv) == 0xFF && (command ^ command_inv) == 0xFF)
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	4053      	eors	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2bff      	cmp	r3, #255	@ 0xff
 8000ad2:	d111      	bne.n	8000af8 <Ir_AnalyzeTimeArrayValues+0x104>
 8000ad4:	797a      	ldrb	r2, [r7, #5]
 8000ad6:	793b      	ldrb	r3, [r7, #4]
 8000ad8:	4053      	eors	r3, r2
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2bff      	cmp	r3, #255	@ 0xff
 8000ade:	d10b      	bne.n	8000af8 <Ir_AnalyzeTimeArrayValues+0x104>
  {
    // NEC Protocol Successfully Decoded
    ir_Data = (address << 8) + command;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4413      	add	r3, r2
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <Ir_AnalyzeTimeArrayValues+0x114>)
 8000af2:	801a      	strh	r2, [r3, #0]
    return 13;
 8000af4:	230d      	movs	r3, #13
 8000af6:	e000      	b.n	8000afa <Ir_AnalyzeTimeArrayValues+0x106>
  }

  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000084 	.word	0x20000084
 8000b08:	200000c8 	.word	0x200000c8

08000b0c <Ir_GetData>:

uint16_t Ir_GetData(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  if (!ir_DataReady)
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <Ir_GetData+0x24>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <Ir_GetData+0x10>
    return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e004      	b.n	8000b26 <Ir_GetData+0x1a>
  else
  {
    ir_DataReady = 0;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <Ir_GetData+0x24>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
    return ir_Data;
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <Ir_GetData+0x28>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
  }
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000c7 	.word	0x200000c7
 8000b34:	200000c8 	.word	0x200000c8

08000b38 <Ir_ResetRunning>:

void Ir_ResetRunning(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  ir_running = 1;
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <Ir_ResetRunning+0x18>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
  ir_ArrayIndex = 0;
 8000b42:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <Ir_ResetRunning+0x1c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200000ca 	.word	0x200000ca
 8000b54:	200000c6 	.word	0x200000c6

08000b58 <Segments_Scan>:

uint8_t segment_position = 0;
uint8_t segment_value[14] = {0};

void Segments_Scan(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  if(++segment_position > 10)
 8000b5c:	4b50      	ldr	r3, [pc, #320]	@ (8000ca0 <Segments_Scan+0x148>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca0 <Segments_Scan+0x148>)
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca0 <Segments_Scan+0x148>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b0a      	cmp	r3, #10
 8000b6e:	d902      	bls.n	8000b76 <Segments_Scan+0x1e>
    segment_position = 0;
 8000b70:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca0 <Segments_Scan+0x148>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(SEG_H1,LOW);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b7c:	4849      	ldr	r0, [pc, #292]	@ (8000ca4 <Segments_Scan+0x14c>)
 8000b7e:	f002 fc31 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_H2,LOW);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b88:	4847      	ldr	r0, [pc, #284]	@ (8000ca8 <Segments_Scan+0x150>)
 8000b8a:	f002 fc2b 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_M1,LOW);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b94:	4844      	ldr	r0, [pc, #272]	@ (8000ca8 <Segments_Scan+0x150>)
 8000b96:	f002 fc25 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_M2,LOW);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba0:	4841      	ldr	r0, [pc, #260]	@ (8000ca8 <Segments_Scan+0x150>)
 8000ba2:	f002 fc1f 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_S1,LOW);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	483e      	ldr	r0, [pc, #248]	@ (8000ca8 <Segments_Scan+0x150>)
 8000bae:	f002 fc19 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG_S2,LOW);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	483b      	ldr	r0, [pc, #236]	@ (8000ca8 <Segments_Scan+0x150>)
 8000bba:	f002 fc13 	bl	80033e4 <HAL_GPIO_WritePin>

//   HAL_GPIO_WritePin(SEG_DAY,LOW);

  Segment_Map('N');
 8000bbe:	204e      	movs	r0, #78	@ 0x4e
 8000bc0:	f000 f876 	bl	8000cb0 <Segment_Map>

    switch (segment_position)
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <Segments_Scan+0x148>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d839      	bhi.n	8000c40 <Segments_Scan+0xe8>
 8000bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd4 <Segments_Scan+0x7c>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000bfb 	.word	0x08000bfb
 8000bdc:	08000c09 	.word	0x08000c09
 8000be0:	08000c17 	.word	0x08000c17
 8000be4:	08000c25 	.word	0x08000c25
 8000be8:	08000c33 	.word	0x08000c33
    {
    case 0:
        HAL_GPIO_WritePin(SEG_H1,HIGH);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf2:	482c      	ldr	r0, [pc, #176]	@ (8000ca4 <Segments_Scan+0x14c>)
 8000bf4:	f002 fbf6 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000bf8:	e047      	b.n	8000c8a <Segments_Scan+0x132>
    case 1:
        HAL_GPIO_WritePin(SEG_H2,HIGH);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c00:	4829      	ldr	r0, [pc, #164]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c02:	f002 fbef 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000c06:	e040      	b.n	8000c8a <Segments_Scan+0x132>
    case 2:
        HAL_GPIO_WritePin(SEG_M1,HIGH);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0e:	4826      	ldr	r0, [pc, #152]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c10:	f002 fbe8 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000c14:	e039      	b.n	8000c8a <Segments_Scan+0x132>
    case 3:
        HAL_GPIO_WritePin(SEG_M2,HIGH);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c1c:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c1e:	f002 fbe1 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000c22:	e032      	b.n	8000c8a <Segments_Scan+0x132>
    case 4:
        HAL_GPIO_WritePin(SEG_S1,HIGH);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2a:	481f      	ldr	r0, [pc, #124]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c2c:	f002 fbda 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000c30:	e02b      	b.n	8000c8a <Segments_Scan+0x132>
    case 5:
        HAL_GPIO_WritePin(SEG_S2,HIGH);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c38:	481b      	ldr	r0, [pc, #108]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c3a:	f002 fbd3 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000c3e:	e024      	b.n	8000c8a <Segments_Scan+0x132>
    // case 6:
    //     HAL_GPIO_WritePin(SEG_DAY,HIGH);
    //     break;
    default:
        HAL_GPIO_WritePin(SEG_H1,LOW);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c46:	4817      	ldr	r0, [pc, #92]	@ (8000ca4 <Segments_Scan+0x14c>)
 8000c48:	f002 fbcc 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_H2,LOW);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c52:	4815      	ldr	r0, [pc, #84]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c54:	f002 fbc6 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M1,LOW);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5e:	4812      	ldr	r0, [pc, #72]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c60:	f002 fbc0 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_M2,LOW);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6a:	480f      	ldr	r0, [pc, #60]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c6c:	f002 fbba 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S1,LOW);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c78:	f002 fbb4 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SEG_S2,LOW);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c82:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <Segments_Scan+0x150>)
 8000c84:	f002 fbae 	bl	80033e4 <HAL_GPIO_WritePin>
        // HAL_GPIO_WritePin(SEG_DAY,LOW);
        break;
 8000c88:	bf00      	nop
    }
    Segment_Map(segment_value[segment_position]);
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <Segments_Scan+0x148>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <Segments_Scan+0x154>)
 8000c92:	5c9b      	ldrb	r3, [r3, r2]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f80b 	bl	8000cb0 <Segment_Map>

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000cb 	.word	0x200000cb
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	200000cc 	.word	0x200000cc

08000cb0 <Segment_Map>:

void Segment_Map(uint8_t value)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]

    switch (value)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b74      	cmp	r3, #116	@ 0x74
 8000cbe:	f200 84c5 	bhi.w	800164c <Segment_Map+0x99c>
 8000cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc8 <Segment_Map+0x18>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ef1 	.word	0x08000ef1
 8000ccc:	08000f45 	.word	0x08000f45
 8000cd0:	08000f99 	.word	0x08000f99
 8000cd4:	08000fed 	.word	0x08000fed
 8000cd8:	08001041 	.word	0x08001041
 8000cdc:	08001095 	.word	0x08001095
 8000ce0:	080010e9 	.word	0x080010e9
 8000ce4:	0800113d 	.word	0x0800113d
 8000ce8:	08001191 	.word	0x08001191
 8000cec:	080011fd 	.word	0x080011fd
 8000cf0:	0800164d 	.word	0x0800164d
 8000cf4:	0800164d 	.word	0x0800164d
 8000cf8:	0800164d 	.word	0x0800164d
 8000cfc:	0800164d 	.word	0x0800164d
 8000d00:	0800164d 	.word	0x0800164d
 8000d04:	0800164d 	.word	0x0800164d
 8000d08:	0800164d 	.word	0x0800164d
 8000d0c:	0800164d 	.word	0x0800164d
 8000d10:	0800164d 	.word	0x0800164d
 8000d14:	0800164d 	.word	0x0800164d
 8000d18:	0800164d 	.word	0x0800164d
 8000d1c:	0800164d 	.word	0x0800164d
 8000d20:	0800164d 	.word	0x0800164d
 8000d24:	0800164d 	.word	0x0800164d
 8000d28:	0800164d 	.word	0x0800164d
 8000d2c:	0800164d 	.word	0x0800164d
 8000d30:	0800164d 	.word	0x0800164d
 8000d34:	0800164d 	.word	0x0800164d
 8000d38:	0800164d 	.word	0x0800164d
 8000d3c:	0800164d 	.word	0x0800164d
 8000d40:	0800164d 	.word	0x0800164d
 8000d44:	0800164d 	.word	0x0800164d
 8000d48:	0800164d 	.word	0x0800164d
 8000d4c:	0800164d 	.word	0x0800164d
 8000d50:	0800164d 	.word	0x0800164d
 8000d54:	0800164d 	.word	0x0800164d
 8000d58:	0800164d 	.word	0x0800164d
 8000d5c:	0800164d 	.word	0x0800164d
 8000d60:	0800164d 	.word	0x0800164d
 8000d64:	0800164d 	.word	0x0800164d
 8000d68:	0800164d 	.word	0x0800164d
 8000d6c:	0800164d 	.word	0x0800164d
 8000d70:	0800164d 	.word	0x0800164d
 8000d74:	0800164d 	.word	0x0800164d
 8000d78:	0800164d 	.word	0x0800164d
 8000d7c:	0800164d 	.word	0x0800164d
 8000d80:	0800164d 	.word	0x0800164d
 8000d84:	0800164d 	.word	0x0800164d
 8000d88:	0800164d 	.word	0x0800164d
 8000d8c:	0800164d 	.word	0x0800164d
 8000d90:	0800164d 	.word	0x0800164d
 8000d94:	0800164d 	.word	0x0800164d
 8000d98:	0800164d 	.word	0x0800164d
 8000d9c:	0800164d 	.word	0x0800164d
 8000da0:	0800164d 	.word	0x0800164d
 8000da4:	0800164d 	.word	0x0800164d
 8000da8:	0800164d 	.word	0x0800164d
 8000dac:	0800164d 	.word	0x0800164d
 8000db0:	0800164d 	.word	0x0800164d
 8000db4:	0800164d 	.word	0x0800164d
 8000db8:	0800164d 	.word	0x0800164d
 8000dbc:	0800164d 	.word	0x0800164d
 8000dc0:	0800164d 	.word	0x0800164d
 8000dc4:	0800164d 	.word	0x0800164d
 8000dc8:	0800164d 	.word	0x0800164d
 8000dcc:	0800164d 	.word	0x0800164d
 8000dd0:	0800164d 	.word	0x0800164d
 8000dd4:	080012a5 	.word	0x080012a5
 8000dd8:	0800134d 	.word	0x0800134d
 8000ddc:	0800164d 	.word	0x0800164d
 8000de0:	080015f9 	.word	0x080015f9
 8000de4:	0800164d 	.word	0x0800164d
 8000de8:	080015a5 	.word	0x080015a5
 8000dec:	0800164d 	.word	0x0800164d
 8000df0:	0800164d 	.word	0x0800164d
 8000df4:	0800164d 	.word	0x0800164d
 8000df8:	080013a1 	.word	0x080013a1
 8000dfc:	0800149d 	.word	0x0800149d
 8000e00:	08000e9d 	.word	0x08000e9d
 8000e04:	0800164d 	.word	0x0800164d
 8000e08:	0800164d 	.word	0x0800164d
 8000e0c:	0800164d 	.word	0x0800164d
 8000e10:	0800164d 	.word	0x0800164d
 8000e14:	08001449 	.word	0x08001449
 8000e18:	080014f1 	.word	0x080014f1
 8000e1c:	080012f9 	.word	0x080012f9
 8000e20:	0800164d 	.word	0x0800164d
 8000e24:	08001551 	.word	0x08001551
 8000e28:	0800164d 	.word	0x0800164d
 8000e2c:	0800164d 	.word	0x0800164d
 8000e30:	0800164d 	.word	0x0800164d
 8000e34:	0800164d 	.word	0x0800164d
 8000e38:	0800164d 	.word	0x0800164d
 8000e3c:	0800164d 	.word	0x0800164d
 8000e40:	0800164d 	.word	0x0800164d
 8000e44:	0800164d 	.word	0x0800164d
 8000e48:	0800164d 	.word	0x0800164d
 8000e4c:	0800164d 	.word	0x0800164d
 8000e50:	0800164d 	.word	0x0800164d
 8000e54:	0800164d 	.word	0x0800164d
 8000e58:	0800164d 	.word	0x0800164d
 8000e5c:	0800164d 	.word	0x0800164d
 8000e60:	0800164d 	.word	0x0800164d
 8000e64:	0800164d 	.word	0x0800164d
 8000e68:	0800164d 	.word	0x0800164d
 8000e6c:	0800164d 	.word	0x0800164d
 8000e70:	0800164d 	.word	0x0800164d
 8000e74:	0800164d 	.word	0x0800164d
 8000e78:	0800164d 	.word	0x0800164d
 8000e7c:	0800164d 	.word	0x0800164d
 8000e80:	0800164d 	.word	0x0800164d
 8000e84:	08001251 	.word	0x08001251
 8000e88:	0800164d 	.word	0x0800164d
 8000e8c:	0800164d 	.word	0x0800164d
 8000e90:	0800164d 	.word	0x0800164d
 8000e94:	0800164d 	.word	0x0800164d
 8000e98:	080013f5 	.word	0x080013f5
    {
    case 'N':
        HAL_GPIO_WritePin(A,LOW);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea2:	48d3      	ldr	r0, [pc, #844]	@ (80011f0 <Segment_Map+0x540>)
 8000ea4:	f002 fa9e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000eae:	48d0      	ldr	r0, [pc, #832]	@ (80011f0 <Segment_Map+0x540>)
 8000eb0:	f002 fa98 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eba:	48ce      	ldr	r0, [pc, #824]	@ (80011f4 <Segment_Map+0x544>)
 8000ebc:	f002 fa92 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	48cc      	ldr	r0, [pc, #816]	@ (80011f8 <Segment_Map+0x548>)
 8000ec6:	f002 fa8d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ed0:	48c8      	ldr	r0, [pc, #800]	@ (80011f4 <Segment_Map+0x544>)
 8000ed2:	f002 fa87 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	48c4      	ldr	r0, [pc, #784]	@ (80011f0 <Segment_Map+0x540>)
 8000ede:	f002 fa81 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee8:	48c2      	ldr	r0, [pc, #776]	@ (80011f4 <Segment_Map+0x544>)
 8000eea:	f002 fa7b 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000eee:	e3d7      	b.n	80016a0 <Segment_Map+0x9f0>
    case 0:
        HAL_GPIO_WritePin(A,HIGH);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef6:	48be      	ldr	r0, [pc, #760]	@ (80011f0 <Segment_Map+0x540>)
 8000ef8:	f002 fa74 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f02:	48bb      	ldr	r0, [pc, #748]	@ (80011f0 <Segment_Map+0x540>)
 8000f04:	f002 fa6e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f0e:	48b9      	ldr	r0, [pc, #740]	@ (80011f4 <Segment_Map+0x544>)
 8000f10:	f002 fa68 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2101      	movs	r1, #1
 8000f18:	48b7      	ldr	r0, [pc, #732]	@ (80011f8 <Segment_Map+0x548>)
 8000f1a:	f002 fa63 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f24:	48b3      	ldr	r0, [pc, #716]	@ (80011f4 <Segment_Map+0x544>)
 8000f26:	f002 fa5d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f30:	48af      	ldr	r0, [pc, #700]	@ (80011f0 <Segment_Map+0x540>)
 8000f32:	f002 fa57 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3c:	48ad      	ldr	r0, [pc, #692]	@ (80011f4 <Segment_Map+0x544>)
 8000f3e:	f002 fa51 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000f42:	e3ad      	b.n	80016a0 <Segment_Map+0x9f0>
    case 1:
        HAL_GPIO_WritePin(A,LOW);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f4a:	48a9      	ldr	r0, [pc, #676]	@ (80011f0 <Segment_Map+0x540>)
 8000f4c:	f002 fa4a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f56:	48a6      	ldr	r0, [pc, #664]	@ (80011f0 <Segment_Map+0x540>)
 8000f58:	f002 fa44 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f62:	48a4      	ldr	r0, [pc, #656]	@ (80011f4 <Segment_Map+0x544>)
 8000f64:	f002 fa3e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	48a2      	ldr	r0, [pc, #648]	@ (80011f8 <Segment_Map+0x548>)
 8000f6e:	f002 fa39 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f78:	489e      	ldr	r0, [pc, #632]	@ (80011f4 <Segment_Map+0x544>)
 8000f7a:	f002 fa33 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f84:	489a      	ldr	r0, [pc, #616]	@ (80011f0 <Segment_Map+0x540>)
 8000f86:	f002 fa2d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f90:	4898      	ldr	r0, [pc, #608]	@ (80011f4 <Segment_Map+0x544>)
 8000f92:	f002 fa27 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000f96:	e383      	b.n	80016a0 <Segment_Map+0x9f0>
    case 2:
        HAL_GPIO_WritePin(A,HIGH);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9e:	4894      	ldr	r0, [pc, #592]	@ (80011f0 <Segment_Map+0x540>)
 8000fa0:	f002 fa20 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000faa:	4891      	ldr	r0, [pc, #580]	@ (80011f0 <Segment_Map+0x540>)
 8000fac:	f002 fa1a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb6:	488f      	ldr	r0, [pc, #572]	@ (80011f4 <Segment_Map+0x544>)
 8000fb8:	f002 fa14 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	488d      	ldr	r0, [pc, #564]	@ (80011f8 <Segment_Map+0x548>)
 8000fc2:	f002 fa0f 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fcc:	4889      	ldr	r0, [pc, #548]	@ (80011f4 <Segment_Map+0x544>)
 8000fce:	f002 fa09 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd8:	4885      	ldr	r0, [pc, #532]	@ (80011f0 <Segment_Map+0x540>)
 8000fda:	f002 fa03 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe4:	4883      	ldr	r0, [pc, #524]	@ (80011f4 <Segment_Map+0x544>)
 8000fe6:	f002 f9fd 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8000fea:	e359      	b.n	80016a0 <Segment_Map+0x9f0>
    case 3:
        HAL_GPIO_WritePin(A,HIGH);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff2:	487f      	ldr	r0, [pc, #508]	@ (80011f0 <Segment_Map+0x540>)
 8000ff4:	f002 f9f6 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffe:	487c      	ldr	r0, [pc, #496]	@ (80011f0 <Segment_Map+0x540>)
 8001000:	f002 f9f0 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800100a:	487a      	ldr	r0, [pc, #488]	@ (80011f4 <Segment_Map+0x544>)
 800100c:	f002 f9ea 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8001010:	2201      	movs	r2, #1
 8001012:	2101      	movs	r1, #1
 8001014:	4878      	ldr	r0, [pc, #480]	@ (80011f8 <Segment_Map+0x548>)
 8001016:	f002 f9e5 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001020:	4874      	ldr	r0, [pc, #464]	@ (80011f4 <Segment_Map+0x544>)
 8001022:	f002 f9df 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102c:	4870      	ldr	r0, [pc, #448]	@ (80011f0 <Segment_Map+0x540>)
 800102e:	f002 f9d9 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001038:	486e      	ldr	r0, [pc, #440]	@ (80011f4 <Segment_Map+0x544>)
 800103a:	f002 f9d3 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800103e:	e32f      	b.n	80016a0 <Segment_Map+0x9f0>
    case 4:
        HAL_GPIO_WritePin(A,LOW);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001046:	486a      	ldr	r0, [pc, #424]	@ (80011f0 <Segment_Map+0x540>)
 8001048:	f002 f9cc 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001052:	4867      	ldr	r0, [pc, #412]	@ (80011f0 <Segment_Map+0x540>)
 8001054:	f002 f9c6 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800105e:	4865      	ldr	r0, [pc, #404]	@ (80011f4 <Segment_Map+0x544>)
 8001060:	f002 f9c0 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001064:	2200      	movs	r2, #0
 8001066:	2101      	movs	r1, #1
 8001068:	4863      	ldr	r0, [pc, #396]	@ (80011f8 <Segment_Map+0x548>)
 800106a:	f002 f9bb 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001074:	485f      	ldr	r0, [pc, #380]	@ (80011f4 <Segment_Map+0x544>)
 8001076:	f002 f9b5 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	485b      	ldr	r0, [pc, #364]	@ (80011f0 <Segment_Map+0x540>)
 8001082:	f002 f9af 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8001086:	2201      	movs	r2, #1
 8001088:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108c:	4859      	ldr	r0, [pc, #356]	@ (80011f4 <Segment_Map+0x544>)
 800108e:	f002 f9a9 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8001092:	e305      	b.n	80016a0 <Segment_Map+0x9f0>
    case 5:
        HAL_GPIO_WritePin(A,HIGH);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109a:	4855      	ldr	r0, [pc, #340]	@ (80011f0 <Segment_Map+0x540>)
 800109c:	f002 f9a2 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a6:	4852      	ldr	r0, [pc, #328]	@ (80011f0 <Segment_Map+0x540>)
 80010a8:	f002 f99c 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	4850      	ldr	r0, [pc, #320]	@ (80011f4 <Segment_Map+0x544>)
 80010b4:	f002 f996 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2101      	movs	r1, #1
 80010bc:	484e      	ldr	r0, [pc, #312]	@ (80011f8 <Segment_Map+0x548>)
 80010be:	f002 f991 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c8:	484a      	ldr	r0, [pc, #296]	@ (80011f4 <Segment_Map+0x544>)
 80010ca:	f002 f98b 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d4:	4846      	ldr	r0, [pc, #280]	@ (80011f0 <Segment_Map+0x540>)
 80010d6:	f002 f985 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 80010da:	2201      	movs	r2, #1
 80010dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010e0:	4844      	ldr	r0, [pc, #272]	@ (80011f4 <Segment_Map+0x544>)
 80010e2:	f002 f97f 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80010e6:	e2db      	b.n	80016a0 <Segment_Map+0x9f0>
    case 6:
        HAL_GPIO_WritePin(A,HIGH);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ee:	4840      	ldr	r0, [pc, #256]	@ (80011f0 <Segment_Map+0x540>)
 80010f0:	f002 f978 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fa:	483d      	ldr	r0, [pc, #244]	@ (80011f0 <Segment_Map+0x540>)
 80010fc:	f002 f972 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001106:	483b      	ldr	r0, [pc, #236]	@ (80011f4 <Segment_Map+0x544>)
 8001108:	f002 f96c 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 800110c:	2201      	movs	r2, #1
 800110e:	2101      	movs	r1, #1
 8001110:	4839      	ldr	r0, [pc, #228]	@ (80011f8 <Segment_Map+0x548>)
 8001112:	f002 f967 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111c:	4835      	ldr	r0, [pc, #212]	@ (80011f4 <Segment_Map+0x544>)
 800111e:	f002 f961 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001128:	4831      	ldr	r0, [pc, #196]	@ (80011f0 <Segment_Map+0x540>)
 800112a:	f002 f95b 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001134:	482f      	ldr	r0, [pc, #188]	@ (80011f4 <Segment_Map+0x544>)
 8001136:	f002 f955 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800113a:	e2b1      	b.n	80016a0 <Segment_Map+0x9f0>
    case 7:
        HAL_GPIO_WritePin(A,HIGH);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001142:	482b      	ldr	r0, [pc, #172]	@ (80011f0 <Segment_Map+0x540>)
 8001144:	f002 f94e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800114e:	4828      	ldr	r0, [pc, #160]	@ (80011f0 <Segment_Map+0x540>)
 8001150:	f002 f948 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800115a:	4826      	ldr	r0, [pc, #152]	@ (80011f4 <Segment_Map+0x544>)
 800115c:	f002 f942 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4824      	ldr	r0, [pc, #144]	@ (80011f8 <Segment_Map+0x548>)
 8001166:	f002 f93d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001170:	4820      	ldr	r0, [pc, #128]	@ (80011f4 <Segment_Map+0x544>)
 8001172:	f002 f937 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	481c      	ldr	r0, [pc, #112]	@ (80011f0 <Segment_Map+0x540>)
 800117e:	f002 f931 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001188:	481a      	ldr	r0, [pc, #104]	@ (80011f4 <Segment_Map+0x544>)
 800118a:	f002 f92b 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800118e:	e287      	b.n	80016a0 <Segment_Map+0x9f0>
    case 8:
        HAL_GPIO_WritePin(A,HIGH);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001196:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <Segment_Map+0x540>)
 8001198:	f002 f924 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(A,HIGH);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a2:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <Segment_Map+0x540>)
 80011a4:	f002 f91e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <Segment_Map+0x540>)
 80011b0:	f002 f918 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ba:	480e      	ldr	r0, [pc, #56]	@ (80011f4 <Segment_Map+0x544>)
 80011bc:	f002 f912 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <Segment_Map+0x548>)
 80011c6:	f002 f90d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d0:	4808      	ldr	r0, [pc, #32]	@ (80011f4 <Segment_Map+0x544>)
 80011d2:	f002 f907 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <Segment_Map+0x540>)
 80011de:	f002 f901 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <Segment_Map+0x544>)
 80011ea:	f002 f8fb 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80011ee:	e257      	b.n	80016a0 <Segment_Map+0x9f0>
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40010800 	.word	0x40010800
    case 9:
        HAL_GPIO_WritePin(A,HIGH);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001202:	48d0      	ldr	r0, [pc, #832]	@ (8001544 <Segment_Map+0x894>)
 8001204:	f002 f8ee 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800120e:	48cd      	ldr	r0, [pc, #820]	@ (8001544 <Segment_Map+0x894>)
 8001210:	f002 f8e8 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800121a:	48cb      	ldr	r0, [pc, #812]	@ (8001548 <Segment_Map+0x898>)
 800121c:	f002 f8e2 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8001220:	2201      	movs	r2, #1
 8001222:	2101      	movs	r1, #1
 8001224:	48c9      	ldr	r0, [pc, #804]	@ (800154c <Segment_Map+0x89c>)
 8001226:	f002 f8dd 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001230:	48c5      	ldr	r0, [pc, #788]	@ (8001548 <Segment_Map+0x898>)
 8001232:	f002 f8d7 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123c:	48c1      	ldr	r0, [pc, #772]	@ (8001544 <Segment_Map+0x894>)
 800123e:	f002 f8d1 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001248:	48bf      	ldr	r0, [pc, #764]	@ (8001548 <Segment_Map+0x898>)
 800124a:	f002 f8cb 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800124e:	e227      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'o':
        HAL_GPIO_WritePin(A,HIGH);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001256:	48bb      	ldr	r0, [pc, #748]	@ (8001544 <Segment_Map+0x894>)
 8001258:	f002 f8c4 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001262:	48b8      	ldr	r0, [pc, #736]	@ (8001544 <Segment_Map+0x894>)
 8001264:	f002 f8be 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800126e:	48b6      	ldr	r0, [pc, #728]	@ (8001548 <Segment_Map+0x898>)
 8001270:	f002 f8b8 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	48b4      	ldr	r0, [pc, #720]	@ (800154c <Segment_Map+0x89c>)
 800127a:	f002 f8b3 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001284:	48b0      	ldr	r0, [pc, #704]	@ (8001548 <Segment_Map+0x898>)
 8001286:	f002 f8ad 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001290:	48ac      	ldr	r0, [pc, #688]	@ (8001544 <Segment_Map+0x894>)
 8001292:	f002 f8a7 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800129c:	48aa      	ldr	r0, [pc, #680]	@ (8001548 <Segment_Map+0x898>)
 800129e:	f002 f8a1 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80012a2:	e1fd      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'C':
        HAL_GPIO_WritePin(A,HIGH);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012aa:	48a6      	ldr	r0, [pc, #664]	@ (8001544 <Segment_Map+0x894>)
 80012ac:	f002 f89a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b6:	48a3      	ldr	r0, [pc, #652]	@ (8001544 <Segment_Map+0x894>)
 80012b8:	f002 f894 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012c2:	48a1      	ldr	r0, [pc, #644]	@ (8001548 <Segment_Map+0x898>)
 80012c4:	f002 f88e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2101      	movs	r1, #1
 80012cc:	489f      	ldr	r0, [pc, #636]	@ (800154c <Segment_Map+0x89c>)
 80012ce:	f002 f889 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012d8:	489b      	ldr	r0, [pc, #620]	@ (8001548 <Segment_Map+0x898>)
 80012da:	f002 f883 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e4:	4897      	ldr	r0, [pc, #604]	@ (8001544 <Segment_Map+0x894>)
 80012e6:	f002 f87d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012f0:	4895      	ldr	r0, [pc, #596]	@ (8001548 <Segment_Map+0x898>)
 80012f2:	f002 f877 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80012f6:	e1d3      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'U':
        HAL_GPIO_WritePin(A,LOW);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fe:	4891      	ldr	r0, [pc, #580]	@ (8001544 <Segment_Map+0x894>)
 8001300:	f002 f870 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800130a:	488e      	ldr	r0, [pc, #568]	@ (8001544 <Segment_Map+0x894>)
 800130c:	f002 f86a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001316:	488c      	ldr	r0, [pc, #560]	@ (8001548 <Segment_Map+0x898>)
 8001318:	f002 f864 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 800131c:	2201      	movs	r2, #1
 800131e:	2101      	movs	r1, #1
 8001320:	488a      	ldr	r0, [pc, #552]	@ (800154c <Segment_Map+0x89c>)
 8001322:	f002 f85f 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800132c:	4886      	ldr	r0, [pc, #536]	@ (8001548 <Segment_Map+0x898>)
 800132e:	f002 f859 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001338:	4882      	ldr	r0, [pc, #520]	@ (8001544 <Segment_Map+0x894>)
 800133a:	f002 f853 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001344:	4880      	ldr	r0, [pc, #512]	@ (8001548 <Segment_Map+0x898>)
 8001346:	f002 f84d 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800134a:	e1a9      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'D':
        HAL_GPIO_WritePin(A,LOW);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001352:	487c      	ldr	r0, [pc, #496]	@ (8001544 <Segment_Map+0x894>)
 8001354:	f002 f846 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800135e:	4879      	ldr	r0, [pc, #484]	@ (8001544 <Segment_Map+0x894>)
 8001360:	f002 f840 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800136a:	4877      	ldr	r0, [pc, #476]	@ (8001548 <Segment_Map+0x898>)
 800136c:	f002 f83a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	4875      	ldr	r0, [pc, #468]	@ (800154c <Segment_Map+0x89c>)
 8001376:	f002 f835 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001380:	4871      	ldr	r0, [pc, #452]	@ (8001548 <Segment_Map+0x898>)
 8001382:	f002 f82f 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138c:	486d      	ldr	r0, [pc, #436]	@ (8001544 <Segment_Map+0x894>)
 800138e:	f002 f829 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	486b      	ldr	r0, [pc, #428]	@ (8001548 <Segment_Map+0x898>)
 800139a:	f002 f823 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800139e:	e17f      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'L':
        HAL_GPIO_WritePin(A,LOW);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a6:	4867      	ldr	r0, [pc, #412]	@ (8001544 <Segment_Map+0x894>)
 80013a8:	f002 f81c 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b2:	4864      	ldr	r0, [pc, #400]	@ (8001544 <Segment_Map+0x894>)
 80013b4:	f002 f816 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013be:	4862      	ldr	r0, [pc, #392]	@ (8001548 <Segment_Map+0x898>)
 80013c0:	f002 f810 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	4860      	ldr	r0, [pc, #384]	@ (800154c <Segment_Map+0x89c>)
 80013ca:	f002 f80b 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013d4:	485c      	ldr	r0, [pc, #368]	@ (8001548 <Segment_Map+0x898>)
 80013d6:	f002 f805 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e0:	4858      	ldr	r0, [pc, #352]	@ (8001544 <Segment_Map+0x894>)
 80013e2:	f001 ffff 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ec:	4856      	ldr	r0, [pc, #344]	@ (8001548 <Segment_Map+0x898>)
 80013ee:	f001 fff9 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80013f2:	e155      	b.n	80016a0 <Segment_Map+0x9f0>
    case 't':
        HAL_GPIO_WritePin(A,LOW);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fa:	4852      	ldr	r0, [pc, #328]	@ (8001544 <Segment_Map+0x894>)
 80013fc:	f001 fff2 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001406:	484f      	ldr	r0, [pc, #316]	@ (8001544 <Segment_Map+0x894>)
 8001408:	f001 ffec 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001412:	484d      	ldr	r0, [pc, #308]	@ (8001548 <Segment_Map+0x898>)
 8001414:	f001 ffe6 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 8001418:	2201      	movs	r2, #1
 800141a:	2101      	movs	r1, #1
 800141c:	484b      	ldr	r0, [pc, #300]	@ (800154c <Segment_Map+0x89c>)
 800141e:	f001 ffe1 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001428:	4847      	ldr	r0, [pc, #284]	@ (8001548 <Segment_Map+0x898>)
 800142a:	f001 ffdb 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001434:	4843      	ldr	r0, [pc, #268]	@ (8001544 <Segment_Map+0x894>)
 8001436:	f001 ffd5 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001440:	4841      	ldr	r0, [pc, #260]	@ (8001548 <Segment_Map+0x898>)
 8001442:	f001 ffcf 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8001446:	e12b      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'S':
        HAL_GPIO_WritePin(A,LOW);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144e:	483d      	ldr	r0, [pc, #244]	@ (8001544 <Segment_Map+0x894>)
 8001450:	f001 ffc8 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800145a:	483a      	ldr	r0, [pc, #232]	@ (8001544 <Segment_Map+0x894>)
 800145c:	f001 ffc2 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001466:	4838      	ldr	r0, [pc, #224]	@ (8001548 <Segment_Map+0x898>)
 8001468:	f001 ffbc 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 800146c:	2200      	movs	r2, #0
 800146e:	2101      	movs	r1, #1
 8001470:	4836      	ldr	r0, [pc, #216]	@ (800154c <Segment_Map+0x89c>)
 8001472:	f001 ffb7 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800147c:	4832      	ldr	r0, [pc, #200]	@ (8001548 <Segment_Map+0x898>)
 800147e:	f001 ffb1 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,HIGH);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001488:	482e      	ldr	r0, [pc, #184]	@ (8001544 <Segment_Map+0x894>)
 800148a:	f001 ffab 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001494:	482c      	ldr	r0, [pc, #176]	@ (8001548 <Segment_Map+0x898>)
 8001496:	f001 ffa5 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800149a:	e101      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'M':
        HAL_GPIO_WritePin(A,LOW);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a2:	4828      	ldr	r0, [pc, #160]	@ (8001544 <Segment_Map+0x894>)
 80014a4:	f001 ff9e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,HIGH);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014ae:	4825      	ldr	r0, [pc, #148]	@ (8001544 <Segment_Map+0x894>)
 80014b0:	f001 ff98 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ba:	4823      	ldr	r0, [pc, #140]	@ (8001548 <Segment_Map+0x898>)
 80014bc:	f001 ff92 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	4821      	ldr	r0, [pc, #132]	@ (800154c <Segment_Map+0x89c>)
 80014c6:	f001 ff8d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014d0:	481d      	ldr	r0, [pc, #116]	@ (8001548 <Segment_Map+0x898>)
 80014d2:	f001 ff87 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014dc:	4819      	ldr	r0, [pc, #100]	@ (8001544 <Segment_Map+0x894>)
 80014de:	f001 ff81 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <Segment_Map+0x898>)
 80014ea:	f001 ff7b 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80014ee:	e0d7      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'T':
        HAL_GPIO_WritePin(A,LOW);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f6:	4813      	ldr	r0, [pc, #76]	@ (8001544 <Segment_Map+0x894>)
 80014f8:	f001 ff74 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001502:	4810      	ldr	r0, [pc, #64]	@ (8001544 <Segment_Map+0x894>)
 8001504:	f001 ff6e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800150e:	480e      	ldr	r0, [pc, #56]	@ (8001548 <Segment_Map+0x898>)
 8001510:	f001 ff68 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001514:	2200      	movs	r2, #0
 8001516:	2101      	movs	r1, #1
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <Segment_Map+0x89c>)
 800151a:	f001 ff63 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <Segment_Map+0x898>)
 8001526:	f001 ff5d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <Segment_Map+0x894>)
 8001532:	f001 ff57 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,HIGH);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <Segment_Map+0x898>)
 800153e:	f001 ff51 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 8001542:	e0ad      	b.n	80016a0 <Segment_Map+0x9f0>
 8001544:	40010c00 	.word	0x40010c00
 8001548:	40011000 	.word	0x40011000
 800154c:	40010800 	.word	0x40010800
    case 'W':
        HAL_GPIO_WritePin(A,LOW);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001556:	4854      	ldr	r0, [pc, #336]	@ (80016a8 <Segment_Map+0x9f8>)
 8001558:	f001 ff44 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001562:	4851      	ldr	r0, [pc, #324]	@ (80016a8 <Segment_Map+0x9f8>)
 8001564:	f001 ff3e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800156e:	484f      	ldr	r0, [pc, #316]	@ (80016ac <Segment_Map+0x9fc>)
 8001570:	f001 ff38 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 8001574:	2200      	movs	r2, #0
 8001576:	2101      	movs	r1, #1
 8001578:	484d      	ldr	r0, [pc, #308]	@ (80016b0 <Segment_Map+0xa00>)
 800157a:	f001 ff33 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,HIGH);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001584:	4849      	ldr	r0, [pc, #292]	@ (80016ac <Segment_Map+0x9fc>)
 8001586:	f001 ff2d 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001590:	4845      	ldr	r0, [pc, #276]	@ (80016a8 <Segment_Map+0x9f8>)
 8001592:	f001 ff27 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159c:	4843      	ldr	r0, [pc, #268]	@ (80016ac <Segment_Map+0x9fc>)
 800159e:	f001 ff21 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80015a2:	e07d      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'H':
        HAL_GPIO_WritePin(A,LOW);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015aa:	483f      	ldr	r0, [pc, #252]	@ (80016a8 <Segment_Map+0x9f8>)
 80015ac:	f001 ff1a 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015b6:	483c      	ldr	r0, [pc, #240]	@ (80016a8 <Segment_Map+0x9f8>)
 80015b8:	f001 ff14 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,HIGH);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015c2:	483a      	ldr	r0, [pc, #232]	@ (80016ac <Segment_Map+0x9fc>)
 80015c4:	f001 ff0e 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,LOW);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2101      	movs	r1, #1
 80015cc:	4838      	ldr	r0, [pc, #224]	@ (80016b0 <Segment_Map+0xa00>)
 80015ce:	f001 ff09 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d8:	4834      	ldr	r0, [pc, #208]	@ (80016ac <Segment_Map+0x9fc>)
 80015da:	f001 ff03 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 80015de:	2200      	movs	r2, #0
 80015e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e4:	4830      	ldr	r0, [pc, #192]	@ (80016a8 <Segment_Map+0x9f8>)
 80015e6:	f001 fefd 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f0:	482e      	ldr	r0, [pc, #184]	@ (80016ac <Segment_Map+0x9fc>)
 80015f2:	f001 fef7 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 80015f6:	e053      	b.n	80016a0 <Segment_Map+0x9f0>
    case 'F':
        HAL_GPIO_WritePin(A,LOW);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015fe:	482a      	ldr	r0, [pc, #168]	@ (80016a8 <Segment_Map+0x9f8>)
 8001600:	f001 fef0 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(B,LOW);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800160a:	4827      	ldr	r0, [pc, #156]	@ (80016a8 <Segment_Map+0x9f8>)
 800160c:	f001 feea 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(C,LOW);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001616:	4825      	ldr	r0, [pc, #148]	@ (80016ac <Segment_Map+0x9fc>)
 8001618:	f001 fee4 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D,HIGH);
 800161c:	2201      	movs	r2, #1
 800161e:	2101      	movs	r1, #1
 8001620:	4823      	ldr	r0, [pc, #140]	@ (80016b0 <Segment_Map+0xa00>)
 8001622:	f001 fedf 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(E,LOW);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800162c:	481f      	ldr	r0, [pc, #124]	@ (80016ac <Segment_Map+0x9fc>)
 800162e:	f001 fed9 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(F,LOW);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001638:	481b      	ldr	r0, [pc, #108]	@ (80016a8 <Segment_Map+0x9f8>)
 800163a:	f001 fed3 	bl	80033e4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(G,LOW);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001644:	4819      	ldr	r0, [pc, #100]	@ (80016ac <Segment_Map+0x9fc>)
 8001646:	f001 fecd 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800164a:	e029      	b.n	80016a0 <Segment_Map+0x9f0>
    default:
    	HAL_GPIO_WritePin(A,LOW);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001652:	4815      	ldr	r0, [pc, #84]	@ (80016a8 <Segment_Map+0x9f8>)
 8001654:	f001 fec6 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B,LOW);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800165e:	4812      	ldr	r0, [pc, #72]	@ (80016a8 <Segment_Map+0x9f8>)
 8001660:	f001 fec0 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C,LOW);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800166a:	4810      	ldr	r0, [pc, #64]	@ (80016ac <Segment_Map+0x9fc>)
 800166c:	f001 feba 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D,LOW);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <Segment_Map+0xa00>)
 8001676:	f001 feb5 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E,LOW);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001680:	480a      	ldr	r0, [pc, #40]	@ (80016ac <Segment_Map+0x9fc>)
 8001682:	f001 feaf 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F,LOW);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168c:	4806      	ldr	r0, [pc, #24]	@ (80016a8 <Segment_Map+0x9f8>)
 800168e:	f001 fea9 	bl	80033e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G,LOW);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <Segment_Map+0x9fc>)
 800169a:	f001 fea3 	bl	80033e4 <HAL_GPIO_WritePin>
        break;
 800169e:	bf00      	nop
    }
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40010800 	.word	0x40010800

080016b4 <Segment_Set>:

void Segment_Set(uint8_t seg, uint8_t value)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]

    segment_value[seg] = value;
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4904      	ldr	r1, [pc, #16]	@ (80016d8 <Segment_Set+0x24>)
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	54ca      	strb	r2, [r1, r3]

}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200000cc 	.word	0x200000cc

080016dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001828 <MX_GPIO_Init+0x14c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001828 <MX_GPIO_Init+0x14c>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001828 <MX_GPIO_Init+0x14c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001708:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <MX_GPIO_Init+0x14c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a46      	ldr	r2, [pc, #280]	@ (8001828 <MX_GPIO_Init+0x14c>)
 800170e:	f043 0320 	orr.w	r3, r3, #32
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <MX_GPIO_Init+0x14c>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <MX_GPIO_Init+0x14c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a40      	ldr	r2, [pc, #256]	@ (8001828 <MX_GPIO_Init+0x14c>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <MX_GPIO_Init+0x14c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <MX_GPIO_Init+0x14c>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a3a      	ldr	r2, [pc, #232]	@ (8001828 <MX_GPIO_Init+0x14c>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <MX_GPIO_Init+0x14c>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, G_Pin|E_Pin|C_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001756:	4835      	ldr	r0, [pc, #212]	@ (800182c <MX_GPIO_Init+0x150>)
 8001758:	f001 fe44 	bl	80033e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_Pin|Blinky_Point_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin
 800175c:	2200      	movs	r2, #0
 800175e:	f649 7111 	movw	r1, #40721	@ 0x9f11
 8001762:	4833      	ldr	r0, [pc, #204]	@ (8001830 <MX_GPIO_Init+0x154>)
 8001764:	f001 fe3e 	bl	80033e4 <HAL_GPIO_WritePin>
                          |Seg_4_VCC_Pin|Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Date_Point_Pin|A_Pin|F_Pin|B_Pin
 8001768:	2200      	movs	r2, #0
 800176a:	f24f 0121 	movw	r1, #61473	@ 0xf021
 800176e:	4831      	ldr	r0, [pc, #196]	@ (8001834 <MX_GPIO_Init+0x158>)
 8001770:	f001 fe38 	bl	80033e4 <HAL_GPIO_WritePin>
                          |Seg_1_VCC_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : G_Pin E_Pin C_Pin */
  GPIO_InitStruct.Pin = G_Pin|E_Pin|C_Pin;
 8001774:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2302      	movs	r3, #2
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	4827      	ldr	r0, [pc, #156]	@ (800182c <MX_GPIO_Init+0x150>)
 800178e:	f001 fca5 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin Blinky_Point_Pin Seg_2_VCC_Pin Seg_3_VCC_Pin
                           Seg_4_VCC_Pin Seg_5_VCC_Pin Seg_6_VCC_Pin Seg_7_VCC_Pin */
  GPIO_InitStruct.Pin = D_Pin|Blinky_Point_Pin|Seg_2_VCC_Pin|Seg_3_VCC_Pin
 8001792:	f649 7311 	movw	r3, #40721	@ 0x9f11
 8001796:	613b      	str	r3, [r7, #16]
                          |Seg_4_VCC_Pin|Seg_5_VCC_Pin|Seg_6_VCC_Pin|Seg_7_VCC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4821      	ldr	r0, [pc, #132]	@ (8001830 <MX_GPIO_Init+0x154>)
 80017ac:	f001 fc96 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Date_Point_Pin A_Pin F_Pin B_Pin
                           Seg_1_VCC_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = Date_Point_Pin|A_Pin|F_Pin|B_Pin
 80017b0:	f24f 0321 	movw	r3, #61473	@ 0xf021
 80017b4:	613b      	str	r3, [r7, #16]
                          |Seg_1_VCC_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2302      	movs	r3, #2
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	481a      	ldr	r0, [pc, #104]	@ (8001834 <MX_GPIO_Init+0x158>)
 80017ca:	f001 fc87 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SQW_Pin */
  GPIO_InitStruct.Pin = SQW_Pin;
 80017ce:	2302      	movs	r3, #2
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_GPIO_Init+0x15c>)
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SQW_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4619      	mov	r1, r3
 80017e0:	4814      	ldr	r0, [pc, #80]	@ (8001834 <MX_GPIO_Init+0x158>)
 80017e2:	f001 fc7b 	bl	80030dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 80017e6:	2308      	movs	r3, #8
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_GPIO_Init+0x160>)
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	480e      	ldr	r0, [pc, #56]	@ (8001834 <MX_GPIO_Init+0x158>)
 80017fa:	f001 fc6f 	bl	80030dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2007      	movs	r0, #7
 8001804:	f001 fc33 	bl	800306e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001808:	2007      	movs	r0, #7
 800180a:	f001 fc4c 	bl	80030a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2009      	movs	r0, #9
 8001814:	f001 fc2b 	bl	800306e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001818:	2009      	movs	r0, #9
 800181a:	f001 fc44 	bl	80030a6 <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	40011000 	.word	0x40011000
 8001830:	40010800 	.word	0x40010800
 8001834:	40010c00 	.word	0x40010c00
 8001838:	10110000 	.word	0x10110000
 800183c:	10210000 	.word	0x10210000

08001840 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <MX_I2C2_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_I2C2_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <MX_I2C2_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_I2C2_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_I2C2_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_I2C2_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_I2C2_Init+0x50>)
 800187e:	f001 fdeb 	bl	8003458 <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001888:	f001 f84a 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200000dc 	.word	0x200000dc
 8001894:	40005800 	.word	0x40005800
 8001898:	000186a0 	.word	0x000186a0

0800189c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_I2C_MspInit+0x74>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d124      	bne.n	8001906 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018da:	2312      	movs	r3, #18
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	@ (8001918 <HAL_I2C_MspInit+0x7c>)
 80018ea:	f001 fbf7 	bl	80030dc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_I2C_MspInit+0x78>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005800 	.word	0x40005800
 8001914:	40021000 	.word	0x40021000
 8001918:	40010c00 	.word	0x40010c00

0800191c <BCD_to_Decimal>:
#include "Variable.h"
#include "Definition.h"
#include "i2c.h"


uint8_t BCD_to_Decimal(uint8_t bcd) {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4413      	add	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <Decimal_to_BCD>:

uint8_t Decimal_to_BCD(uint8_t decimal) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    return ((decimal / 10) << 4) | (decimal % 10);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <Decimal_to_BCD+0x44>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	08db      	lsrs	r3, r3, #3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	b258      	sxtb	r0, r3
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <Decimal_to_BCD+0x44>)
 800196a:	fba3 1302 	umull	r1, r3, r3, r2
 800196e:	08d9      	lsrs	r1, r3, #3
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4303      	orrs	r3, r0
 8001980:	b25b      	sxtb	r3, r3
 8001982:	b2db      	uxtb	r3, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	cccccccd 	.word	0xcccccccd

08001994 <DS3231_WriteTime>:

void DS3231_WriteTime(I2C_HandleTypeDef *hi2c, uint8_t hour, uint8_t minute, uint8_t second) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	70fb      	strb	r3, [r7, #3]
 80019a6:	460b      	mov	r3, r1
 80019a8:	70bb      	strb	r3, [r7, #2]
 80019aa:	4613      	mov	r3, r2
 80019ac:	707b      	strb	r3, [r7, #1]
    uint8_t timeData[3];

    timeData[0] = Decimal_to_BCD(second);  // Convert second to BCD
 80019ae:	787b      	ldrb	r3, [r7, #1]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffcb 	bl	800194c <Decimal_to_BCD>
 80019b6:	4603      	mov	r3, r0
 80019b8:	733b      	strb	r3, [r7, #12]
    timeData[1] = Decimal_to_BCD(minute);  // Convert minute to BCD
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffc5 	bl	800194c <Decimal_to_BCD>
 80019c2:	4603      	mov	r3, r0
 80019c4:	737b      	strb	r3, [r7, #13]
    timeData[2] = Decimal_to_BCD(hour);    // Convert hour to BCD
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ffbf 	bl	800194c <Decimal_to_BCD>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73bb      	strb	r3, [r7, #14]

    // DS3231 I2C address (0x68 is default address)
    HAL_I2C_Mem_Write(hi2c, 0xD0, 0x00, I2C_MEMADD_SIZE_8BIT, timeData, 3, 1000);
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2303      	movs	r3, #3
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2301      	movs	r3, #1
 80019e4:	2200      	movs	r2, #0
 80019e6:	21d0      	movs	r1, #208	@ 0xd0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f001 fe79 	bl	80036e0 <HAL_I2C_Mem_Write>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <DS3231_ReadTime>:

void DS3231_ReadTime(I2C_HandleTypeDef *hi2c, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b08a      	sub	sp, #40	@ 0x28
 80019fa:	af04      	add	r7, sp, #16
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
    uint8_t timeData[4];

    // DS3231 I2C address (0x68 is default address)
    HAL_I2C_Mem_Read(hi2c, 0xD0, 0x00, I2C_MEMADD_SIZE_8BIT, timeData, 4, 1000);
 8001a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	2200      	movs	r2, #0
 8001a18:	21d0      	movs	r1, #208	@ 0xd0
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f001 ff5a 	bl	80038d4 <HAL_I2C_Mem_Read>

    *second = BCD_to_Decimal(timeData[0]);  // Convert BCD to decimal
 8001a20:	7d3b      	ldrb	r3, [r7, #20]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff7a 	bl	800191c <BCD_to_Decimal>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	701a      	strb	r2, [r3, #0]
    *minute = BCD_to_Decimal(timeData[1]);  // Convert BCD to decimal
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff72 	bl	800191c <BCD_to_Decimal>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	701a      	strb	r2, [r3, #0]
    *hour = BCD_to_Decimal(timeData[2]);    // Convert BCD to decimal
 8001a40:	7dbb      	ldrb	r3, [r7, #22]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff6a 	bl	800191c <BCD_to_Decimal>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	701a      	strb	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DS3231_WriteCalendar>:

void DS3231_WriteCalendar(I2C_HandleTypeDef *hi2c, uint8_t year, uint8_t month, uint8_t day, uint8_t weekday) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	70fb      	strb	r3, [r7, #3]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70bb      	strb	r3, [r7, #2]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	707b      	strb	r3, [r7, #1]
    uint8_t dateData[4];

    dateData[3] = Decimal_to_BCD(weekday);  // Convert weekday to BCD (1-7)
 8001a72:	7e3b      	ldrb	r3, [r7, #24]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff69 	bl	800194c <Decimal_to_BCD>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]
    dateData[0] = Decimal_to_BCD(day);      // Convert day to BCD (1-31)
 8001a7e:	787b      	ldrb	r3, [r7, #1]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff63 	bl	800194c <Decimal_to_BCD>
 8001a86:	4603      	mov	r3, r0
 8001a88:	733b      	strb	r3, [r7, #12]
    dateData[1] = Decimal_to_BCD(month);    // Convert month to BCD (1-12)
 8001a8a:	78bb      	ldrb	r3, [r7, #2]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <Decimal_to_BCD>
 8001a92:	4603      	mov	r3, r0
 8001a94:	737b      	strb	r3, [r7, #13]
    dateData[2] = Decimal_to_BCD(year);     // Convert year to BCD (0-99)
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff57 	bl	800194c <Decimal_to_BCD>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73bb      	strb	r3, [r7, #14]

    // DS3231 I2C address (0x68 is default address)
    HAL_I2C_Mem_Write(hi2c, 0xD0, 0x04, I2C_MEMADD_SIZE_8BIT, dateData, 4, 1000);
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	21d0      	movs	r1, #208	@ 0xd0
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f001 fe11 	bl	80036e0 <HAL_I2C_Mem_Write>
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <DS3231_ReadCalendar>:

void DS3231_ReadCalendar(I2C_HandleTypeDef *hi2c, uint16_t *year, uint16_t *month, uint16_t *day, uint8_t *weekday) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b08a      	sub	sp, #40	@ 0x28
 8001aca:	af04      	add	r7, sp, #16
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
    uint8_t dateData[4];
    
    HAL_I2C_Mem_Read(hi2c, 0xD0, 0x04, I2C_MEMADD_SIZE_8BIT, dateData, 4, 1000);
 8001ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad8:	9302      	str	r3, [sp, #8]
 8001ada:	2304      	movs	r3, #4
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	21d0      	movs	r1, #208	@ 0xd0
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f001 fef2 	bl	80038d4 <HAL_I2C_Mem_Read>
    

    *weekday = BCD_to_Decimal(dateData[3]);  // Convert BCD to decimal
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff12 	bl	800191c <BCD_to_Decimal>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	701a      	strb	r2, [r3, #0]
    *day = (uint16_t)BCD_to_Decimal(dateData[0]);      // Convert BCD to decimal
 8001b00:	7d3b      	ldrb	r3, [r7, #20]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff0a 	bl	800191c <BCD_to_Decimal>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	801a      	strh	r2, [r3, #0]
    *month = (uint16_t)BCD_to_Decimal(dateData[1]);    // Convert BCD to decimal
 8001b10:	7d7b      	ldrb	r3, [r7, #21]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff02 	bl	800191c <BCD_to_Decimal>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	801a      	strh	r2, [r3, #0]
    *year = (uint16_t)BCD_to_Decimal(dateData[2]);     // Convert BCD to decimal
 8001b20:	7dbb      	ldrb	r3, [r7, #22]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fefa 	bl	800191c <BCD_to_Decimal>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	801a      	strh	r2, [r3, #0]

}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DS3231_EnableSQW1Hz>:

void DS3231_EnableSQW1Hz(I2C_HandleTypeDef *hi2c) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	6078      	str	r0, [r7, #4]

    // Read the current Control/Status Register value (0x0E)
    //HAL_I2C_Mem_Read(hi2c, 0xD0, 0x0E, I2C_MEMADD_SIZE_8BIT, &controlRegValue, 1, 1000);

    // Set the square wave frequency to 1Hz (bits 0-1 = 00) and enable SQW output (bit 7 = 1)
    controlRegValue = 0x00;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

    // Write the updated value back to the Control/Status Register
    HAL_I2C_Mem_Write(hi2c, 0xD0, 0x0E, I2C_MEMADD_SIZE_8BIT, &controlRegValue, 1, 1000);
 8001b44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	f107 030f 	add.w	r3, r7, #15
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2301      	movs	r3, #1
 8001b56:	220e      	movs	r2, #14
 8001b58:	21d0      	movs	r1, #208	@ 0xd0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f001 fdc0 	bl	80036e0 <HAL_I2C_Mem_Write>
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <gregorian_to_jalali>:
355746=361590-5844 & 361590=(30*33*365)+(30*8) & 5844=(16*365)+(16/4)
355666=355746-79-1 & 355668=355746-79+1 &  1595=605+990 &  605=621-16
990=30*33 & 12053=(365*33)+(32/4) & 36524=(365*100)+(100/4)-(100/100)
1461=(365*4)+(4/4) & 146097=(365*400)+(400/4)-(400/100)+(400/400)  */

long *gregorian_to_jalali(long gy, long gm, long gd, long out[]) {
 8001b68:	b4b0      	push	{r4, r5, r7}
 8001b6a:	b095      	sub	sp, #84	@ 0x54
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  long days;
  {
    long gy2 = (gm > 2) ? (gy + 1) : gy;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	dd02      	ble.n	8001b82 <gregorian_to_jalali+0x1a>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	e000      	b.n	8001b84 <gregorian_to_jalali+0x1c>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	647b      	str	r3, [r7, #68]	@ 0x44
    long g_d_m[12] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
 8001b86:	4b6a      	ldr	r3, [pc, #424]	@ (8001d30 <gregorian_to_jalali+0x1c8>)
 8001b88:	f107 0414 	add.w	r4, r7, #20
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    days = 355666 + (365 * gy) + ((int)((gy2 + 3) / 4)) - ((int)((gy2 + 99) / 100)) + ((int)((gy2 + 399) / 400)) + gd + g_d_m[gm - 1];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f240 126d 	movw	r2, #365	@ 0x16d
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	f503 22ad 	add.w	r2, r3, #354304	@ 0x56800
 8001bac:	f202 5252 	addw	r2, r2, #1362	@ 0x552
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da00      	bge.n	8001bba <gregorian_to_jalali+0x52>
 8001bb8:	3303      	adds	r3, #3
 8001bba:	109b      	asrs	r3, r3, #2
 8001bbc:	441a      	add	r2, r3
 8001bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc0:	3363      	adds	r3, #99	@ 0x63
 8001bc2:	495c      	ldr	r1, [pc, #368]	@ (8001d34 <gregorian_to_jalali+0x1cc>)
 8001bc4:	fb81 0103 	smull	r0, r1, r1, r3
 8001bc8:	1149      	asrs	r1, r1, #5
 8001bca:	17db      	asrs	r3, r3, #31
 8001bcc:	1a5b      	subs	r3, r3, r1
 8001bce:	441a      	add	r2, r3
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd2:	f203 138f 	addw	r3, r3, #399	@ 0x18f
 8001bd6:	4957      	ldr	r1, [pc, #348]	@ (8001d34 <gregorian_to_jalali+0x1cc>)
 8001bd8:	fb81 0103 	smull	r0, r1, r1, r3
 8001bdc:	11c9      	asrs	r1, r1, #7
 8001bde:	17db      	asrs	r3, r3, #31
 8001be0:	1acb      	subs	r3, r1, r3
 8001be2:	441a      	add	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	441a      	add	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	3350      	adds	r3, #80	@ 0x50
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  long jy = -1595 + (33 * ((int)(days / 12053)));
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d38 <gregorian_to_jalali+0x1d0>)
 8001bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8001c02:	12d2      	asrs	r2, r2, #11
 8001c04:	17db      	asrs	r3, r3, #31
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	4613      	mov	r3, r2
 8001c0a:	015b      	lsls	r3, r3, #5
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f2a3 633b 	subw	r3, r3, #1595	@ 0x63b
 8001c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  days %= 12053;
 8001c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c16:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <gregorian_to_jalali+0x1d0>)
 8001c18:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1c:	12d1      	asrs	r1, r2, #11
 8001c1e:	17da      	asrs	r2, r3, #31
 8001c20:	1a8a      	subs	r2, r1, r2
 8001c22:	f642 7115 	movw	r1, #12053	@ 0x2f15
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  jy += 4 * ((int)(days / 1461));
 8001c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c30:	4a42      	ldr	r2, [pc, #264]	@ (8001d3c <gregorian_to_jalali+0x1d4>)
 8001c32:	fb82 1203 	smull	r1, r2, r2, r3
 8001c36:	11d2      	asrs	r2, r2, #7
 8001c38:	17db      	asrs	r3, r3, #31
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c40:	4413      	add	r3, r2
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
  days %= 1461;
 8001c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c46:	4a3d      	ldr	r2, [pc, #244]	@ (8001d3c <gregorian_to_jalali+0x1d4>)
 8001c48:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4c:	11d1      	asrs	r1, r2, #7
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	f240 51b5 	movw	r1, #1461	@ 0x5b5
 8001c56:	fb01 f202 	mul.w	r2, r1, r2
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (days > 365) {
 8001c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c60:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8001c64:	db1a      	blt.n	8001c9c <gregorian_to_jalali+0x134>
    jy += (int)((days - 1) / 365);
 8001c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4a35      	ldr	r2, [pc, #212]	@ (8001d40 <gregorian_to_jalali+0x1d8>)
 8001c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c70:	441a      	add	r2, r3
 8001c72:	1212      	asrs	r2, r2, #8
 8001c74:	17db      	asrs	r3, r3, #31
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c7a:	4413      	add	r3, r2
 8001c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    days = (days - 1) % 365;
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c80:	3b01      	subs	r3, #1
 8001c82:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <gregorian_to_jalali+0x1d8>)
 8001c84:	fb82 1203 	smull	r1, r2, r2, r3
 8001c88:	441a      	add	r2, r3
 8001c8a:	1211      	asrs	r1, r2, #8
 8001c8c:	17da      	asrs	r2, r3, #31
 8001c8e:	1a8a      	subs	r2, r1, r2
 8001c90:	f240 116d 	movw	r1, #365	@ 0x16d
 8001c94:	fb01 f202 	mul.w	r2, r1, r2
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  out[0] = jy;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ca0:	601a      	str	r2, [r3, #0]
  if (days < 186) {
 8001ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca4:	2bb9      	cmp	r3, #185	@ 0xb9
 8001ca6:	dc1c      	bgt.n	8001ce2 <gregorian_to_jalali+0x17a>
    out[1]/*jm*/ = 1 + (int)(days / 31);
 8001ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001caa:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <gregorian_to_jalali+0x1dc>)
 8001cac:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	1112      	asrs	r2, r2, #4
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1ad2      	subs	r2, r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    out[2]/*jd*/ = 1 + (days % 31);
 8001cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <gregorian_to_jalali+0x1dc>)
 8001cc4:	fb83 1302 	smull	r1, r3, r3, r2
 8001cc8:	4413      	add	r3, r2
 8001cca:	1119      	asrs	r1, r3, #4
 8001ccc:	17d3      	asrs	r3, r2, #31
 8001cce:	1ac9      	subs	r1, r1, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	1ad1      	subs	r1, r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	1c4a      	adds	r2, r1, #1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e01f      	b.n	8001d22 <gregorian_to_jalali+0x1ba>
  } else {
    out[1]/*jm*/ = 7 + (int)((days - 186) / 30);
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce4:	3bba      	subs	r3, #186	@ 0xba
 8001ce6:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <gregorian_to_jalali+0x1e0>)
 8001ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cec:	441a      	add	r2, r3
 8001cee:	1112      	asrs	r2, r2, #4
 8001cf0:	17db      	asrs	r3, r3, #31
 8001cf2:	1ad2      	subs	r2, r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	3207      	adds	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
    out[2]/*jd*/ = 1 + ((days - 186) % 30);
 8001cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cfe:	f1a3 02ba 	sub.w	r2, r3, #186	@ 0xba
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <gregorian_to_jalali+0x1e0>)
 8001d04:	fb83 1302 	smull	r1, r3, r3, r2
 8001d08:	4413      	add	r3, r2
 8001d0a:	1119      	asrs	r1, r3, #4
 8001d0c:	17d3      	asrs	r3, r2, #31
 8001d0e:	1ac9      	subs	r1, r1, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a5b      	subs	r3, r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	1ad1      	subs	r1, r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	1c4a      	adds	r2, r1, #1
 8001d20:	601a      	str	r2, [r3, #0]
  }
  return out;
 8001d22:	683b      	ldr	r3, [r7, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3754      	adds	r7, #84	@ 0x54
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bcb0      	pop	{r4, r5, r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	080062f8 	.word	0x080062f8
 8001d34:	51eb851f 	.word	0x51eb851f
 8001d38:	2b7fa0d9 	.word	0x2b7fa0d9
 8001d3c:	166db073 	.word	0x166db073
 8001d40:	b38cf9b1 	.word	0xb38cf9b1
 8001d44:	84210843 	.word	0x84210843
 8001d48:	88888889 	.word	0x88888889

08001d4c <jalali_to_gregorian>:

long *jalali_to_gregorian(long jy, long jm, long jd, long out[]) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b097      	sub	sp, #92	@ 0x5c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  jy += 1595;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f203 633b 	addw	r3, r3, #1595	@ 0x63b
 8001d60:	60fb      	str	r3, [r7, #12]
  long days = -355668 + (365 * jy) + (((int)(jy / 33)) * 8) + ((int)(((jy % 33) + 3) / 4)) + jd + ((jm < 7) ? (jm - 1) * 31 : ((jm - 7) * 30) + 186);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f240 126d 	movw	r2, #365	@ 0x16d
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	f5a3 23ad 	sub.w	r3, r3, #354304	@ 0x56800
 8001d70:	f2a3 5354 	subw	r3, r3, #1364	@ 0x554
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4989      	ldr	r1, [pc, #548]	@ (8001f9c <jalali_to_gregorian+0x250>)
 8001d78:	fb81 0102 	smull	r0, r1, r1, r2
 8001d7c:	10c9      	asrs	r1, r1, #3
 8001d7e:	17d2      	asrs	r2, r2, #31
 8001d80:	1a8a      	subs	r2, r1, r2
 8001d82:	00d2      	lsls	r2, r2, #3
 8001d84:	1898      	adds	r0, r3, r2
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	4b84      	ldr	r3, [pc, #528]	@ (8001f9c <jalali_to_gregorian+0x250>)
 8001d8a:	fb83 2301 	smull	r2, r3, r3, r1
 8001d8e:	10da      	asrs	r2, r3, #3
 8001d90:	17cb      	asrs	r3, r1, #31
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	4613      	mov	r3, r2
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	4413      	add	r3, r2
 8001d9a:	1aca      	subs	r2, r1, r3
 8001d9c:	1cd3      	adds	r3, r2, #3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da00      	bge.n	8001da4 <jalali_to_gregorian+0x58>
 8001da2:	3303      	adds	r3, #3
 8001da4:	109b      	asrs	r3, r3, #2
 8001da6:	18c2      	adds	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	18d1      	adds	r1, r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	dc05      	bgt.n	8001dbe <jalali_to_gregorian+0x72>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	4613      	mov	r3, r2
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	e006      	b.n	8001dcc <jalali_to_gregorian+0x80>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1fda      	subs	r2, r3, #7
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	33ba      	adds	r3, #186	@ 0xba
 8001dcc:	440b      	add	r3, r1
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
  long gy = 400 * ((int)(days / 146097));
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd2:	4a73      	ldr	r2, [pc, #460]	@ (8001fa0 <jalali_to_gregorian+0x254>)
 8001dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd8:	13d2      	asrs	r2, r2, #15
 8001dda:	17db      	asrs	r3, r3, #31
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	653b      	str	r3, [r7, #80]	@ 0x50
  days %= 146097;
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	4a6d      	ldr	r2, [pc, #436]	@ (8001fa0 <jalali_to_gregorian+0x254>)
 8001dec:	fb82 1203 	smull	r1, r2, r2, r3
 8001df0:	13d1      	asrs	r1, r2, #15
 8001df2:	17da      	asrs	r2, r3, #31
 8001df4:	1a8a      	subs	r2, r1, r2
 8001df6:	496b      	ldr	r1, [pc, #428]	@ (8001fa4 <jalali_to_gregorian+0x258>)
 8001df8:	fb01 f202 	mul.w	r2, r1, r2
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (days > 36524) {
 8001e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e02:	f648 62ac 	movw	r2, #36524	@ 0x8eac
 8001e06:	4293      	cmp	r3, r2
 8001e08:	dd25      	ble.n	8001e56 <jalali_to_gregorian+0x10a>
    gy += 100 * ((int)(--days / 36524));
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e12:	4a65      	ldr	r2, [pc, #404]	@ (8001fa8 <jalali_to_gregorian+0x25c>)
 8001e14:	fb82 1203 	smull	r1, r2, r2, r3
 8001e18:	441a      	add	r2, r3
 8001e1a:	13d2      	asrs	r2, r2, #15
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2264      	movs	r2, #100	@ 0x64
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e28:	4413      	add	r3, r2
 8001e2a:	653b      	str	r3, [r7, #80]	@ 0x50
    days %= 36524;
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa8 <jalali_to_gregorian+0x25c>)
 8001e30:	fb82 1203 	smull	r1, r2, r2, r3
 8001e34:	441a      	add	r2, r3
 8001e36:	13d1      	asrs	r1, r2, #15
 8001e38:	17da      	asrs	r2, r3, #31
 8001e3a:	1a8a      	subs	r2, r1, r2
 8001e3c:	f648 61ac 	movw	r1, #36524	@ 0x8eac
 8001e40:	fb01 f202 	mul.w	r2, r1, r2
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	657b      	str	r3, [r7, #84]	@ 0x54
    if (days >= 365) days++;
 8001e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4a:	f5b3 7fb6 	cmp.w	r3, #364	@ 0x16c
 8001e4e:	dd02      	ble.n	8001e56 <jalali_to_gregorian+0x10a>
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	3301      	adds	r3, #1
 8001e54:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  gy += 4 * ((int)(days / 1461));
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	4a54      	ldr	r2, [pc, #336]	@ (8001fac <jalali_to_gregorian+0x260>)
 8001e5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e5e:	11d2      	asrs	r2, r2, #7
 8001e60:	17db      	asrs	r3, r3, #31
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e68:	4413      	add	r3, r2
 8001e6a:	653b      	str	r3, [r7, #80]	@ 0x50
  days %= 1461;
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	4a4f      	ldr	r2, [pc, #316]	@ (8001fac <jalali_to_gregorian+0x260>)
 8001e70:	fb82 1203 	smull	r1, r2, r2, r3
 8001e74:	11d1      	asrs	r1, r2, #7
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	1a8a      	subs	r2, r1, r2
 8001e7a:	f240 51b5 	movw	r1, #1461	@ 0x5b5
 8001e7e:	fb01 f202 	mul.w	r2, r1, r2
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (days > 365) {
 8001e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e88:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8001e8c:	db1a      	blt.n	8001ec4 <jalali_to_gregorian+0x178>
    gy += (int)((days - 1) / 365);
 8001e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e90:	3b01      	subs	r3, #1
 8001e92:	4a47      	ldr	r2, [pc, #284]	@ (8001fb0 <jalali_to_gregorian+0x264>)
 8001e94:	fb82 1203 	smull	r1, r2, r2, r3
 8001e98:	441a      	add	r2, r3
 8001e9a:	1212      	asrs	r2, r2, #8
 8001e9c:	17db      	asrs	r3, r3, #31
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ea2:	4413      	add	r3, r2
 8001ea4:	653b      	str	r3, [r7, #80]	@ 0x50
    days = (days - 1) % 365;
 8001ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a41      	ldr	r2, [pc, #260]	@ (8001fb0 <jalali_to_gregorian+0x264>)
 8001eac:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb0:	441a      	add	r2, r3
 8001eb2:	1211      	asrs	r1, r2, #8
 8001eb4:	17da      	asrs	r2, r3, #31
 8001eb6:	1a8a      	subs	r2, r1, r2
 8001eb8:	f240 116d 	movw	r1, #365	@ 0x16d
 8001ebc:	fb01 f202 	mul.w	r2, r1, r2
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  long gd = days + 1;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  long gm;
  {
    long sal_a[13] = {0, 31, ((gy % 4 == 0 && gy % 100 != 0) || (gy % 400 == 0)) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	231f      	movs	r3, #31
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10c      	bne.n	8001ef6 <jalali_to_gregorian+0x1aa>
 8001edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ede:	4b35      	ldr	r3, [pc, #212]	@ (8001fb4 <jalali_to_gregorian+0x268>)
 8001ee0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee4:	1159      	asrs	r1, r3, #5
 8001ee6:	17d3      	asrs	r3, r2, #31
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	2164      	movs	r1, #100	@ 0x64
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <jalali_to_gregorian+0x1c6>
 8001ef6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <jalali_to_gregorian+0x268>)
 8001efa:	fb83 1302 	smull	r1, r3, r3, r2
 8001efe:	11d9      	asrs	r1, r3, #7
 8001f00:	17d3      	asrs	r3, r2, #31
 8001f02:	1acb      	subs	r3, r1, r3
 8001f04:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <jalali_to_gregorian+0x1ca>
 8001f12:	231d      	movs	r3, #29
 8001f14:	e000      	b.n	8001f18 <jalali_to_gregorian+0x1cc>
 8001f16:	231c      	movs	r3, #28
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	231f      	movs	r3, #31
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	231e      	movs	r3, #30
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	231f      	movs	r3, #31
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f26:	231e      	movs	r3, #30
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f2e:	231f      	movs	r3, #31
 8001f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f32:	231e      	movs	r3, #30
 8001f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f36:	231f      	movs	r3, #31
 8001f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f3a:	231e      	movs	r3, #30
 8001f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f3e:	231f      	movs	r3, #31
 8001f40:	647b      	str	r3, [r7, #68]	@ 0x44
    for (gm = 0; gm < 13 && gd > sal_a[gm]; gm++) gd -= sal_a[gm];
 8001f42:	2300      	movs	r3, #0
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f46:	e00b      	b.n	8001f60 <jalali_to_gregorian+0x214>
 8001f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3358      	adds	r3, #88	@ 0x58
 8001f4e:	443b      	add	r3, r7
 8001f50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	dc08      	bgt.n	8001f78 <jalali_to_gregorian+0x22c>
 8001f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	3358      	adds	r3, #88	@ 0x58
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dce7      	bgt.n	8001f48 <jalali_to_gregorian+0x1fc>
  }
  out[0] = gy;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f7c:	601a      	str	r2, [r3, #0]
  out[1] = gm;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3304      	adds	r3, #4
 8001f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f84:	601a      	str	r2, [r3, #0]
  out[2] = gd;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3308      	adds	r3, #8
 8001f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f8c:	601a      	str	r2, [r3, #0]
  return out;
 8001f8e:	683b      	ldr	r3, [r7, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	375c      	adds	r7, #92	@ 0x5c
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	3e0f83e1 	.word	0x3e0f83e1
 8001fa0:	396b06bd 	.word	0x396b06bd
 8001fa4:	00023ab1 	.word	0x00023ab1
 8001fa8:	e5ac81fb 	.word	0xe5ac81fb
 8001fac:	166db073 	.word	0x166db073
 8001fb0:	b38cf9b1 	.word	0xb38cf9b1
 8001fb4:	51eb851f 	.word	0x51eb851f

08001fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int counter = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc2:	f000 fef7 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc6:	f000 fc19 	bl	80027fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fca:	f7ff fb87 	bl	80016dc <MX_GPIO_Init>
  MX_I2C2_Init();
 8001fce:	f7ff fc37 	bl	8001840 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001fd2:	f000 fd7b 	bl	8002acc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fd6:	f000 fdc5 	bl	8002b64 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001fda:	f000 fe51 	bl	8002c80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001fde:	4829      	ldr	r0, [pc, #164]	@ (8002084 <main+0xcc>)
 8001fe0:	f002 ff00 	bl	8004de4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001fe4:	4828      	ldr	r0, [pc, #160]	@ (8002088 <main+0xd0>)
 8001fe6:	f002 fefd 	bl	8004de4 <HAL_TIM_Base_Start_IT>
  DS3231_EnableSQW1Hz(&hi2c2);
 8001fea:	4828      	ldr	r0, [pc, #160]	@ (800208c <main+0xd4>)
 8001fec:	f7ff fda4 	bl	8001b38 <DS3231_EnableSQW1Hz>
  DS3231_ReadTime(&hi2c2,&time_Hour,&time_Minute,&time_Second);
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <main+0xd8>)
 8001ff2:	4a28      	ldr	r2, [pc, #160]	@ (8002094 <main+0xdc>)
 8001ff4:	4928      	ldr	r1, [pc, #160]	@ (8002098 <main+0xe0>)
 8001ff6:	4825      	ldr	r0, [pc, #148]	@ (800208c <main+0xd4>)
 8001ff8:	f7ff fcfd 	bl	80019f6 <DS3231_ReadTime>
  DS3231_ReadCalendar(&hi2c2,&gdate_Year,&gdate_Mounth,&gdate_Day,&gdate_Date);
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <main+0xe4>)
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <main+0xe8>)
 8002002:	4a28      	ldr	r2, [pc, #160]	@ (80020a4 <main+0xec>)
 8002004:	4928      	ldr	r1, [pc, #160]	@ (80020a8 <main+0xf0>)
 8002006:	4821      	ldr	r0, [pc, #132]	@ (800208c <main+0xd4>)
 8002008:	f7ff fd5d 	bl	8001ac6 <DS3231_ReadCalendar>
  gregorian_to_jalali(gdate_Year+2000,gdate_Mounth,gdate_Day,jalali_Calender);
 800200c:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <main+0xf0>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f503 60fa 	add.w	r0, r3, #2000	@ 0x7d0
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <main+0xec>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <main+0xe8>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b22      	ldr	r3, [pc, #136]	@ (80020ac <main+0xf4>)
 8002022:	f7ff fda1 	bl	8001b68 <gregorian_to_jalali>
  if(jalali_Calender[0] > 1400)     pdate_Year = jalali_Calender[0] - 1400;
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <main+0xf4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 800202e:	dd07      	ble.n	8002040 <main+0x88>
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <main+0xf4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <main+0xf8>)
 800203e:	801a      	strh	r2, [r3, #0]
  pdate_Mounth = jalali_Calender[1];
 8002040:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <main+0xf4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <main+0xfc>)
 8002048:	801a      	strh	r2, [r3, #0]
  pdate_Day = jalali_Calender[2];
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <main+0xf4>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <main+0x100>)
 8002052:	801a      	strh	r2, [r3, #0]
  sprintf(numarray, "%02d%02d%02d\r\n", pdate_Year,pdate_Mounth,pdate_Day);
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <main+0xf8>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <main+0xfc>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <main+0x100>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	460b      	mov	r3, r1
 8002068:	4914      	ldr	r1, [pc, #80]	@ (80020bc <main+0x104>)
 800206a:	4815      	ldr	r0, [pc, #84]	@ (80020c0 <main+0x108>)
 800206c:	f003 fc88 	bl	8005980 <siprintf>
  HAL_UART_Transmit(&huart2, numarray, 8 , HAL_MAX_DELAY);
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	2208      	movs	r2, #8
 8002076:	4912      	ldr	r1, [pc, #72]	@ (80020c0 <main+0x108>)
 8002078:	4812      	ldr	r0, [pc, #72]	@ (80020c4 <main+0x10c>)
 800207a:	f003 faad 	bl	80055d8 <HAL_UART_Transmit>
  for (int i = 0; i < 10; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	e055      	b.n	8002130 <main+0x178>
 8002084:	20000178 	.word	0x20000178
 8002088:	200001c0 	.word	0x200001c0
 800208c:	200000dc 	.word	0x200000dc
 8002090:	20000132 	.word	0x20000132
 8002094:	20000131 	.word	0x20000131
 8002098:	20000130 	.word	0x20000130
 800209c:	2000013a 	.word	0x2000013a
 80020a0:	20000138 	.word	0x20000138
 80020a4:	20000136 	.word	0x20000136
 80020a8:	20000134 	.word	0x20000134
 80020ac:	20000150 	.word	0x20000150
 80020b0:	2000013c 	.word	0x2000013c
 80020b4:	2000013e 	.word	0x2000013e
 80020b8:	20000140 	.word	0x20000140
 80020bc:	08006328 	.word	0x08006328
 80020c0:	20000168 	.word	0x20000168
 80020c4:	20000208 	.word	0x20000208
  {
    Segment_Set(0,i);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff faf0 	bl	80016b4 <Segment_Set>
    Segment_Set(1,i);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4619      	mov	r1, r3
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff faea 	bl	80016b4 <Segment_Set>
    Segment_Set(2,i);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	2002      	movs	r0, #2
 80020e8:	f7ff fae4 	bl	80016b4 <Segment_Set>
    Segment_Set(3,i);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	2003      	movs	r0, #3
 80020f4:	f7ff fade 	bl	80016b4 <Segment_Set>
    Segment_Set(4,i);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff fad8 	bl	80016b4 <Segment_Set>
    Segment_Set(5,i);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	2005      	movs	r0, #5
 800210c:	f7ff fad2 	bl	80016b4 <Segment_Set>
    HAL_Delay(200);
 8002110:	20c8      	movs	r0, #200	@ 0xc8
 8002112:	f000 feb1 	bl	8002e78 <HAL_Delay>
    HAL_GPIO_WritePin(blinky_Point,HIGH);
 8002116:	2201      	movs	r2, #1
 8002118:	2110      	movs	r1, #16
 800211a:	48a4      	ldr	r0, [pc, #656]	@ (80023ac <main+0x3f4>)
 800211c:	f001 f962 	bl	80033e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(date_Point,HIGH);
 8002120:	2201      	movs	r2, #1
 8002122:	2101      	movs	r1, #1
 8002124:	48a2      	ldr	r0, [pc, #648]	@ (80023b0 <main+0x3f8>)
 8002126:	f001 f95d 	bl	80033e4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3301      	adds	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b09      	cmp	r3, #9
 8002134:	ddc8      	ble.n	80020c8 <main+0x110>
  }
  HAL_GPIO_WritePin(blinky_Point,LOW);
 8002136:	2200      	movs	r2, #0
 8002138:	2110      	movs	r1, #16
 800213a:	489c      	ldr	r0, [pc, #624]	@ (80023ac <main+0x3f4>)
 800213c:	f001 f952 	bl	80033e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(date_Point,LOW);
 8002140:	2200      	movs	r2, #0
 8002142:	2101      	movs	r1, #1
 8002144:	489a      	ldr	r0, [pc, #616]	@ (80023b0 <main+0x3f8>)
 8002146:	f001 f94d 	bl	80033e4 <HAL_GPIO_WritePin>
  Segment_Set(0,'U');Segment_Set(1,'L');Segment_Set(2,0);Segment_Set(3,2);Segment_Set(4,'N');Segment_Set(5,'N');
 800214a:	2155      	movs	r1, #85	@ 0x55
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fab1 	bl	80016b4 <Segment_Set>
 8002152:	214c      	movs	r1, #76	@ 0x4c
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff faad 	bl	80016b4 <Segment_Set>
 800215a:	2100      	movs	r1, #0
 800215c:	2002      	movs	r0, #2
 800215e:	f7ff faa9 	bl	80016b4 <Segment_Set>
 8002162:	2102      	movs	r1, #2
 8002164:	2003      	movs	r0, #3
 8002166:	f7ff faa5 	bl	80016b4 <Segment_Set>
 800216a:	214e      	movs	r1, #78	@ 0x4e
 800216c:	2004      	movs	r0, #4
 800216e:	f7ff faa1 	bl	80016b4 <Segment_Set>
 8002172:	214e      	movs	r1, #78	@ 0x4e
 8002174:	2005      	movs	r0, #5
 8002176:	f7ff fa9d 	bl	80016b4 <Segment_Set>
  HAL_Delay(1000);
 800217a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800217e:	f000 fe7b 	bl	8002e78 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
  
    if(work_Mode == MODE_NORMAL)
 8002182:	4b8c      	ldr	r3, [pc, #560]	@ (80023b4 <main+0x3fc>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b52      	cmp	r3, #82	@ 0x52
 8002188:	f040 80c0 	bne.w	800230c <main+0x354>
    {
      HAL_GPIO_WritePin(blinky_Point,HIGH);
 800218c:	2201      	movs	r2, #1
 800218e:	2110      	movs	r1, #16
 8002190:	4886      	ldr	r0, [pc, #536]	@ (80023ac <main+0x3f4>)
 8002192:	f001 f927 	bl	80033e4 <HAL_GPIO_WritePin>
      Segment_Set(0,time_Hour/10);
 8002196:	4b88      	ldr	r3, [pc, #544]	@ (80023b8 <main+0x400>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4a88      	ldr	r2, [pc, #544]	@ (80023bc <main+0x404>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fa84 	bl	80016b4 <Segment_Set>
      Segment_Set(1,time_Hour%10);
 80021ac:	4b82      	ldr	r3, [pc, #520]	@ (80023b8 <main+0x400>)
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	4b82      	ldr	r3, [pc, #520]	@ (80023bc <main+0x404>)
 80021b2:	fba3 1302 	umull	r1, r3, r3, r2
 80021b6:	08d9      	lsrs	r1, r3, #3
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4619      	mov	r1, r3
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff fa74 	bl	80016b4 <Segment_Set>
      Segment_Set(2,time_Minute/10);
 80021cc:	4b7c      	ldr	r3, [pc, #496]	@ (80023c0 <main+0x408>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4a7a      	ldr	r2, [pc, #488]	@ (80023bc <main+0x404>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	08db      	lsrs	r3, r3, #3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4619      	mov	r1, r3
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff fa69 	bl	80016b4 <Segment_Set>
      Segment_Set(3,time_Minute%10);
 80021e2:	4b77      	ldr	r3, [pc, #476]	@ (80023c0 <main+0x408>)
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	4b75      	ldr	r3, [pc, #468]	@ (80023bc <main+0x404>)
 80021e8:	fba3 1302 	umull	r1, r3, r3, r2
 80021ec:	08d9      	lsrs	r1, r3, #3
 80021ee:	460b      	mov	r3, r1
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	2003      	movs	r0, #3
 80021fe:	f7ff fa59 	bl	80016b4 <Segment_Set>
      Segment_Set(4,time_Second/10);
 8002202:	4b70      	ldr	r3, [pc, #448]	@ (80023c4 <main+0x40c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4a6d      	ldr	r2, [pc, #436]	@ (80023bc <main+0x404>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	2004      	movs	r0, #4
 8002214:	f7ff fa4e 	bl	80016b4 <Segment_Set>
      Segment_Set(5,time_Second%10);
 8002218:	4b6a      	ldr	r3, [pc, #424]	@ (80023c4 <main+0x40c>)
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	4b67      	ldr	r3, [pc, #412]	@ (80023bc <main+0x404>)
 800221e:	fba3 1302 	umull	r1, r3, r3, r2
 8002222:	08d9      	lsrs	r1, r3, #3
 8002224:	460b      	mov	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	2005      	movs	r0, #5
 8002234:	f7ff fa3e 	bl	80016b4 <Segment_Set>
      Segment_Set(6,date_Week);
 8002238:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <main+0x410>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	2006      	movs	r0, #6
 8002240:	f7ff fa38 	bl	80016b4 <Segment_Set>

      if((send_Flag == 1))
 8002244:	4b61      	ldr	r3, [pc, #388]	@ (80023cc <main+0x414>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d14b      	bne.n	80022e4 <main+0x32c>
      {

        send_Flag = 0;
 800224c:	4b5f      	ldr	r3, [pc, #380]	@ (80023cc <main+0x414>)
 800224e:	2200      	movs	r2, #0
 8002250:	701a      	strb	r2, [r3, #0]
        DS3231_ReadCalendar(&hi2c2,&gdate_Year,&gdate_Mounth,&gdate_Day,&gdate_Date);
 8002252:	4b5f      	ldr	r3, [pc, #380]	@ (80023d0 <main+0x418>)
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4b5f      	ldr	r3, [pc, #380]	@ (80023d4 <main+0x41c>)
 8002258:	4a5f      	ldr	r2, [pc, #380]	@ (80023d8 <main+0x420>)
 800225a:	4960      	ldr	r1, [pc, #384]	@ (80023dc <main+0x424>)
 800225c:	4860      	ldr	r0, [pc, #384]	@ (80023e0 <main+0x428>)
 800225e:	f7ff fc32 	bl	8001ac6 <DS3231_ReadCalendar>
        gregorian_to_jalali(gdate_Year+2000,gdate_Mounth,gdate_Day,jalali_Calender);
 8002262:	4b5e      	ldr	r3, [pc, #376]	@ (80023dc <main+0x424>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	f503 60fa 	add.w	r0, r3, #2000	@ 0x7d0
 800226a:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <main+0x420>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	4b58      	ldr	r3, [pc, #352]	@ (80023d4 <main+0x41c>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b5b      	ldr	r3, [pc, #364]	@ (80023e4 <main+0x42c>)
 8002278:	f7ff fc76 	bl	8001b68 <gregorian_to_jalali>
        pdate_Year = jalali_Calender[0] - 1400;
 800227c:	4b59      	ldr	r3, [pc, #356]	@ (80023e4 <main+0x42c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	f5a3 63af 	sub.w	r3, r3, #1400	@ 0x578
 8002286:	b29a      	uxth	r2, r3
 8002288:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <main+0x430>)
 800228a:	801a      	strh	r2, [r3, #0]
        pdate_Mounth = jalali_Calender[1];
 800228c:	4b55      	ldr	r3, [pc, #340]	@ (80023e4 <main+0x42c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b56      	ldr	r3, [pc, #344]	@ (80023ec <main+0x434>)
 8002294:	801a      	strh	r2, [r3, #0]
        pdate_Day = jalali_Calender[2];
 8002296:	4b53      	ldr	r3, [pc, #332]	@ (80023e4 <main+0x42c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <main+0x438>)
 800229e:	801a      	strh	r2, [r3, #0]

        if(pdate_Year > 99)   pdate_Year = 0;
 80022a0:	4b51      	ldr	r3, [pc, #324]	@ (80023e8 <main+0x430>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	2b63      	cmp	r3, #99	@ 0x63
 80022a6:	d902      	bls.n	80022ae <main+0x2f6>
 80022a8:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <main+0x430>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]
        sprintf(numarray, "%02d%02d%02d\r\n", pdate_Year,pdate_Mounth,pdate_Day);
 80022ae:	4b4e      	ldr	r3, [pc, #312]	@ (80023e8 <main+0x430>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b4d      	ldr	r3, [pc, #308]	@ (80023ec <main+0x434>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <main+0x438>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	460b      	mov	r3, r1
 80022c2:	494c      	ldr	r1, [pc, #304]	@ (80023f4 <main+0x43c>)
 80022c4:	484c      	ldr	r0, [pc, #304]	@ (80023f8 <main+0x440>)
 80022c6:	f003 fb5b 	bl	8005980 <siprintf>
        HAL_UART_Transmit(&huart2, numarray, 8 , HAL_MAX_DELAY);
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	2208      	movs	r2, #8
 80022d0:	4949      	ldr	r1, [pc, #292]	@ (80023f8 <main+0x440>)
 80022d2:	484a      	ldr	r0, [pc, #296]	@ (80023fc <main+0x444>)
 80022d4:	f003 f980 	bl	80055d8 <HAL_UART_Transmit>
        DS3231_ReadTime(&hi2c2,&time_Hour,&time_Minute,&time_Second);
 80022d8:	4b3a      	ldr	r3, [pc, #232]	@ (80023c4 <main+0x40c>)
 80022da:	4a39      	ldr	r2, [pc, #228]	@ (80023c0 <main+0x408>)
 80022dc:	4936      	ldr	r1, [pc, #216]	@ (80023b8 <main+0x400>)
 80022de:	4840      	ldr	r0, [pc, #256]	@ (80023e0 <main+0x428>)
 80022e0:	f7ff fb89 	bl	80019f6 <DS3231_ReadTime>

      }
      

      irRemote = Ir_GetData();
 80022e4:	f7fe fc12 	bl	8000b0c <Ir_GetData>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b44      	ldr	r3, [pc, #272]	@ (8002400 <main+0x448>)
 80022ee:	801a      	strh	r2, [r3, #0]
      if(irRemote != 0)
 80022f0:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <main+0x448>)
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f43f af44 	beq.w	8002182 <main+0x1ca>
      {
        Haamin_Remote(irRemote, work_Mode);
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <main+0x448>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	4a2d      	ldr	r2, [pc, #180]	@ (80023b4 <main+0x3fc>)
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7fd ff21 	bl	800014c <Haamin_Remote>
 800230a:	e73a      	b.n	8002182 <main+0x1ca>
      }

    }
    else if(work_Mode == TIME_SETTING)
 800230c:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <main+0x3fc>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b54      	cmp	r3, #84	@ 0x54
 8002312:	f040 80db 	bne.w	80024cc <main+0x514>
    {
      if(time_Mode == SET_HOUR)
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <main+0x44c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b48      	cmp	r3, #72	@ 0x48
 800231c:	d178      	bne.n	8002410 <main+0x458>
      {

        Segment_Set(2,time_Minute_t/10);
 800231e:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <main+0x450>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4a26      	ldr	r2, [pc, #152]	@ (80023bc <main+0x404>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4619      	mov	r1, r3
 800232e:	2002      	movs	r0, #2
 8002330:	f7ff f9c0 	bl	80016b4 <Segment_Set>
        Segment_Set(3,time_Minute_t%10);
 8002334:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <main+0x450>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b20      	ldr	r3, [pc, #128]	@ (80023bc <main+0x404>)
 800233a:	fba3 1302 	umull	r1, r3, r3, r2
 800233e:	08d9      	lsrs	r1, r3, #3
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	2003      	movs	r0, #3
 8002350:	f7ff f9b0 	bl	80016b4 <Segment_Set>

        if(time_Second%2 == 0)
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <main+0x40c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11b      	bne.n	800239a <main+0x3e2>
        {
          Segment_Set(0,timeValue/10);
 8002362:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <main+0x454>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4a15      	ldr	r2, [pc, #84]	@ (80023bc <main+0x404>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4619      	mov	r1, r3
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff f99e 	bl	80016b4 <Segment_Set>
          Segment_Set(1,timeValue%10);
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <main+0x454>)
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <main+0x404>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	08d9      	lsrs	r1, r3, #3
 8002384:	460b      	mov	r3, r1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff f98e 	bl	80016b4 <Segment_Set>
 8002398:	e084      	b.n	80024a4 <main+0x4ec>
        }
        else
        {
          Segment_Set(0,'N');
 800239a:	214e      	movs	r1, #78	@ 0x4e
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f989 	bl	80016b4 <Segment_Set>
          Segment_Set(1,'N');
 80023a2:	214e      	movs	r1, #78	@ 0x4e
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7ff f985 	bl	80016b4 <Segment_Set>
 80023aa:	e07b      	b.n	80024a4 <main+0x4ec>
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	20000001 	.word	0x20000001
 80023b8:	20000130 	.word	0x20000130
 80023bc:	cccccccd 	.word	0xcccccccd
 80023c0:	20000131 	.word	0x20000131
 80023c4:	20000132 	.word	0x20000132
 80023c8:	20000004 	.word	0x20000004
 80023cc:	2000014c 	.word	0x2000014c
 80023d0:	2000013a 	.word	0x2000013a
 80023d4:	20000138 	.word	0x20000138
 80023d8:	20000136 	.word	0x20000136
 80023dc:	20000134 	.word	0x20000134
 80023e0:	200000dc 	.word	0x200000dc
 80023e4:	20000150 	.word	0x20000150
 80023e8:	2000013c 	.word	0x2000013c
 80023ec:	2000013e 	.word	0x2000013e
 80023f0:	20000140 	.word	0x20000140
 80023f4:	08006328 	.word	0x08006328
 80023f8:	20000168 	.word	0x20000168
 80023fc:	20000208 	.word	0x20000208
 8002400:	2000014a 	.word	0x2000014a
 8002404:	20000002 	.word	0x20000002
 8002408:	20000147 	.word	0x20000147
 800240c:	20000148 	.word	0x20000148
        }

      }
      else if(time_Mode == SET_MIN)
 8002410:	4b9c      	ldr	r3, [pc, #624]	@ (8002684 <main+0x6cc>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b4d      	cmp	r3, #77	@ 0x4d
 8002416:	d145      	bne.n	80024a4 <main+0x4ec>
      {
        Segment_Set(0,time_Hour_t/10);
 8002418:	4b9b      	ldr	r3, [pc, #620]	@ (8002688 <main+0x6d0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4a9b      	ldr	r2, [pc, #620]	@ (800268c <main+0x6d4>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	08db      	lsrs	r3, r3, #3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4619      	mov	r1, r3
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff f943 	bl	80016b4 <Segment_Set>
        Segment_Set(1,time_Hour_t%10);
 800242e:	4b96      	ldr	r3, [pc, #600]	@ (8002688 <main+0x6d0>)
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	4b96      	ldr	r3, [pc, #600]	@ (800268c <main+0x6d4>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	08d9      	lsrs	r1, r3, #3
 800243a:	460b      	mov	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff f933 	bl	80016b4 <Segment_Set>
        
        if(time_Second%2 == 0)
 800244e:	4b90      	ldr	r3, [pc, #576]	@ (8002690 <main+0x6d8>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11b      	bne.n	8002494 <main+0x4dc>
        {
          Segment_Set(2,timeValue/10);
 800245c:	4b8d      	ldr	r3, [pc, #564]	@ (8002694 <main+0x6dc>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4a8a      	ldr	r2, [pc, #552]	@ (800268c <main+0x6d4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4619      	mov	r1, r3
 800246c:	2002      	movs	r0, #2
 800246e:	f7ff f921 	bl	80016b4 <Segment_Set>
          Segment_Set(3,timeValue%10);
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <main+0x6dc>)
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	4b85      	ldr	r3, [pc, #532]	@ (800268c <main+0x6d4>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	08d9      	lsrs	r1, r3, #3
 800247e:	460b      	mov	r3, r1
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	2003      	movs	r0, #3
 800248e:	f7ff f911 	bl	80016b4 <Segment_Set>
 8002492:	e007      	b.n	80024a4 <main+0x4ec>
        }
        else
        {
          Segment_Set(2,'N');
 8002494:	214e      	movs	r1, #78	@ 0x4e
 8002496:	2002      	movs	r0, #2
 8002498:	f7ff f90c 	bl	80016b4 <Segment_Set>
          Segment_Set(3,'N');
 800249c:	214e      	movs	r1, #78	@ 0x4e
 800249e:	2003      	movs	r0, #3
 80024a0:	f7ff f908 	bl	80016b4 <Segment_Set>
        }

      }

      irRemote = Ir_GetData();
 80024a4:	f7fe fb32 	bl	8000b0c <Ir_GetData>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002698 <main+0x6e0>)
 80024ae:	801a      	strh	r2, [r3, #0]
      if(irRemote != 0)
 80024b0:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <main+0x6e0>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f43f ae64 	beq.w	8002182 <main+0x1ca>
      {
        Haamin_Remote(irRemote, work_Mode);
 80024ba:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <main+0x6e0>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4a77      	ldr	r2, [pc, #476]	@ (800269c <main+0x6e4>)
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fd fe41 	bl	800014c <Haamin_Remote>
 80024ca:	e65a      	b.n	8002182 <main+0x1ca>
      }
    }
    else if(work_Mode == DATE_SETTING)
 80024cc:	4b73      	ldr	r3, [pc, #460]	@ (800269c <main+0x6e4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b44      	cmp	r3, #68	@ 0x44
 80024d2:	f47f ae56 	bne.w	8002182 <main+0x1ca>
    {
      HAL_GPIO_WritePin(blinky_Point,LOW);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2110      	movs	r1, #16
 80024da:	4871      	ldr	r0, [pc, #452]	@ (80026a0 <main+0x6e8>)
 80024dc:	f000 ff82 	bl	80033e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(date_Point,HIGH);
 80024e0:	2201      	movs	r2, #1
 80024e2:	2101      	movs	r1, #1
 80024e4:	486f      	ldr	r0, [pc, #444]	@ (80026a4 <main+0x6ec>)
 80024e6:	f000 ff7d 	bl	80033e4 <HAL_GPIO_WritePin>
      if(date_Mode == SET_YEAR)
 80024ea:	4b6f      	ldr	r3, [pc, #444]	@ (80026a8 <main+0x6f0>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b59      	cmp	r3, #89	@ 0x59
 80024f0:	d161      	bne.n	80025b6 <main+0x5fe>
      {
        Segment_Set(2,dateMounth_t/10);
 80024f2:	4b6e      	ldr	r3, [pc, #440]	@ (80026ac <main+0x6f4>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4a65      	ldr	r2, [pc, #404]	@ (800268c <main+0x6d4>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	4619      	mov	r1, r3
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff f8d6 	bl	80016b4 <Segment_Set>
        Segment_Set(3,dateMounth_t%10);
 8002508:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <main+0x6f4>)
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	4b5f      	ldr	r3, [pc, #380]	@ (800268c <main+0x6d4>)
 800250e:	fba3 1302 	umull	r1, r3, r3, r2
 8002512:	08d9      	lsrs	r1, r3, #3
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	2003      	movs	r0, #3
 8002524:	f7ff f8c6 	bl	80016b4 <Segment_Set>
        Segment_Set(4,dateDay_t/10);
 8002528:	4b61      	ldr	r3, [pc, #388]	@ (80026b0 <main+0x6f8>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4a57      	ldr	r2, [pc, #348]	@ (800268c <main+0x6d4>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	08db      	lsrs	r3, r3, #3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	4619      	mov	r1, r3
 8002538:	2004      	movs	r0, #4
 800253a:	f7ff f8bb 	bl	80016b4 <Segment_Set>
        Segment_Set(5,dateDay_t%10);
 800253e:	4b5c      	ldr	r3, [pc, #368]	@ (80026b0 <main+0x6f8>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	4b52      	ldr	r3, [pc, #328]	@ (800268c <main+0x6d4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	08d9      	lsrs	r1, r3, #3
 800254a:	460b      	mov	r3, r1
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	4619      	mov	r1, r3
 8002558:	2005      	movs	r0, #5
 800255a:	f7ff f8ab 	bl	80016b4 <Segment_Set>
        if(time_Second%2 == 0)
 800255e:	4b4c      	ldr	r3, [pc, #304]	@ (8002690 <main+0x6d8>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11b      	bne.n	80025a4 <main+0x5ec>
        {
          Segment_Set(0,dateValue/10);
 800256c:	4b51      	ldr	r3, [pc, #324]	@ (80026b4 <main+0x6fc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4a46      	ldr	r2, [pc, #280]	@ (800268c <main+0x6d4>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	4619      	mov	r1, r3
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff f899 	bl	80016b4 <Segment_Set>
          Segment_Set(1,dateValue%10);
 8002582:	4b4c      	ldr	r3, [pc, #304]	@ (80026b4 <main+0x6fc>)
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b41      	ldr	r3, [pc, #260]	@ (800268c <main+0x6d4>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	08d9      	lsrs	r1, r3, #3
 800258e:	460b      	mov	r3, r1
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff f889 	bl	80016b4 <Segment_Set>
 80025a2:	e107      	b.n	80027b4 <main+0x7fc>
        }
        else
        {
          Segment_Set(0,'N');
 80025a4:	214e      	movs	r1, #78	@ 0x4e
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7ff f884 	bl	80016b4 <Segment_Set>
          Segment_Set(1,'N');
 80025ac:	214e      	movs	r1, #78	@ 0x4e
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff f880 	bl	80016b4 <Segment_Set>
 80025b4:	e0fe      	b.n	80027b4 <main+0x7fc>
        }
      }
      else if(date_Mode == SET_MOTH)
 80025b6:	4b3c      	ldr	r3, [pc, #240]	@ (80026a8 <main+0x6f0>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b74      	cmp	r3, #116	@ 0x74
 80025bc:	d17e      	bne.n	80026bc <main+0x704>
      {
        Segment_Set(0,dateYear_t/10);
 80025be:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <main+0x700>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4a32      	ldr	r2, [pc, #200]	@ (800268c <main+0x6d4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff f870 	bl	80016b4 <Segment_Set>
        Segment_Set(1,dateYear_t%10);
 80025d4:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <main+0x700>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b2c      	ldr	r3, [pc, #176]	@ (800268c <main+0x6d4>)
 80025da:	fba3 1302 	umull	r1, r3, r3, r2
 80025de:	08d9      	lsrs	r1, r3, #3
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4619      	mov	r1, r3
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff f860 	bl	80016b4 <Segment_Set>

        Segment_Set(4,dateDay_t/10);
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <main+0x6f8>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <main+0x6d4>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	08db      	lsrs	r3, r3, #3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	2004      	movs	r0, #4
 8002606:	f7ff f855 	bl	80016b4 <Segment_Set>
        Segment_Set(5,dateDay_t%10);
 800260a:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <main+0x6f8>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <main+0x6d4>)
 8002610:	fba3 1302 	umull	r1, r3, r3, r2
 8002614:	08d9      	lsrs	r1, r3, #3
 8002616:	460b      	mov	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	2005      	movs	r0, #5
 8002626:	f7ff f845 	bl	80016b4 <Segment_Set>
        if(time_Second%2 == 0)
 800262a:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <main+0x6d8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d11b      	bne.n	8002670 <main+0x6b8>
        {
          Segment_Set(2,dateValue/10);
 8002638:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <main+0x6fc>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	@ (800268c <main+0x6d4>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	08db      	lsrs	r3, r3, #3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff f833 	bl	80016b4 <Segment_Set>
          Segment_Set(3,dateValue%10);
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <main+0x6fc>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <main+0x6d4>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	08d9      	lsrs	r1, r3, #3
 800265a:	460b      	mov	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4619      	mov	r1, r3
 8002668:	2003      	movs	r0, #3
 800266a:	f7ff f823 	bl	80016b4 <Segment_Set>
 800266e:	e0a1      	b.n	80027b4 <main+0x7fc>
        }
        else
        {
          Segment_Set(2,'N');
 8002670:	214e      	movs	r1, #78	@ 0x4e
 8002672:	2002      	movs	r0, #2
 8002674:	f7ff f81e 	bl	80016b4 <Segment_Set>
          Segment_Set(3,'N');
 8002678:	214e      	movs	r1, #78	@ 0x4e
 800267a:	2003      	movs	r0, #3
 800267c:	f7ff f81a 	bl	80016b4 <Segment_Set>
 8002680:	e098      	b.n	80027b4 <main+0x7fc>
 8002682:	bf00      	nop
 8002684:	20000002 	.word	0x20000002
 8002688:	20000146 	.word	0x20000146
 800268c:	cccccccd 	.word	0xcccccccd
 8002690:	20000132 	.word	0x20000132
 8002694:	20000148 	.word	0x20000148
 8002698:	2000014a 	.word	0x2000014a
 800269c:	20000001 	.word	0x20000001
 80026a0:	40010800 	.word	0x40010800
 80026a4:	40010c00 	.word	0x40010c00
 80026a8:	20000003 	.word	0x20000003
 80026ac:	20000143 	.word	0x20000143
 80026b0:	20000144 	.word	0x20000144
 80026b4:	2000014f 	.word	0x2000014f
 80026b8:	20000142 	.word	0x20000142
        }
      }
      else if(date_Mode == SET_DAY)
 80026bc:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <main+0x824>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b41      	cmp	r3, #65	@ 0x41
 80026c2:	d161      	bne.n	8002788 <main+0x7d0>
      {
        Segment_Set(0,dateYear_t/10);
 80026c4:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <main+0x828>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4a46      	ldr	r2, [pc, #280]	@ (80027e4 <main+0x82c>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4619      	mov	r1, r3
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe ffed 	bl	80016b4 <Segment_Set>
        Segment_Set(1,dateYear_t%10);
 80026da:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <main+0x828>)
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <main+0x82c>)
 80026e0:	fba3 1302 	umull	r1, r3, r3, r2
 80026e4:	08d9      	lsrs	r1, r3, #3
 80026e6:	460b      	mov	r3, r1
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7fe ffdd 	bl	80016b4 <Segment_Set>
        Segment_Set(2,dateMounth_t/10);
 80026fa:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <main+0x830>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4a39      	ldr	r2, [pc, #228]	@ (80027e4 <main+0x82c>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	4619      	mov	r1, r3
 800270a:	2002      	movs	r0, #2
 800270c:	f7fe ffd2 	bl	80016b4 <Segment_Set>
        Segment_Set(3,dateMounth_t%10);
 8002710:	4b35      	ldr	r3, [pc, #212]	@ (80027e8 <main+0x830>)
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	4b33      	ldr	r3, [pc, #204]	@ (80027e4 <main+0x82c>)
 8002716:	fba3 1302 	umull	r1, r3, r3, r2
 800271a:	08d9      	lsrs	r1, r3, #3
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	4619      	mov	r1, r3
 800272a:	2003      	movs	r0, #3
 800272c:	f7fe ffc2 	bl	80016b4 <Segment_Set>
        if(time_Second%2 == 0)
 8002730:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <main+0x834>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11b      	bne.n	8002776 <main+0x7be>
        {
          Segment_Set(4,dateValue/10);
 800273e:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <main+0x838>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4a28      	ldr	r2, [pc, #160]	@ (80027e4 <main+0x82c>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	08db      	lsrs	r3, r3, #3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	4619      	mov	r1, r3
 800274e:	2004      	movs	r0, #4
 8002750:	f7fe ffb0 	bl	80016b4 <Segment_Set>
          Segment_Set(5,dateValue%10);
 8002754:	4b26      	ldr	r3, [pc, #152]	@ (80027f0 <main+0x838>)
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <main+0x82c>)
 800275a:	fba3 1302 	umull	r1, r3, r3, r2
 800275e:	08d9      	lsrs	r1, r3, #3
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	2005      	movs	r0, #5
 8002770:	f7fe ffa0 	bl	80016b4 <Segment_Set>
 8002774:	e01e      	b.n	80027b4 <main+0x7fc>
        }
        else
        {
          Segment_Set(4,'N');
 8002776:	214e      	movs	r1, #78	@ 0x4e
 8002778:	2004      	movs	r0, #4
 800277a:	f7fe ff9b 	bl	80016b4 <Segment_Set>
          Segment_Set(5,'N');
 800277e:	214e      	movs	r1, #78	@ 0x4e
 8002780:	2005      	movs	r0, #5
 8002782:	f7fe ff97 	bl	80016b4 <Segment_Set>
 8002786:	e015      	b.n	80027b4 <main+0x7fc>
        }
      }
      else if(date_Mode == SET_DOW)
 8002788:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <main+0x824>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b42      	cmp	r3, #66	@ 0x42
 800278e:	d111      	bne.n	80027b4 <main+0x7fc>
      {
        
        if(time_Second%2 == 0)
 8002790:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <main+0x834>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <main+0x7f4>
        {
          Segment_Set(6,dateValue);
 800279e:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <main+0x838>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	2006      	movs	r0, #6
 80027a6:	f7fe ff85 	bl	80016b4 <Segment_Set>
 80027aa:	e003      	b.n	80027b4 <main+0x7fc>
        }
        else
        {
          Segment_Set(6,'N');
 80027ac:	214e      	movs	r1, #78	@ 0x4e
 80027ae:	2006      	movs	r0, #6
 80027b0:	f7fe ff80 	bl	80016b4 <Segment_Set>
        }
      }


      irRemote = Ir_GetData();
 80027b4:	f7fe f9aa 	bl	8000b0c <Ir_GetData>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <main+0x83c>)
 80027be:	801a      	strh	r2, [r3, #0]
      if(irRemote != 0)
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <main+0x83c>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f43f acdc 	beq.w	8002182 <main+0x1ca>
      {
        Haamin_Remote(irRemote, work_Mode);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	@ (80027f4 <main+0x83c>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <main+0x840>)
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fcb9 	bl	800014c <Haamin_Remote>
    if(work_Mode == MODE_NORMAL)
 80027da:	e4d2      	b.n	8002182 <main+0x1ca>
 80027dc:	20000003 	.word	0x20000003
 80027e0:	20000142 	.word	0x20000142
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	20000143 	.word	0x20000143
 80027ec:	20000132 	.word	0x20000132
 80027f0:	2000014f 	.word	0x2000014f
 80027f4:	2000014a 	.word	0x2000014a
 80027f8:	20000001 	.word	0x20000001

080027fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b090      	sub	sp, #64	@ 0x40
 8002800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002802:	f107 0318 	add.w	r3, r7, #24
 8002806:	2228      	movs	r2, #40	@ 0x28
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f003 f8d8 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281e:	2301      	movs	r3, #1
 8002820:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800282c:	2301      	movs	r3, #1
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002830:	2302      	movs	r3, #2
 8002832:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002838:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800283a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fe6d 	bl	8004524 <HAL_RCC_OscConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002850:	f000 f866 	bl	8002920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002854:	230f      	movs	r3, #15
 8002856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002858:	2302      	movs	r3, #2
 800285a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800286a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f002 f8d9 	bl	8004a28 <HAL_RCC_ClockConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800287c:	f000 f850 	bl	8002920 <Error_Handler>
  }
}
 8002880:	bf00      	nop
 8002882:	3740      	adds	r7, #64	@ 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <Time_Update>:

/* USER CODE BEGIN 4 */
void Time_Update(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  if(time_Second == 2)
 800288c:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <Time_Update+0x84>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d102      	bne.n	800289a <Time_Update+0x12>
  {
    send_Flag = 1;
 8002894:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <Time_Update+0x88>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
  }
  if(++time_Second > 59)
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <Time_Update+0x84>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <Time_Update+0x84>)
 80028a4:	701a      	strb	r2, [r3, #0]
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <Time_Update+0x84>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80028ac:	d91c      	bls.n	80028e8 <Time_Update+0x60>
  {
    time_Second = 0;
 80028ae:	4b17      	ldr	r3, [pc, #92]	@ (800290c <Time_Update+0x84>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    if(++time_Minute > 59)
 80028b4:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <Time_Update+0x8c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <Time_Update+0x8c>)
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <Time_Update+0x8c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80028c6:	d90f      	bls.n	80028e8 <Time_Update+0x60>
    {
      time_Minute = 0;
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <Time_Update+0x8c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
      if(++time_Hour > 23)
 80028ce:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <Time_Update+0x90>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <Time_Update+0x90>)
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <Time_Update+0x90>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b17      	cmp	r3, #23
 80028e0:	d902      	bls.n	80028e8 <Time_Update+0x60>
        time_Hour = 0;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <Time_Update+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

    }
  }
  if(++time_TmpShow > 30)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <Time_Update+0x94>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <Time_Update+0x94>)
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <Time_Update+0x94>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b1e      	cmp	r3, #30
 80028fa:	d902      	bls.n	8002902 <Time_Update+0x7a>
  {
    time_TmpShow = 0;
 80028fc:	4b07      	ldr	r3, [pc, #28]	@ (800291c <Time_Update+0x94>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
  }
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000132 	.word	0x20000132
 8002910:	2000014c 	.word	0x2000014c
 8002914:	20000131 	.word	0x20000131
 8002918:	20000130 	.word	0x20000130
 800291c:	2000014d 	.word	0x2000014d

08002920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <Error_Handler+0x8>

0800292c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_MspInit+0x5c>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <HAL_MspInit+0x5c>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6193      	str	r3, [r2, #24]
 800293e:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_MspInit+0x5c>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <HAL_MspInit+0x5c>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a0e      	ldr	r2, [pc, #56]	@ (8002988 <HAL_MspInit+0x5c>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002954:	61d3      	str	r3, [r2, #28]
 8002956:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <HAL_MspInit+0x5c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <HAL_MspInit+0x60>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	4a04      	ldr	r2, [pc, #16]	@ (800298c <HAL_MspInit+0x60>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000

08002990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <NMI_Handler+0x4>

08002998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <HardFault_Handler+0x4>

080029a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <MemManage_Handler+0x4>

080029a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <BusFault_Handler+0x4>

080029b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <UsageFault_Handler+0x4>

080029b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e0:	f000 fa2e 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  Time_Update();
 80029ec:	f7ff ff4c 	bl	8002888 <Time_Update>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SQW_Pin);
 80029f0:	2002      	movs	r0, #2
 80029f2:	f000 fd0f 	bl	8003414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  IR_SetTimeArrayValues(__HAL_TIM_GET_COUNTER(&htim3));
 8002a00:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <EXTI3_IRQHandler+0x24>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd ffb6 	bl	8000978 <IR_SetTimeArrayValues>
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8002a0c:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <EXTI3_IRQHandler+0x24>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Pin);
 8002a14:	2008      	movs	r0, #8
 8002a16:	f000 fcfd 	bl	8003414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200001c0 	.word	0x200001c0

08002a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  Segments_Scan();
 8002a28:	f7fe f896 	bl	8000b58 <Segments_Scan>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <TIM2_IRQHandler+0x14>)
 8002a2e:	f002 fa2b 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000178 	.word	0x20000178

08002a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  Ir_ResetRunning();
 8002a40:	f7fe f87a 	bl	8000b38 <Ir_ResetRunning>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a44:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <TIM3_IRQHandler+0x14>)
 8002a46:	f002 fa1f 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200001c0 	.word	0x200001c0

08002a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a5c:	4a14      	ldr	r2, [pc, #80]	@ (8002ab0 <_sbrk+0x5c>)
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <_sbrk+0x60>)
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <_sbrk+0x64>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <_sbrk+0x64>)
 8002a72:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <_sbrk+0x68>)
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a76:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <_sbrk+0x64>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d207      	bcs.n	8002a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a84:	f002 ffa4 	bl	80059d0 <__errno>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	220c      	movs	r2, #12
 8002a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	e009      	b.n	8002aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a94:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <_sbrk+0x64>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <_sbrk+0x64>)
 8002aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20005000 	.word	0x20005000
 8002ab4:	00000400 	.word	0x00000400
 8002ab8:	20000174 	.word	0x20000174
 8002abc:	200003a0 	.word	0x200003a0

08002ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002af2:	2247      	movs	r2, #71	@ 0x47
 8002af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8002afc:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002afe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b10:	4813      	ldr	r0, [pc, #76]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002b12:	f002 f917 	bl	8004d44 <HAL_TIM_Base_Init>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b1c:	f7ff ff00 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480c      	ldr	r0, [pc, #48]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002b2e:	f002 fa9b 	bl	8005068 <HAL_TIM_ConfigClockSource>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b38:	f7ff fef2 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b44:	463b      	mov	r3, r7
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <MX_TIM2_Init+0x94>)
 8002b4a:	f002 fc85 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b54:	f7ff fee4 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000178 	.word	0x20000178

08002b64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b78:	463b      	mov	r3, r7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002b82:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <MX_TIM3_Init+0x98>)
 8002b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002b88:	2247      	movs	r2, #71	@ 0x47
 8002b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002b94:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002b98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9a:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ba6:	4814      	ldr	r0, [pc, #80]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002ba8:	f002 f8cc 	bl	8004d44 <HAL_TIM_Base_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bb2:	f7ff feb5 	bl	8002920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480d      	ldr	r0, [pc, #52]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002bc4:	f002 fa50 	bl	8005068 <HAL_TIM_ConfigClockSource>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bce:	f7ff fea7 	bl	8002920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	@ (8002bf8 <MX_TIM3_Init+0x94>)
 8002be0:	f002 fc3a 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bea:	f7ff fe99 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200001c0 	.word	0x200001c0
 8002bfc:	40000400 	.word	0x40000400

08002c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c10:	d114      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	61d3      	str	r3, [r2, #28]
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	201c      	movs	r0, #28
 8002c30:	f000 fa1d 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c34:	201c      	movs	r0, #28
 8002c36:	f000 fa36 	bl	80030a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c3a:	e018      	b.n	8002c6e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0e      	ldr	r2, [pc, #56]	@ (8002c7c <HAL_TIM_Base_MspInit+0x7c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d113      	bne.n	8002c6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c46:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_TIM_Base_MspInit+0x78>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	201d      	movs	r0, #29
 8002c64:	f000 fa03 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c68:	201d      	movs	r0, #29
 8002c6a:	f000 fa1c 	bl	80030a6 <HAL_NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40000400 	.word	0x40000400

08002c80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	@ (8002cd0 <MX_USART2_UART_Init+0x50>)
 8002c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cb6:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <MX_USART2_UART_Init+0x4c>)
 8002cb8:	f002 fc3e 	bl	8005538 <HAL_UART_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cc2:	f7ff fe2d 	bl	8002920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000208 	.word	0x20000208
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1b      	ldr	r2, [pc, #108]	@ (8002d5c <HAL_UART_MspInit+0x88>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d12f      	bne.n	8002d54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfe:	61d3      	str	r3, [r2, #28]
 8002d00:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a13      	ldr	r2, [pc, #76]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <HAL_UART_MspInit+0x8c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d24:	2304      	movs	r3, #4
 8002d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	480b      	ldr	r0, [pc, #44]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d38:	f000 f9d0 	bl	80030dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <HAL_UART_MspInit+0x90>)
 8002d50:	f000 f9c4 	bl	80030dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d54:	bf00      	nop
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010800 	.word	0x40010800

08002d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d68:	f7ff feaa 	bl	8002ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d6c:	480b      	ldr	r0, [pc, #44]	@ (8002d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d6e:	490c      	ldr	r1, [pc, #48]	@ (8002da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d70:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d74:	e002      	b.n	8002d7c <LoopCopyDataInit>

08002d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7a:	3304      	adds	r3, #4

08002d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d80:	d3f9      	bcc.n	8002d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d82:	4a09      	ldr	r2, [pc, #36]	@ (8002da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d84:	4c09      	ldr	r4, [pc, #36]	@ (8002dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d88:	e001      	b.n	8002d8e <LoopFillZerobss>

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d8c:	3204      	adds	r2, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d92:	f002 fe23 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d96:	f7ff f90f 	bl	8001fb8 <main>
  bx lr
 8002d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002da4:	080063a0 	.word	0x080063a0
  ldr r2, =_sbss
 8002da8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002dac:	2000039c 	.word	0x2000039c

08002db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_Init+0x28>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <HAL_Init+0x28>)
 8002dbe:	f043 0310 	orr.w	r3, r3, #16
 8002dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc4:	2003      	movs	r0, #3
 8002dc6:	f000 f947 	bl	8003058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dca:	200f      	movs	r0, #15
 8002dcc:	f000 f808 	bl	8002de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd0:	f7ff fdac 	bl	800292c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40022000 	.word	0x40022000

08002de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x54>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_InitTick+0x58>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f95f 	bl	80030c2 <HAL_SYSTICK_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00e      	b.n	8002e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b0f      	cmp	r3, #15
 8002e12:	d80a      	bhi.n	8002e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e14:	2200      	movs	r2, #0
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f000 f927 	bl	800306e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e20:	4a06      	ldr	r2, [pc, #24]	@ (8002e3c <HAL_InitTick+0x5c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e000      	b.n	8002e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000008 	.word	0x20000008
 8002e38:	20000010 	.word	0x20000010
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e44:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_IncTick+0x1c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_IncTick+0x20>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a03      	ldr	r2, [pc, #12]	@ (8002e60 <HAL_IncTick+0x20>)
 8002e52:	6013      	str	r3, [r2, #0]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000010 	.word	0x20000010
 8002e60:	20000250 	.word	0x20000250

08002e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b02      	ldr	r3, [pc, #8]	@ (8002e74 <HAL_GetTick+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	20000250 	.word	0x20000250

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffe0 	bl	8002e64 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000010 	.word	0x20000010

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4906      	ldr	r1, [pc, #24]	@ (8002f58 <__NVIC_EnableIRQ+0x34>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	@ (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003024:	d301      	bcc.n	800302a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003026:	2301      	movs	r3, #1
 8003028:	e00f      	b.n	800304a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <SysTick_Config+0x40>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003032:	210f      	movs	r1, #15
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f7ff ff90 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <SysTick_Config+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <SysTick_Config+0x40>)
 8003044:	2207      	movs	r2, #7
 8003046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000e010 	.word	0xe000e010

08003058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff2d 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003080:	f7ff ff42 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 8003084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	6978      	ldr	r0, [r7, #20]
 800308c:	f7ff ff90 	bl	8002fb0 <NVIC_EncodePriority>
 8003090:	4602      	mov	r2, r0
 8003092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff5f 	bl	8002f5c <__NVIC_SetPriority>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff35 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ffa2 	bl	8003014 <SysTick_Config>
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b08b      	sub	sp, #44	@ 0x2c
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ee:	e169      	b.n	80033c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030f0:	2201      	movs	r2, #1
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	429a      	cmp	r2, r3
 800310a:	f040 8158 	bne.w	80033be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a9a      	ldr	r2, [pc, #616]	@ (800337c <HAL_GPIO_Init+0x2a0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d05e      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
 8003118:	4a98      	ldr	r2, [pc, #608]	@ (800337c <HAL_GPIO_Init+0x2a0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d875      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 800311e:	4a98      	ldr	r2, [pc, #608]	@ (8003380 <HAL_GPIO_Init+0x2a4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d058      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
 8003124:	4a96      	ldr	r2, [pc, #600]	@ (8003380 <HAL_GPIO_Init+0x2a4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d86f      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 800312a:	4a96      	ldr	r2, [pc, #600]	@ (8003384 <HAL_GPIO_Init+0x2a8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d052      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
 8003130:	4a94      	ldr	r2, [pc, #592]	@ (8003384 <HAL_GPIO_Init+0x2a8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d869      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 8003136:	4a94      	ldr	r2, [pc, #592]	@ (8003388 <HAL_GPIO_Init+0x2ac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04c      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
 800313c:	4a92      	ldr	r2, [pc, #584]	@ (8003388 <HAL_GPIO_Init+0x2ac>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d863      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 8003142:	4a92      	ldr	r2, [pc, #584]	@ (800338c <HAL_GPIO_Init+0x2b0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d046      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
 8003148:	4a90      	ldr	r2, [pc, #576]	@ (800338c <HAL_GPIO_Init+0x2b0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d85d      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 800314e:	2b12      	cmp	r3, #18
 8003150:	d82a      	bhi.n	80031a8 <HAL_GPIO_Init+0xcc>
 8003152:	2b12      	cmp	r3, #18
 8003154:	d859      	bhi.n	800320a <HAL_GPIO_Init+0x12e>
 8003156:	a201      	add	r2, pc, #4	@ (adr r2, 800315c <HAL_GPIO_Init+0x80>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	080031d7 	.word	0x080031d7
 8003160:	080031b1 	.word	0x080031b1
 8003164:	080031c3 	.word	0x080031c3
 8003168:	08003205 	.word	0x08003205
 800316c:	0800320b 	.word	0x0800320b
 8003170:	0800320b 	.word	0x0800320b
 8003174:	0800320b 	.word	0x0800320b
 8003178:	0800320b 	.word	0x0800320b
 800317c:	0800320b 	.word	0x0800320b
 8003180:	0800320b 	.word	0x0800320b
 8003184:	0800320b 	.word	0x0800320b
 8003188:	0800320b 	.word	0x0800320b
 800318c:	0800320b 	.word	0x0800320b
 8003190:	0800320b 	.word	0x0800320b
 8003194:	0800320b 	.word	0x0800320b
 8003198:	0800320b 	.word	0x0800320b
 800319c:	0800320b 	.word	0x0800320b
 80031a0:	080031b9 	.word	0x080031b9
 80031a4:	080031cd 	.word	0x080031cd
 80031a8:	4a79      	ldr	r2, [pc, #484]	@ (8003390 <HAL_GPIO_Init+0x2b4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ae:	e02c      	b.n	800320a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	623b      	str	r3, [r7, #32]
          break;
 80031b6:	e029      	b.n	800320c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	3304      	adds	r3, #4
 80031be:	623b      	str	r3, [r7, #32]
          break;
 80031c0:	e024      	b.n	800320c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	3308      	adds	r3, #8
 80031c8:	623b      	str	r3, [r7, #32]
          break;
 80031ca:	e01f      	b.n	800320c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	330c      	adds	r3, #12
 80031d2:	623b      	str	r3, [r7, #32]
          break;
 80031d4:	e01a      	b.n	800320c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031de:	2304      	movs	r3, #4
 80031e0:	623b      	str	r3, [r7, #32]
          break;
 80031e2:	e013      	b.n	800320c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d105      	bne.n	80031f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ec:	2308      	movs	r3, #8
 80031ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	611a      	str	r2, [r3, #16]
          break;
 80031f6:	e009      	b.n	800320c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f8:	2308      	movs	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	615a      	str	r2, [r3, #20]
          break;
 8003202:	e003      	b.n	800320c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
          break;
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x130>
          break;
 800320a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2bff      	cmp	r3, #255	@ 0xff
 8003210:	d801      	bhi.n	8003216 <HAL_GPIO_Init+0x13a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	e001      	b.n	800321a <HAL_GPIO_Init+0x13e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2bff      	cmp	r3, #255	@ 0xff
 8003220:	d802      	bhi.n	8003228 <HAL_GPIO_Init+0x14c>
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	e002      	b.n	800322e <HAL_GPIO_Init+0x152>
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	3b08      	subs	r3, #8
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	210f      	movs	r1, #15
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	401a      	ands	r2, r3
 8003240:	6a39      	ldr	r1, [r7, #32]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80b1 	beq.w	80033be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800325c:	4b4d      	ldr	r3, [pc, #308]	@ (8003394 <HAL_GPIO_Init+0x2b8>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4a4c      	ldr	r2, [pc, #304]	@ (8003394 <HAL_GPIO_Init+0x2b8>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6193      	str	r3, [r2, #24]
 8003268:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <HAL_GPIO_Init+0x2b8>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003274:	4a48      	ldr	r2, [pc, #288]	@ (8003398 <HAL_GPIO_Init+0x2bc>)
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a40      	ldr	r2, [pc, #256]	@ (800339c <HAL_GPIO_Init+0x2c0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d013      	beq.n	80032c8 <HAL_GPIO_Init+0x1ec>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3f      	ldr	r2, [pc, #252]	@ (80033a0 <HAL_GPIO_Init+0x2c4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00d      	beq.n	80032c4 <HAL_GPIO_Init+0x1e8>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3e      	ldr	r2, [pc, #248]	@ (80033a4 <HAL_GPIO_Init+0x2c8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d007      	beq.n	80032c0 <HAL_GPIO_Init+0x1e4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	@ (80033a8 <HAL_GPIO_Init+0x2cc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d101      	bne.n	80032bc <HAL_GPIO_Init+0x1e0>
 80032b8:	2303      	movs	r3, #3
 80032ba:	e006      	b.n	80032ca <HAL_GPIO_Init+0x1ee>
 80032bc:	2304      	movs	r3, #4
 80032be:	e004      	b.n	80032ca <HAL_GPIO_Init+0x1ee>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e002      	b.n	80032ca <HAL_GPIO_Init+0x1ee>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <HAL_GPIO_Init+0x1ee>
 80032c8:	2300      	movs	r3, #0
 80032ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032cc:	f002 0203 	and.w	r2, r2, #3
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	4093      	lsls	r3, r2
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032da:	492f      	ldr	r1, [pc, #188]	@ (8003398 <HAL_GPIO_Init+0x2bc>)
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d006      	beq.n	8003302 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032f4:	4b2d      	ldr	r3, [pc, #180]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	492c      	ldr	r1, [pc, #176]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003302:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	43db      	mvns	r3, r3
 800330a:	4928      	ldr	r1, [pc, #160]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800330c:	4013      	ands	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d006      	beq.n	800332a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800331c:	4b23      	ldr	r3, [pc, #140]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4922      	ldr	r1, [pc, #136]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800332a:	4b20      	ldr	r3, [pc, #128]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	43db      	mvns	r3, r3
 8003332:	491e      	ldr	r1, [pc, #120]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003334:	4013      	ands	r3, r2
 8003336:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d006      	beq.n	8003352 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4918      	ldr	r1, [pc, #96]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
 8003350:	e006      	b.n	8003360 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003352:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	43db      	mvns	r3, r3
 800335a:	4914      	ldr	r1, [pc, #80]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800335c:	4013      	ands	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d021      	beq.n	80033b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	490e      	ldr	r1, [pc, #56]	@ (80033ac <HAL_GPIO_Init+0x2d0>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e021      	b.n	80033be <HAL_GPIO_Init+0x2e2>
 800337a:	bf00      	nop
 800337c:	10320000 	.word	0x10320000
 8003380:	10310000 	.word	0x10310000
 8003384:	10220000 	.word	0x10220000
 8003388:	10210000 	.word	0x10210000
 800338c:	10120000 	.word	0x10120000
 8003390:	10110000 	.word	0x10110000
 8003394:	40021000 	.word	0x40021000
 8003398:	40010000 	.word	0x40010000
 800339c:	40010800 	.word	0x40010800
 80033a0:	40010c00 	.word	0x40010c00
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40011400 	.word	0x40011400
 80033ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	4909      	ldr	r1, [pc, #36]	@ (80033e0 <HAL_GPIO_Init+0x304>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	fa22 f303 	lsr.w	r3, r2, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f47f ae8e 	bne.w	80030f0 <HAL_GPIO_Init+0x14>
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	372c      	adds	r7, #44	@ 0x2c
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	40010400 	.word	0x40010400

080033e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033f4:	787b      	ldrb	r3, [r7, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003400:	e003      	b.n	800340a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003402:	887b      	ldrh	r3, [r7, #2]
 8003404:	041a      	lsls	r2, r3, #16
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800341e:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800342a:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f806 	bl	8003444 <HAL_GPIO_EXTI_Callback>
  }
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40010400 	.word	0x40010400

08003444 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e12b      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe fa0c 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	@ 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034bc:	f001 fbfc 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 80034c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4a81      	ldr	r2, [pc, #516]	@ (80036cc <HAL_I2C_Init+0x274>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d807      	bhi.n	80034dc <HAL_I2C_Init+0x84>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a80      	ldr	r2, [pc, #512]	@ (80036d0 <HAL_I2C_Init+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	e006      	b.n	80034ea <HAL_I2C_Init+0x92>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a7d      	ldr	r2, [pc, #500]	@ (80036d4 <HAL_I2C_Init+0x27c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bf94      	ite	ls
 80034e4:	2301      	movls	r3, #1
 80034e6:	2300      	movhi	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0e7      	b.n	80036c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a78      	ldr	r2, [pc, #480]	@ (80036d8 <HAL_I2C_Init+0x280>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a6a      	ldr	r2, [pc, #424]	@ (80036cc <HAL_I2C_Init+0x274>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d802      	bhi.n	800352c <HAL_I2C_Init+0xd4>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	e009      	b.n	8003540 <HAL_I2C_Init+0xe8>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a69      	ldr	r2, [pc, #420]	@ (80036dc <HAL_I2C_Init+0x284>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	3301      	adds	r3, #1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003552:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	495c      	ldr	r1, [pc, #368]	@ (80036cc <HAL_I2C_Init+0x274>)
 800355c:	428b      	cmp	r3, r1
 800355e:	d819      	bhi.n	8003594 <HAL_I2C_Init+0x13c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e59      	subs	r1, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fbb1 f3f3 	udiv	r3, r1, r3
 800356e:	1c59      	adds	r1, r3, #1
 8003570:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003574:	400b      	ands	r3, r1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_I2C_Init+0x138>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e59      	subs	r1, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fbb1 f3f3 	udiv	r3, r1, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358e:	e051      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003590:	2304      	movs	r3, #4
 8003592:	e04f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_I2C_Init+0x168>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1e58      	subs	r0, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6859      	ldr	r1, [r3, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e012      	b.n	80035e6 <HAL_I2C_Init+0x18e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1e58      	subs	r0, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	0099      	lsls	r1, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_Init+0x196>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e022      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <HAL_I2C_Init+0x1bc>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1e58      	subs	r0, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	440b      	add	r3, r1
 8003604:	fbb0 f3f3 	udiv	r3, r0, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003612:	e00f      	b.n	8003634 <HAL_I2C_Init+0x1dc>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1e58      	subs	r0, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	0099      	lsls	r1, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	fbb0 f3f3 	udiv	r3, r0, r3
 800362a:	3301      	adds	r3, #1
 800362c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003630:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6809      	ldr	r1, [r1, #0]
 8003638:	4313      	orrs	r3, r2
 800363a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003662:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6911      	ldr	r1, [r2, #16]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68d2      	ldr	r2, [r2, #12]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	000186a0 	.word	0x000186a0
 80036d0:	001e847f 	.word	0x001e847f
 80036d4:	003d08ff 	.word	0x003d08ff
 80036d8:	431bde83 	.word	0x431bde83
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036fa:	f7ff fbb3 	bl	8002e64 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	f040 80d9 	bne.w	80038c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2319      	movs	r3, #25
 8003714:	2201      	movs	r2, #1
 8003716:	496d      	ldr	r1, [pc, #436]	@ (80038cc <HAL_I2C_Mem_Write+0x1ec>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 fccd 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
 8003726:	e0cc      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Mem_Write+0x56>
 8003732:	2302      	movs	r3, #2
 8003734:	e0c5      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d007      	beq.n	800375c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2221      	movs	r2, #33	@ 0x21
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a3a      	ldr	r2, [r7, #32]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a4d      	ldr	r2, [pc, #308]	@ (80038d0 <HAL_I2C_Mem_Write+0x1f0>)
 800379c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800379e:	88f8      	ldrh	r0, [r7, #6]
 80037a0:	893a      	ldrh	r2, [r7, #8]
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4603      	mov	r3, r0
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb04 	bl	8003dbc <I2C_RequestMemoryWrite>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d052      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e081      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fd92 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e06b      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_I2C_Mem_Write+0x180>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	781a      	ldrb	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1aa      	bne.n	80037be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fd85 	bl	800437c <I2C_WaitOnBTFFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e016      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000

080038d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	@ 0x30
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	4608      	mov	r0, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	460b      	mov	r3, r1
 80038e8:	813b      	strh	r3, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f2:	f7ff fab7 	bl	8002e64 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b20      	cmp	r3, #32
 8003902:	f040 8250 	bne.w	8003da6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2319      	movs	r3, #25
 800390c:	2201      	movs	r2, #1
 800390e:	4982      	ldr	r1, [pc, #520]	@ (8003b18 <HAL_I2C_Mem_Read+0x244>)
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fbd1 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
 800391e:	e243      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_I2C_Mem_Read+0x5a>
 800392a:	2302      	movs	r3, #2
 800392c:	e23c      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2222      	movs	r2, #34	@ 0x22
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	@ 0x40
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a62      	ldr	r2, [pc, #392]	@ (8003b1c <HAL_I2C_Mem_Read+0x248>)
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003996:	88f8      	ldrh	r0, [r7, #6]
 8003998:	893a      	ldrh	r2, [r7, #8]
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4603      	mov	r3, r0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa9e 	bl	8003ee8 <I2C_RequestMemoryRead>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1f8      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d113      	bne.n	80039e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e1cc      	b.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d11e      	bne.n	8003a2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039fe:	b672      	cpsid	i
}
 8003a00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a28:	b662      	cpsie	i
}
 8003a2a:	e035      	b.n	8003a98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11e      	bne.n	8003a72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a44:	b672      	cpsid	i
}
 8003a46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6e:	b662      	cpsie	i
}
 8003a70:	e012      	b.n	8003a98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a98:	e172      	b.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	f200 811f 	bhi.w	8003ce2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d123      	bne.n	8003af4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fcab 	bl	800440c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e173      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003af2:	e145      	b.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d152      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	2200      	movs	r2, #0
 8003b04:	4906      	ldr	r1, [pc, #24]	@ (8003b20 <HAL_I2C_Mem_Read+0x24c>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fad6 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e148      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
 8003b16:	bf00      	nop
 8003b18:	00100002 	.word	0x00100002
 8003b1c:	ffff0000 	.word	0xffff0000
 8003b20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b24:	b672      	cpsid	i
}
 8003b26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b6a:	b662      	cpsie	i
}
 8003b6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ba0:	e0ee      	b.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4981      	ldr	r1, [pc, #516]	@ (8003db0 <HAL_I2C_Mem_Read+0x4dc>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa83 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0f5      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bcc:	b672      	cpsid	i
}
 8003bce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c02:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <HAL_I2C_Mem_Read+0x4e0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	4a6b      	ldr	r2, [pc, #428]	@ (8003db8 <HAL_I2C_Mem_Read+0x4e4>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0a1a      	lsrs	r2, r3, #8
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00da      	lsls	r2, r3, #3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d118      	bne.n	8003c5a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c4a:	b662      	cpsie	i
}
 8003c4c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0a6      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d1d9      	bne.n	8003c1c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003caa:	b662      	cpsie	i
}
 8003cac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ce0:	e04e      	b.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb90 	bl	800440c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e058      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d124      	bne.n	8003d80 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f47f ae88 	bne.w	8003a9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	@ 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	00010004 	.word	0x00010004
 8003db4:	20000008 	.word	0x20000008
 8003db8:	14f8b589 	.word	0x14f8b589

08003dbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	817b      	strh	r3, [r7, #10]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	813b      	strh	r3, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f960 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e0c:	d103      	bne.n	8003e16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e05f      	b.n	8003eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	492d      	ldr	r1, [pc, #180]	@ (8003ee4 <I2C_RequestMemoryWrite+0x128>)
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f9bb 	bl	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e04c      	b.n	8003eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e58:	6a39      	ldr	r1, [r7, #32]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa46 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00d      	beq.n	8003e82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d107      	bne.n	8003e7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e02b      	b.n	8003eda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e88:	893b      	ldrh	r3, [r7, #8]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	e021      	b.n	8003ed8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fa20 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d107      	bne.n	8003eca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e005      	b.n	8003eda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ece:	893b      	ldrh	r3, [r7, #8]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	00010002 	.word	0x00010002

08003ee8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f8c2 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f48:	d103      	bne.n	8003f52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0aa      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	4952      	ldr	r1, [pc, #328]	@ (80040b4 <I2C_RequestMemoryRead+0x1cc>)
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f91d 	bl	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e097      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f9a8 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e076      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	e021      	b.n	8004014 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f982 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004004:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e050      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800400a:	893b      	ldrh	r3, [r7, #8]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004016:	6a39      	ldr	r1, [r7, #32]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f967 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2b04      	cmp	r3, #4
 800402a:	d107      	bne.n	800403c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e035      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800404e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2200      	movs	r2, #0
 8004058:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f82b 	bl	80040b8 <I2C_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004076:	d103      	bne.n	8004080 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e013      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	6a3a      	ldr	r2, [r7, #32]
 8004098:	4906      	ldr	r1, [pc, #24]	@ (80040b4 <I2C_RequestMemoryRead+0x1cc>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f886 	bl	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00010002 	.word	0x00010002

080040b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c8:	e048      	b.n	800415c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d044      	beq.n	800415c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7fe fec7 	bl	8002e64 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d302      	bcc.n	80040e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d139      	bne.n	800415c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d10d      	bne.n	800410e <I2C_WaitOnFlagUntilTimeout+0x56>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	e00c      	b.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x70>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	429a      	cmp	r2, r3
 800412c:	d116      	bne.n	800415c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e023      	b.n	80041a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10d      	bne.n	8004182 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	43da      	mvns	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4013      	ands	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	e00c      	b.n	800419c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	43da      	mvns	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d093      	beq.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ba:	e071      	b.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d123      	bne.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e067      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d041      	beq.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421c:	f7fe fe22 	bl	8002e64 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d136      	bne.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e00b      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e021      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d10c      	bne.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e00b      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f af6d 	bne.w	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	e034      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8e3 	bl	80044c6 <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e034      	b.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d028      	beq.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fda7 	bl	8002e64 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11d      	bne.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b80      	cmp	r3, #128	@ 0x80
 8004334:	d016      	beq.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e007      	b.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d1c3      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004388:	e034      	b.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f89b 	bl	80044c6 <I2C_IsAcknowledgeFailed>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e034      	b.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d028      	beq.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7fe fd5f 	bl	8002e64 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11d      	bne.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d016      	beq.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e007      	b.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d1c3      	bne.n	800438a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004418:	e049      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b10      	cmp	r3, #16
 8004426:	d119      	bne.n	800445c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e030      	b.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fe fd02 	bl	8002e64 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11d      	bne.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447c:	2b40      	cmp	r3, #64	@ 0x40
 800447e:	d016      	beq.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e007      	b.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d1ae      	bne.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044dc:	d11b      	bne.n	8004516 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
	...

08004524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e272      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8087 	beq.w	8004652 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004544:	4b92      	ldr	r3, [pc, #584]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b04      	cmp	r3, #4
 800454e:	d00c      	beq.n	800456a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004550:	4b8f      	ldr	r3, [pc, #572]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b08      	cmp	r3, #8
 800455a:	d112      	bne.n	8004582 <HAL_RCC_OscConfig+0x5e>
 800455c:	4b8c      	ldr	r3, [pc, #560]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004568:	d10b      	bne.n	8004582 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d06c      	beq.n	8004650 <HAL_RCC_OscConfig+0x12c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d168      	bne.n	8004650 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e24c      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x76>
 800458c:	4b80      	ldr	r3, [pc, #512]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a7f      	ldr	r2, [pc, #508]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e02e      	b.n	80045f8 <HAL_RCC_OscConfig+0xd4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x98>
 80045a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a7a      	ldr	r2, [pc, #488]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b78      	ldr	r3, [pc, #480]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a77      	ldr	r2, [pc, #476]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e01d      	b.n	80045f8 <HAL_RCC_OscConfig+0xd4>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045c4:	d10c      	bne.n	80045e0 <HAL_RCC_OscConfig+0xbc>
 80045c6:	4b72      	ldr	r3, [pc, #456]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a71      	ldr	r2, [pc, #452]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e00b      	b.n	80045f8 <HAL_RCC_OscConfig+0xd4>
 80045e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6a      	ldr	r2, [pc, #424]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b68      	ldr	r3, [pc, #416]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a67      	ldr	r2, [pc, #412]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d013      	beq.n	8004628 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe fc30 	bl	8002e64 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004608:	f7fe fc2c 	bl	8002e64 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	@ 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e200      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461a:	4b5d      	ldr	r3, [pc, #372]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0xe4>
 8004626:	e014      	b.n	8004652 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fc1c 	bl	8002e64 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fc18 	bl	8002e64 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1ec      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004642:	4b53      	ldr	r3, [pc, #332]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x10c>
 800464e:	e000      	b.n	8004652 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d063      	beq.n	8004726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800465e:	4b4c      	ldr	r3, [pc, #304]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800466a:	4b49      	ldr	r3, [pc, #292]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b08      	cmp	r3, #8
 8004674:	d11c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x18c>
 8004676:	4b46      	ldr	r3, [pc, #280]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	4b43      	ldr	r3, [pc, #268]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_RCC_OscConfig+0x176>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1c0      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4939      	ldr	r1, [pc, #228]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	e03a      	b.n	8004726 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d020      	beq.n	80046fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b36      	ldr	r3, [pc, #216]	@ (8004794 <HAL_RCC_OscConfig+0x270>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fe fbd1 	bl	8002e64 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fe fbcd 	bl	8002e64 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1a1      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4927      	ldr	r1, [pc, #156]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e015      	b.n	8004726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b26      	ldr	r3, [pc, #152]	@ (8004794 <HAL_RCC_OscConfig+0x270>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe fbb0 	bl	8002e64 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004708:	f7fe fbac 	bl	8002e64 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e180      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471a:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d03a      	beq.n	80047a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d019      	beq.n	800476e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473a:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <HAL_RCC_OscConfig+0x274>)
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004740:	f7fe fb90 	bl	8002e64 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004748:	f7fe fb8c 	bl	8002e64 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e160      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <HAL_RCC_OscConfig+0x26c>)
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004766:	2001      	movs	r0, #1
 8004768:	f000 face 	bl	8004d08 <RCC_Delay>
 800476c:	e01c      	b.n	80047a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476e:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <HAL_RCC_OscConfig+0x274>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004774:	f7fe fb76 	bl	8002e64 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477a:	e00f      	b.n	800479c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477c:	f7fe fb72 	bl	8002e64 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d908      	bls.n	800479c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e146      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	42420000 	.word	0x42420000
 8004798:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	4b92      	ldr	r3, [pc, #584]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e9      	bne.n	800477c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a6 	beq.w	8004902 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ba:	4b8b      	ldr	r3, [pc, #556]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10d      	bne.n	80047e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4b88      	ldr	r3, [pc, #544]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	4a87      	ldr	r2, [pc, #540]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	61d3      	str	r3, [r2, #28]
 80047d2:	4b85      	ldr	r3, [pc, #532]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b82      	ldr	r3, [pc, #520]	@ (80049ec <HAL_RCC_OscConfig+0x4c8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d118      	bne.n	8004820 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b7f      	ldr	r3, [pc, #508]	@ (80049ec <HAL_RCC_OscConfig+0x4c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a7e      	ldr	r2, [pc, #504]	@ (80049ec <HAL_RCC_OscConfig+0x4c8>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fa:	f7fe fb33 	bl	8002e64 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004802:	f7fe fb2f 	bl	8002e64 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b64      	cmp	r3, #100	@ 0x64
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e103      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	4b75      	ldr	r3, [pc, #468]	@ (80049ec <HAL_RCC_OscConfig+0x4c8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x312>
 8004828:	4b6f      	ldr	r3, [pc, #444]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4a6e      	ldr	r2, [pc, #440]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6213      	str	r3, [r2, #32]
 8004834:	e02d      	b.n	8004892 <HAL_RCC_OscConfig+0x36e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x334>
 800483e:	4b6a      	ldr	r3, [pc, #424]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a69      	ldr	r2, [pc, #420]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6213      	str	r3, [r2, #32]
 800484a:	4b67      	ldr	r3, [pc, #412]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4a66      	ldr	r2, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	6213      	str	r3, [r2, #32]
 8004856:	e01c      	b.n	8004892 <HAL_RCC_OscConfig+0x36e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d10c      	bne.n	800487a <HAL_RCC_OscConfig+0x356>
 8004860:	4b61      	ldr	r3, [pc, #388]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	4a60      	ldr	r2, [pc, #384]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	f043 0304 	orr.w	r3, r3, #4
 800486a:	6213      	str	r3, [r2, #32]
 800486c:	4b5e      	ldr	r3, [pc, #376]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	4a5d      	ldr	r2, [pc, #372]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6213      	str	r3, [r2, #32]
 8004878:	e00b      	b.n	8004892 <HAL_RCC_OscConfig+0x36e>
 800487a:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	4b58      	ldr	r3, [pc, #352]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4a57      	ldr	r2, [pc, #348]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d015      	beq.n	80048c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489a:	f7fe fae3 	bl	8002e64 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fe fadf 	bl	8002e64 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0b1      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	4b4b      	ldr	r3, [pc, #300]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ee      	beq.n	80048a2 <HAL_RCC_OscConfig+0x37e>
 80048c4:	e014      	b.n	80048f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fe facd 	bl	8002e64 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fe fac9 	bl	8002e64 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e09b      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e4:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1ee      	bne.n	80048ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d105      	bne.n	8004902 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f6:	4b3c      	ldr	r3, [pc, #240]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4a3b      	ldr	r2, [pc, #236]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004900:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8087 	beq.w	8004a1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800490c:	4b36      	ldr	r3, [pc, #216]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b08      	cmp	r3, #8
 8004916:	d061      	beq.n	80049dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d146      	bne.n	80049ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004920:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <HAL_RCC_OscConfig+0x4cc>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004926:	f7fe fa9d 	bl	8002e64 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492e:	f7fe fa99 	bl	8002e64 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e06d      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004940:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004954:	d108      	bne.n	8004968 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004956:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	4921      	ldr	r1, [pc, #132]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004968:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a19      	ldr	r1, [r3, #32]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	430b      	orrs	r3, r1
 800497a:	491b      	ldr	r1, [pc, #108]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004980:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x4cc>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004986:	f7fe fa6d 	bl	8002e64 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800498e:	f7fe fa69 	bl	8002e64 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e03d      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a0:	4b11      	ldr	r3, [pc, #68]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x46a>
 80049ac:	e035      	b.n	8004a1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <HAL_RCC_OscConfig+0x4cc>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fe fa56 	bl	8002e64 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fe fa52 	bl	8002e64 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e026      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x498>
 80049da:	e01e      	b.n	8004a1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e019      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
 80049f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCC_OscConfig+0x500>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000

08004a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0d0      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d910      	bls.n	8004a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b67      	ldr	r3, [pc, #412]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0207 	bic.w	r2, r3, #7
 8004a52:	4965      	ldr	r1, [pc, #404]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5a:	4b63      	ldr	r3, [pc, #396]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0b8      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a84:	4b59      	ldr	r3, [pc, #356]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a58      	ldr	r2, [pc, #352]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a9c:	4b53      	ldr	r3, [pc, #332]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa8:	4b50      	ldr	r3, [pc, #320]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	494d      	ldr	r1, [pc, #308]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d040      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d115      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e07f      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b41      	ldr	r3, [pc, #260]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e073      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e06b      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b39      	ldr	r3, [pc, #228]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4936      	ldr	r1, [pc, #216]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fe f9a4 	bl	8002e64 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fe f9a0 	bl	8002e64 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e053      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2d      	ldr	r3, [pc, #180]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b27      	ldr	r3, [pc, #156]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d210      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 0207 	bic.w	r2, r3, #7
 8004b5e:	4922      	ldr	r1, [pc, #136]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e032      	b.n	8004bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b84:	4b19      	ldr	r3, [pc, #100]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4916      	ldr	r1, [pc, #88]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ba2:	4b12      	ldr	r3, [pc, #72]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	490e      	ldr	r1, [pc, #56]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bb6:	f000 f821 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490a      	ldr	r1, [pc, #40]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	fa22 f303 	lsr.w	r3, r2, r3
 8004bce:	4a09      	ldr	r2, [pc, #36]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bd2:	4b09      	ldr	r3, [pc, #36]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe f902 	bl	8002de0 <HAL_InitTick>

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40022000 	.word	0x40022000
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	08006338 	.word	0x08006338
 8004bf4:	20000008 	.word	0x20000008
 8004bf8:	2000000c 	.word	0x2000000c

08004bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c16:	4b1e      	ldr	r3, [pc, #120]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d002      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x30>
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d003      	beq.n	8004c32 <HAL_RCC_GetSysClockFreq+0x36>
 8004c2a:	e027      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c2e:	613b      	str	r3, [r7, #16]
      break;
 8004c30:	e027      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0c9b      	lsrs	r3, r3, #18
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	4a17      	ldr	r2, [pc, #92]	@ (8004c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d010      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c4a:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	0c5b      	lsrs	r3, r3, #17
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	4a11      	ldr	r2, [pc, #68]	@ (8004c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5e:	fb03 f202 	mul.w	r2, r3, r2
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e004      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	613b      	str	r3, [r7, #16]
      break;
 8004c7a:	e002      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c7e:	613b      	str	r3, [r7, #16]
      break;
 8004c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c82:	693b      	ldr	r3, [r7, #16]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000
 8004c94:	007a1200 	.word	0x007a1200
 8004c98:	08006350 	.word	0x08006350
 8004c9c:	08006360 	.word	0x08006360
 8004ca0:	003d0900 	.word	0x003d0900

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b02      	ldr	r3, [pc, #8]	@ (8004cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	20000008 	.word	0x20000008

08004cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cbc:	f7ff fff2 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4903      	ldr	r1, [pc, #12]	@ (8004cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08006348 	.word	0x08006348

08004ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ce4:	f7ff ffde 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	0adb      	lsrs	r3, r3, #11
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	4903      	ldr	r1, [pc, #12]	@ (8004d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf6:	5ccb      	ldrb	r3, [r1, r3]
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	08006348 	.word	0x08006348

08004d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <RCC_Delay+0x34>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <RCC_Delay+0x38>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0a5b      	lsrs	r3, r3, #9
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d24:	bf00      	nop
  }
  while (Delay --);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1e5a      	subs	r2, r3, #1
 8004d2a:	60fa      	str	r2, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f9      	bne.n	8004d24 <RCC_Delay+0x1c>
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000008 	.word	0x20000008
 8004d40:	10624dd3 	.word	0x10624dd3

08004d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e041      	b.n	8004dda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fd ff48 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fa64 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e03a      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a18      	ldr	r2, [pc, #96]	@ (8004e7c <HAL_TIM_Base_Start_IT+0x98>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x58>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x58>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	@ (8004e80 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x58>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a13      	ldr	r2, [pc, #76]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d010      	beq.n	8004e70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e007      	b.n	8004e70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800

08004e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0202 	mvn.w	r2, #2
 8004ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9a1 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f994 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f9a3 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0204 	mvn.w	r2, #4
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f97b 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f96e 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f97d 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0208 	mvn.w	r2, #8
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f955 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f948 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f957 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d020      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0210 	mvn.w	r2, #16
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f92f 	bl	800521a <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f922 	bl	8005208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f931 	bl	800522c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0201 	mvn.w	r2, #1
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f901 	bl	80051f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa87 	bl	8005526 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f901 	bl	800523e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0220 	mvn.w	r2, #32
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa5a 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIM_ConfigClockSource+0x1c>
 8005080:	2302      	movs	r3, #2
 8005082:	e0b4      	b.n	80051ee <HAL_TIM_ConfigClockSource+0x186>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050bc:	d03e      	beq.n	800513c <HAL_TIM_ConfigClockSource+0xd4>
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050c2:	f200 8087 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ca:	f000 8086 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x172>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d2:	d87f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b70      	cmp	r3, #112	@ 0x70
 80050d6:	d01a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xa6>
 80050d8:	2b70      	cmp	r3, #112	@ 0x70
 80050da:	d87b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b60      	cmp	r3, #96	@ 0x60
 80050de:	d050      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x11a>
 80050e0:	2b60      	cmp	r3, #96	@ 0x60
 80050e2:	d877      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b50      	cmp	r3, #80	@ 0x50
 80050e6:	d03c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0xfa>
 80050e8:	2b50      	cmp	r3, #80	@ 0x50
 80050ea:	d873      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d058      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x13a>
 80050f0:	2b40      	cmp	r3, #64	@ 0x40
 80050f2:	d86f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b30      	cmp	r3, #48	@ 0x30
 80050f6:	d064      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	2b30      	cmp	r3, #48	@ 0x30
 80050fa:	d86b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d060      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d867      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d05a      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 800510c:	e062      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	f000 f97c 	bl	800541a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	609a      	str	r2, [r3, #8]
      break;
 800513a:	e04f      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	f000 f965 	bl	800541a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800515e:	609a      	str	r2, [r3, #8]
      break;
 8005160:	e03c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	461a      	mov	r2, r3
 8005170:	f000 f8dc 	bl	800532c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2150      	movs	r1, #80	@ 0x50
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f933 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 8005180:	e02c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800518e:	461a      	mov	r2, r3
 8005190:	f000 f8fa 	bl	8005388 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2160      	movs	r1, #96	@ 0x60
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f923 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 80051a0:	e01c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ae:	461a      	mov	r2, r3
 80051b0:	f000 f8bc 	bl	800532c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2140      	movs	r1, #64	@ 0x40
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f913 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 f90a 	bl	80053e6 <TIM_ITRx_SetConfig>
      break;
 80051d2:	e003      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e000      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2f      	ldr	r2, [pc, #188]	@ (8005320 <TIM_Base_SetConfig+0xd0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00b      	beq.n	8005280 <TIM_Base_SetConfig+0x30>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0x30>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a2c      	ldr	r2, [pc, #176]	@ (8005324 <TIM_Base_SetConfig+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x30>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2b      	ldr	r2, [pc, #172]	@ (8005328 <TIM_Base_SetConfig+0xd8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <TIM_Base_SetConfig+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_Base_SetConfig+0x62>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a0:	d007      	beq.n	80052b2 <TIM_Base_SetConfig+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005324 <TIM_Base_SetConfig+0xd4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_Base_SetConfig+0x62>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005328 <TIM_Base_SetConfig+0xd8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d108      	bne.n	80052c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005320 <TIM_Base_SetConfig+0xd0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d103      	bne.n	80052f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]
  }
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800

0800532c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 030a 	bic.w	r3, r3, #10
 8005368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0210 	bic.w	r2, r3, #16
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	031b      	lsls	r3, r3, #12
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	f043 0307 	orr.w	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800541a:	b480      	push	{r7}
 800541c:	b087      	sub	sp, #28
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005434:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	021a      	lsls	r2, r3, #8
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	431a      	orrs	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4313      	orrs	r3, r2
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	609a      	str	r2, [r3, #8]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e046      	b.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a16      	ldr	r2, [pc, #88]	@ (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d009      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a12      	ldr	r2, [pc, #72]	@ (800550c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a10      	ldr	r2, [pc, #64]	@ (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10c      	bne.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e042      	b.n	80055d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fd fbb8 	bl	8002cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	@ 0x24
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800557a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f971 	bl	8005864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d175      	bne.n	80056e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_UART_Transmit+0x2c>
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e06e      	b.n	80056e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2221      	movs	r2, #33	@ 0x21
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005616:	f7fd fc25 	bl	8002e64 <HAL_GetTick>
 800561a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	88fa      	ldrh	r2, [r7, #6]
 8005620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005630:	d108      	bne.n	8005644 <HAL_UART_Transmit+0x6c>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e003      	b.n	800564c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800564c:	e02e      	b.n	80056ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	2180      	movs	r1, #128	@ 0x80
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f848 	bl	80056ee <UART_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e03a      	b.n	80056e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3302      	adds	r3, #2
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	e007      	b.n	800569e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	3301      	adds	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1cb      	bne.n	800564e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2200      	movs	r2, #0
 80056be:	2140      	movs	r1, #64	@ 0x40
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f814 	bl	80056ee <UART_WaitOnFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e006      	b.n	80056e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e000      	b.n	80056e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
  }
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fe:	e03b      	b.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d037      	beq.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fd fbac 	bl	8002e64 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <UART_WaitOnFlagUntilTimeout+0x30>
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e03a      	b.n	8005798 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d023      	beq.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b80      	cmp	r3, #128	@ 0x80
 8005734:	d020      	beq.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b40      	cmp	r3, #64	@ 0x40
 800573a:	d01d      	beq.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b08      	cmp	r3, #8
 8005748:	d116      	bne.n	8005778 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f81d 	bl	80057a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2208      	movs	r2, #8
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e00f      	b.n	8005798 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	429a      	cmp	r2, r3
 8005794:	d0b4      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b095      	sub	sp, #84	@ 0x54
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3314      	adds	r3, #20
 80057fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e5      	bne.n	80057dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	2b01      	cmp	r3, #1
 8005816:	d119      	bne.n	800584c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	60bb      	str	r3, [r7, #8]
   return(result);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005838:	61ba      	str	r2, [r7, #24]
 800583a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6979      	ldr	r1, [r7, #20]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	613b      	str	r3, [r7, #16]
   return(result);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800585a:	bf00      	nop
 800585c:	3754      	adds	r7, #84	@ 0x54
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800589e:	f023 030c 	bic.w	r3, r3, #12
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	430b      	orrs	r3, r1
 80058aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005978 <UART_SetConfig+0x114>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7ff fa08 	bl	8004ce0 <HAL_RCC_GetPCLK2Freq>
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	e002      	b.n	80058da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7ff f9f0 	bl	8004cb8 <HAL_RCC_GetPCLK1Freq>
 80058d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009a      	lsls	r2, r3, #2
 80058e4:	441a      	add	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	4a22      	ldr	r2, [pc, #136]	@ (800597c <UART_SetConfig+0x118>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	0119      	lsls	r1, r3, #4
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005910:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <UART_SetConfig+0x118>)
 8005912:	fba3 0302 	umull	r0, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2064      	movs	r0, #100	@ 0x64
 800591a:	fb00 f303 	mul.w	r3, r0, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	3332      	adds	r3, #50	@ 0x32
 8005924:	4a15      	ldr	r2, [pc, #84]	@ (800597c <UART_SetConfig+0x118>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005930:	4419      	add	r1, r3
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	fbb2 f2f3 	udiv	r2, r2, r3
 8005948:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <UART_SetConfig+0x118>)
 800594a:	fba3 0302 	umull	r0, r3, r3, r2
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	2064      	movs	r0, #100	@ 0x64
 8005952:	fb00 f303 	mul.w	r3, r0, r3
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	3332      	adds	r3, #50	@ 0x32
 800595c:	4a07      	ldr	r2, [pc, #28]	@ (800597c <UART_SetConfig+0x118>)
 800595e:	fba2 2303 	umull	r2, r3, r2, r3
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	f003 020f 	and.w	r2, r3, #15
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	440a      	add	r2, r1
 800596e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40013800 	.word	0x40013800
 800597c:	51eb851f 	.word	0x51eb851f

08005980 <siprintf>:
 8005980:	b40e      	push	{r1, r2, r3}
 8005982:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005986:	b500      	push	{lr}
 8005988:	b09c      	sub	sp, #112	@ 0x70
 800598a:	ab1d      	add	r3, sp, #116	@ 0x74
 800598c:	9002      	str	r0, [sp, #8]
 800598e:	9006      	str	r0, [sp, #24]
 8005990:	9107      	str	r1, [sp, #28]
 8005992:	9104      	str	r1, [sp, #16]
 8005994:	4808      	ldr	r0, [pc, #32]	@ (80059b8 <siprintf+0x38>)
 8005996:	4909      	ldr	r1, [pc, #36]	@ (80059bc <siprintf+0x3c>)
 8005998:	f853 2b04 	ldr.w	r2, [r3], #4
 800599c:	9105      	str	r1, [sp, #20]
 800599e:	6800      	ldr	r0, [r0, #0]
 80059a0:	a902      	add	r1, sp, #8
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	f000 f992 	bl	8005ccc <_svfiprintf_r>
 80059a8:	2200      	movs	r2, #0
 80059aa:	9b02      	ldr	r3, [sp, #8]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	b01c      	add	sp, #112	@ 0x70
 80059b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b4:	b003      	add	sp, #12
 80059b6:	4770      	bx	lr
 80059b8:	20000014 	.word	0x20000014
 80059bc:	ffff0208 	.word	0xffff0208

080059c0 <memset>:
 80059c0:	4603      	mov	r3, r0
 80059c2:	4402      	add	r2, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <__errno>:
 80059d0:	4b01      	ldr	r3, [pc, #4]	@ (80059d8 <__errno+0x8>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000014 	.word	0x20000014

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	2600      	movs	r6, #0
 80059e0:	4d0c      	ldr	r5, [pc, #48]	@ (8005a14 <__libc_init_array+0x38>)
 80059e2:	4c0d      	ldr	r4, [pc, #52]	@ (8005a18 <__libc_init_array+0x3c>)
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	42a6      	cmp	r6, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	f000 fc78 	bl	80062e0 <_init>
 80059f0:	2600      	movs	r6, #0
 80059f2:	4d0a      	ldr	r5, [pc, #40]	@ (8005a1c <__libc_init_array+0x40>)
 80059f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005a20 <__libc_init_array+0x44>)
 80059f6:	1b64      	subs	r4, r4, r5
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	42a6      	cmp	r6, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a04:	4798      	blx	r3
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0e:	4798      	blx	r3
 8005a10:	3601      	adds	r6, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	08006398 	.word	0x08006398
 8005a18:	08006398 	.word	0x08006398
 8005a1c:	08006398 	.word	0x08006398
 8005a20:	0800639c 	.word	0x0800639c

08005a24 <__retarget_lock_acquire_recursive>:
 8005a24:	4770      	bx	lr

08005a26 <__retarget_lock_release_recursive>:
 8005a26:	4770      	bx	lr

08005a28 <_free_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d040      	beq.n	8005ab2 <_free_r+0x8a>
 8005a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a34:	1f0c      	subs	r4, r1, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bfb8      	it	lt
 8005a3a:	18e4      	addlt	r4, r4, r3
 8005a3c:	f000 f8de 	bl	8005bfc <__malloc_lock>
 8005a40:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <_free_r+0x8c>)
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	b933      	cbnz	r3, 8005a54 <_free_r+0x2c>
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a50:	f000 b8da 	b.w	8005c08 <__malloc_unlock>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x42>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	bf01      	itttt	eq
 8005a60:	6819      	ldreq	r1, [r3, #0]
 8005a62:	685b      	ldreq	r3, [r3, #4]
 8005a64:	1809      	addeq	r1, r1, r0
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	e7ed      	b.n	8005a46 <_free_r+0x1e>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b10b      	cbz	r3, 8005a74 <_free_r+0x4c>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d9fa      	bls.n	8005a6a <_free_r+0x42>
 8005a74:	6811      	ldr	r1, [r2, #0]
 8005a76:	1850      	adds	r0, r2, r1
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d10b      	bne.n	8005a94 <_free_r+0x6c>
 8005a7c:	6820      	ldr	r0, [r4, #0]
 8005a7e:	4401      	add	r1, r0
 8005a80:	1850      	adds	r0, r2, r1
 8005a82:	4283      	cmp	r3, r0
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	d1e0      	bne.n	8005a4a <_free_r+0x22>
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4408      	add	r0, r1
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	6053      	str	r3, [r2, #4]
 8005a92:	e7da      	b.n	8005a4a <_free_r+0x22>
 8005a94:	d902      	bls.n	8005a9c <_free_r+0x74>
 8005a96:	230c      	movs	r3, #12
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	e7d6      	b.n	8005a4a <_free_r+0x22>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	1821      	adds	r1, r4, r0
 8005aa0:	428b      	cmp	r3, r1
 8005aa2:	bf01      	itttt	eq
 8005aa4:	6819      	ldreq	r1, [r3, #0]
 8005aa6:	685b      	ldreq	r3, [r3, #4]
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	6054      	str	r4, [r2, #4]
 8005ab0:	e7cb      	b.n	8005a4a <_free_r+0x22>
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	20000398 	.word	0x20000398

08005ab8 <sbrk_aligned>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4e0f      	ldr	r6, [pc, #60]	@ (8005af8 <sbrk_aligned+0x40>)
 8005abc:	460c      	mov	r4, r1
 8005abe:	6831      	ldr	r1, [r6, #0]
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b911      	cbnz	r1, 8005aca <sbrk_aligned+0x12>
 8005ac4:	f000 fbaa 	bl	800621c <_sbrk_r>
 8005ac8:	6030      	str	r0, [r6, #0]
 8005aca:	4621      	mov	r1, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fba5 	bl	800621c <_sbrk_r>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	d103      	bne.n	8005ade <sbrk_aligned+0x26>
 8005ad6:	f04f 34ff 	mov.w	r4, #4294967295
 8005ada:	4620      	mov	r0, r4
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d0f8      	beq.n	8005ada <sbrk_aligned+0x22>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fb96 	bl	800621c <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1f2      	bne.n	8005ada <sbrk_aligned+0x22>
 8005af4:	e7ef      	b.n	8005ad6 <sbrk_aligned+0x1e>
 8005af6:	bf00      	nop
 8005af8:	20000394 	.word	0x20000394

08005afc <_malloc_r>:
 8005afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b00:	1ccd      	adds	r5, r1, #3
 8005b02:	f025 0503 	bic.w	r5, r5, #3
 8005b06:	3508      	adds	r5, #8
 8005b08:	2d0c      	cmp	r5, #12
 8005b0a:	bf38      	it	cc
 8005b0c:	250c      	movcc	r5, #12
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	4606      	mov	r6, r0
 8005b12:	db01      	blt.n	8005b18 <_malloc_r+0x1c>
 8005b14:	42a9      	cmp	r1, r5
 8005b16:	d904      	bls.n	8005b22 <_malloc_r+0x26>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	6033      	str	r3, [r6, #0]
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bf8 <_malloc_r+0xfc>
 8005b26:	f000 f869 	bl	8005bfc <__malloc_lock>
 8005b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2e:	461c      	mov	r4, r3
 8005b30:	bb44      	cbnz	r4, 8005b84 <_malloc_r+0x88>
 8005b32:	4629      	mov	r1, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff ffbf 	bl	8005ab8 <sbrk_aligned>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	d158      	bne.n	8005bf2 <_malloc_r+0xf6>
 8005b40:	f8d8 4000 	ldr.w	r4, [r8]
 8005b44:	4627      	mov	r7, r4
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	d143      	bne.n	8005bd2 <_malloc_r+0xd6>
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	d04b      	beq.n	8005be6 <_malloc_r+0xea>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	4639      	mov	r1, r7
 8005b52:	4630      	mov	r0, r6
 8005b54:	eb04 0903 	add.w	r9, r4, r3
 8005b58:	f000 fb60 	bl	800621c <_sbrk_r>
 8005b5c:	4581      	cmp	r9, r0
 8005b5e:	d142      	bne.n	8005be6 <_malloc_r+0xea>
 8005b60:	6821      	ldr	r1, [r4, #0]
 8005b62:	4630      	mov	r0, r6
 8005b64:	1a6d      	subs	r5, r5, r1
 8005b66:	4629      	mov	r1, r5
 8005b68:	f7ff ffa6 	bl	8005ab8 <sbrk_aligned>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d03a      	beq.n	8005be6 <_malloc_r+0xea>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	442b      	add	r3, r5
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	bb62      	cbnz	r2, 8005bd8 <_malloc_r+0xdc>
 8005b7e:	f8c8 7000 	str.w	r7, [r8]
 8005b82:	e00f      	b.n	8005ba4 <_malloc_r+0xa8>
 8005b84:	6822      	ldr	r2, [r4, #0]
 8005b86:	1b52      	subs	r2, r2, r5
 8005b88:	d420      	bmi.n	8005bcc <_malloc_r+0xd0>
 8005b8a:	2a0b      	cmp	r2, #11
 8005b8c:	d917      	bls.n	8005bbe <_malloc_r+0xc2>
 8005b8e:	1961      	adds	r1, r4, r5
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	6025      	str	r5, [r4, #0]
 8005b94:	bf18      	it	ne
 8005b96:	6059      	strne	r1, [r3, #4]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	bf08      	it	eq
 8005b9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ba0:	5162      	str	r2, [r4, r5]
 8005ba2:	604b      	str	r3, [r1, #4]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f000 f82f 	bl	8005c08 <__malloc_unlock>
 8005baa:	f104 000b 	add.w	r0, r4, #11
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	f020 0007 	bic.w	r0, r0, #7
 8005bb4:	1ac2      	subs	r2, r0, r3
 8005bb6:	bf1c      	itt	ne
 8005bb8:	1a1b      	subne	r3, r3, r0
 8005bba:	50a3      	strne	r3, [r4, r2]
 8005bbc:	e7af      	b.n	8005b1e <_malloc_r+0x22>
 8005bbe:	6862      	ldr	r2, [r4, #4]
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	bf0c      	ite	eq
 8005bc4:	f8c8 2000 	streq.w	r2, [r8]
 8005bc8:	605a      	strne	r2, [r3, #4]
 8005bca:	e7eb      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bcc:	4623      	mov	r3, r4
 8005bce:	6864      	ldr	r4, [r4, #4]
 8005bd0:	e7ae      	b.n	8005b30 <_malloc_r+0x34>
 8005bd2:	463c      	mov	r4, r7
 8005bd4:	687f      	ldr	r7, [r7, #4]
 8005bd6:	e7b6      	b.n	8005b46 <_malloc_r+0x4a>
 8005bd8:	461a      	mov	r2, r3
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d1fb      	bne.n	8005bd8 <_malloc_r+0xdc>
 8005be0:	2300      	movs	r3, #0
 8005be2:	6053      	str	r3, [r2, #4]
 8005be4:	e7de      	b.n	8005ba4 <_malloc_r+0xa8>
 8005be6:	230c      	movs	r3, #12
 8005be8:	4630      	mov	r0, r6
 8005bea:	6033      	str	r3, [r6, #0]
 8005bec:	f000 f80c 	bl	8005c08 <__malloc_unlock>
 8005bf0:	e794      	b.n	8005b1c <_malloc_r+0x20>
 8005bf2:	6005      	str	r5, [r0, #0]
 8005bf4:	e7d6      	b.n	8005ba4 <_malloc_r+0xa8>
 8005bf6:	bf00      	nop
 8005bf8:	20000398 	.word	0x20000398

08005bfc <__malloc_lock>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	@ (8005c04 <__malloc_lock+0x8>)
 8005bfe:	f7ff bf11 	b.w	8005a24 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	20000390 	.word	0x20000390

08005c08 <__malloc_unlock>:
 8005c08:	4801      	ldr	r0, [pc, #4]	@ (8005c10 <__malloc_unlock+0x8>)
 8005c0a:	f7ff bf0c 	b.w	8005a26 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20000390 	.word	0x20000390

08005c14 <__ssputs_r>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	461f      	mov	r7, r3
 8005c1a:	688e      	ldr	r6, [r1, #8]
 8005c1c:	4682      	mov	sl, r0
 8005c1e:	42be      	cmp	r6, r7
 8005c20:	460c      	mov	r4, r1
 8005c22:	4690      	mov	r8, r2
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	d82d      	bhi.n	8005c84 <__ssputs_r+0x70>
 8005c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c30:	d026      	beq.n	8005c80 <__ssputs_r+0x6c>
 8005c32:	6965      	ldr	r5, [r4, #20]
 8005c34:	6909      	ldr	r1, [r1, #16]
 8005c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c3a:	eba3 0901 	sub.w	r9, r3, r1
 8005c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c42:	1c7b      	adds	r3, r7, #1
 8005c44:	444b      	add	r3, r9
 8005c46:	106d      	asrs	r5, r5, #1
 8005c48:	429d      	cmp	r5, r3
 8005c4a:	bf38      	it	cc
 8005c4c:	461d      	movcc	r5, r3
 8005c4e:	0553      	lsls	r3, r2, #21
 8005c50:	d527      	bpl.n	8005ca2 <__ssputs_r+0x8e>
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7ff ff52 	bl	8005afc <_malloc_r>
 8005c58:	4606      	mov	r6, r0
 8005c5a:	b360      	cbz	r0, 8005cb6 <__ssputs_r+0xa2>
 8005c5c:	464a      	mov	r2, r9
 8005c5e:	6921      	ldr	r1, [r4, #16]
 8005c60:	f000 fafa 	bl	8006258 <memcpy>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	6126      	str	r6, [r4, #16]
 8005c72:	444e      	add	r6, r9
 8005c74:	6026      	str	r6, [r4, #0]
 8005c76:	463e      	mov	r6, r7
 8005c78:	6165      	str	r5, [r4, #20]
 8005c7a:	eba5 0509 	sub.w	r5, r5, r9
 8005c7e:	60a5      	str	r5, [r4, #8]
 8005c80:	42be      	cmp	r6, r7
 8005c82:	d900      	bls.n	8005c86 <__ssputs_r+0x72>
 8005c84:	463e      	mov	r6, r7
 8005c86:	4632      	mov	r2, r6
 8005c88:	4641      	mov	r1, r8
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	f000 faac 	bl	80061e8 <memmove>
 8005c90:	2000      	movs	r0, #0
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	1b9b      	subs	r3, r3, r6
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	4433      	add	r3, r6
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	f000 fae6 	bl	8006274 <_realloc_r>
 8005ca8:	4606      	mov	r6, r0
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d1e0      	bne.n	8005c70 <__ssputs_r+0x5c>
 8005cae:	4650      	mov	r0, sl
 8005cb0:	6921      	ldr	r1, [r4, #16]
 8005cb2:	f7ff feb9 	bl	8005a28 <_free_r>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	f8ca 3000 	str.w	r3, [sl]
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc6:	81a3      	strh	r3, [r4, #12]
 8005cc8:	e7e9      	b.n	8005c9e <__ssputs_r+0x8a>
	...

08005ccc <_svfiprintf_r>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	898b      	ldrh	r3, [r1, #12]
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	061b      	lsls	r3, r3, #24
 8005cd8:	460d      	mov	r5, r1
 8005cda:	4614      	mov	r4, r2
 8005cdc:	b09d      	sub	sp, #116	@ 0x74
 8005cde:	d510      	bpl.n	8005d02 <_svfiprintf_r+0x36>
 8005ce0:	690b      	ldr	r3, [r1, #16]
 8005ce2:	b973      	cbnz	r3, 8005d02 <_svfiprintf_r+0x36>
 8005ce4:	2140      	movs	r1, #64	@ 0x40
 8005ce6:	f7ff ff09 	bl	8005afc <_malloc_r>
 8005cea:	6028      	str	r0, [r5, #0]
 8005cec:	6128      	str	r0, [r5, #16]
 8005cee:	b930      	cbnz	r0, 8005cfe <_svfiprintf_r+0x32>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b01d      	add	sp, #116	@ 0x74
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	2340      	movs	r3, #64	@ 0x40
 8005d00:	616b      	str	r3, [r5, #20]
 8005d02:	2300      	movs	r3, #0
 8005d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d06:	2320      	movs	r3, #32
 8005d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d0c:	2330      	movs	r3, #48	@ 0x30
 8005d0e:	f04f 0901 	mov.w	r9, #1
 8005d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005eb0 <_svfiprintf_r+0x1e4>
 8005d1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d1e:	4623      	mov	r3, r4
 8005d20:	469a      	mov	sl, r3
 8005d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d26:	b10a      	cbz	r2, 8005d2c <_svfiprintf_r+0x60>
 8005d28:	2a25      	cmp	r2, #37	@ 0x25
 8005d2a:	d1f9      	bne.n	8005d20 <_svfiprintf_r+0x54>
 8005d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d30:	d00b      	beq.n	8005d4a <_svfiprintf_r+0x7e>
 8005d32:	465b      	mov	r3, fp
 8005d34:	4622      	mov	r2, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	4638      	mov	r0, r7
 8005d3a:	f7ff ff6b 	bl	8005c14 <__ssputs_r>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f000 80a7 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d46:	445a      	add	r2, fp
 8005d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809f 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d54:	2300      	movs	r3, #0
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5e:	f10a 0a01 	add.w	sl, sl, #1
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d6c:	4654      	mov	r4, sl
 8005d6e:	2205      	movs	r2, #5
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	484e      	ldr	r0, [pc, #312]	@ (8005eb0 <_svfiprintf_r+0x1e4>)
 8005d76:	f000 fa61 	bl	800623c <memchr>
 8005d7a:	9a04      	ldr	r2, [sp, #16]
 8005d7c:	b9d8      	cbnz	r0, 8005db6 <_svfiprintf_r+0xea>
 8005d7e:	06d0      	lsls	r0, r2, #27
 8005d80:	bf44      	itt	mi
 8005d82:	2320      	movmi	r3, #32
 8005d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d88:	0711      	lsls	r1, r2, #28
 8005d8a:	bf44      	itt	mi
 8005d8c:	232b      	movmi	r3, #43	@ 0x2b
 8005d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d92:	f89a 3000 	ldrb.w	r3, [sl]
 8005d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d98:	d015      	beq.n	8005dc6 <_svfiprintf_r+0xfa>
 8005d9a:	4654      	mov	r4, sl
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f04f 0c0a 	mov.w	ip, #10
 8005da2:	9a07      	ldr	r2, [sp, #28]
 8005da4:	4621      	mov	r1, r4
 8005da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005daa:	3b30      	subs	r3, #48	@ 0x30
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d94b      	bls.n	8005e48 <_svfiprintf_r+0x17c>
 8005db0:	b1b0      	cbz	r0, 8005de0 <_svfiprintf_r+0x114>
 8005db2:	9207      	str	r2, [sp, #28]
 8005db4:	e014      	b.n	8005de0 <_svfiprintf_r+0x114>
 8005db6:	eba0 0308 	sub.w	r3, r0, r8
 8005dba:	fa09 f303 	lsl.w	r3, r9, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	46a2      	mov	sl, r4
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	e7d2      	b.n	8005d6c <_svfiprintf_r+0xa0>
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	1d19      	adds	r1, r3, #4
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	9103      	str	r1, [sp, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfbb      	ittet	lt
 8005dd2:	425b      	neglt	r3, r3
 8005dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd8:	9307      	strge	r3, [sp, #28]
 8005dda:	9307      	strlt	r3, [sp, #28]
 8005ddc:	bfb8      	it	lt
 8005dde:	9204      	strlt	r2, [sp, #16]
 8005de0:	7823      	ldrb	r3, [r4, #0]
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d10a      	bne.n	8005dfc <_svfiprintf_r+0x130>
 8005de6:	7863      	ldrb	r3, [r4, #1]
 8005de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dea:	d132      	bne.n	8005e52 <_svfiprintf_r+0x186>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	3402      	adds	r4, #2
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	9203      	str	r2, [sp, #12]
 8005df6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005eb4 <_svfiprintf_r+0x1e8>
 8005e00:	2203      	movs	r2, #3
 8005e02:	4650      	mov	r0, sl
 8005e04:	7821      	ldrb	r1, [r4, #0]
 8005e06:	f000 fa19 	bl	800623c <memchr>
 8005e0a:	b138      	cbz	r0, 8005e1c <_svfiprintf_r+0x150>
 8005e0c:	2240      	movs	r2, #64	@ 0x40
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	eba0 000a 	sub.w	r0, r0, sl
 8005e14:	4082      	lsls	r2, r0
 8005e16:	4313      	orrs	r3, r2
 8005e18:	3401      	adds	r4, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	2206      	movs	r2, #6
 8005e22:	4825      	ldr	r0, [pc, #148]	@ (8005eb8 <_svfiprintf_r+0x1ec>)
 8005e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e28:	f000 fa08 	bl	800623c <memchr>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d036      	beq.n	8005e9e <_svfiprintf_r+0x1d2>
 8005e30:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <_svfiprintf_r+0x1f0>)
 8005e32:	bb1b      	cbnz	r3, 8005e7c <_svfiprintf_r+0x1b0>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	3307      	adds	r3, #7
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e42:	4433      	add	r3, r6
 8005e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e46:	e76a      	b.n	8005d1e <_svfiprintf_r+0x52>
 8005e48:	460c      	mov	r4, r1
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e50:	e7a8      	b.n	8005da4 <_svfiprintf_r+0xd8>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f04f 0c0a 	mov.w	ip, #10
 8005e58:	4619      	mov	r1, r3
 8005e5a:	3401      	adds	r4, #1
 8005e5c:	9305      	str	r3, [sp, #20]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e64:	3a30      	subs	r2, #48	@ 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x1a6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c6      	beq.n	8005dfc <_svfiprintf_r+0x130>
 8005e6e:	9105      	str	r1, [sp, #20]
 8005e70:	e7c4      	b.n	8005dfc <_svfiprintf_r+0x130>
 8005e72:	4604      	mov	r4, r0
 8005e74:	2301      	movs	r3, #1
 8005e76:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e7a:	e7f0      	b.n	8005e5e <_svfiprintf_r+0x192>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	462a      	mov	r2, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <_svfiprintf_r+0x1f4>)
 8005e86:	a904      	add	r1, sp, #16
 8005e88:	f3af 8000 	nop.w
 8005e8c:	1c42      	adds	r2, r0, #1
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d1d6      	bne.n	8005e40 <_svfiprintf_r+0x174>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	065b      	lsls	r3, r3, #25
 8005e96:	f53f af2d 	bmi.w	8005cf4 <_svfiprintf_r+0x28>
 8005e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e9c:	e72c      	b.n	8005cf8 <_svfiprintf_r+0x2c>
 8005e9e:	ab03      	add	r3, sp, #12
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <_svfiprintf_r+0x1f4>)
 8005ea8:	a904      	add	r1, sp, #16
 8005eaa:	f000 f87d 	bl	8005fa8 <_printf_i>
 8005eae:	e7ed      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005eb0:	08006362 	.word	0x08006362
 8005eb4:	08006368 	.word	0x08006368
 8005eb8:	0800636c 	.word	0x0800636c
 8005ebc:	00000000 	.word	0x00000000
 8005ec0:	08005c15 	.word	0x08005c15

08005ec4 <_printf_common>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	4616      	mov	r6, r2
 8005eca:	4698      	mov	r8, r3
 8005ecc:	688a      	ldr	r2, [r1, #8]
 8005ece:	690b      	ldr	r3, [r1, #16]
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bfb8      	it	lt
 8005ed6:	4613      	movlt	r3, r2
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ede:	460c      	mov	r4, r1
 8005ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ee4:	b10a      	cbz	r2, 8005eea <_printf_common+0x26>
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	0699      	lsls	r1, r3, #26
 8005eee:	bf42      	ittt	mi
 8005ef0:	6833      	ldrmi	r3, [r6, #0]
 8005ef2:	3302      	addmi	r3, #2
 8005ef4:	6033      	strmi	r3, [r6, #0]
 8005ef6:	6825      	ldr	r5, [r4, #0]
 8005ef8:	f015 0506 	ands.w	r5, r5, #6
 8005efc:	d106      	bne.n	8005f0c <_printf_common+0x48>
 8005efe:	f104 0a19 	add.w	sl, r4, #25
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	6832      	ldr	r2, [r6, #0]
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	42ab      	cmp	r3, r5
 8005f0a:	dc2b      	bgt.n	8005f64 <_printf_common+0xa0>
 8005f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	3b00      	subs	r3, #0
 8005f14:	bf18      	it	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	0692      	lsls	r2, r2, #26
 8005f1a:	d430      	bmi.n	8005f7e <_printf_common+0xba>
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f24:	47c8      	blx	r9
 8005f26:	3001      	adds	r0, #1
 8005f28:	d023      	beq.n	8005f72 <_printf_common+0xae>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	6922      	ldr	r2, [r4, #16]
 8005f2e:	f003 0306 	and.w	r3, r3, #6
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	bf14      	ite	ne
 8005f36:	2500      	movne	r5, #0
 8005f38:	6833      	ldreq	r3, [r6, #0]
 8005f3a:	f04f 0600 	mov.w	r6, #0
 8005f3e:	bf08      	it	eq
 8005f40:	68e5      	ldreq	r5, [r4, #12]
 8005f42:	f104 041a 	add.w	r4, r4, #26
 8005f46:	bf08      	it	eq
 8005f48:	1aed      	subeq	r5, r5, r3
 8005f4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f4e:	bf08      	it	eq
 8005f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bfc4      	itt	gt
 8005f58:	1a9b      	subgt	r3, r3, r2
 8005f5a:	18ed      	addgt	r5, r5, r3
 8005f5c:	42b5      	cmp	r5, r6
 8005f5e:	d11a      	bne.n	8005f96 <_printf_common+0xd2>
 8005f60:	2000      	movs	r0, #0
 8005f62:	e008      	b.n	8005f76 <_printf_common+0xb2>
 8005f64:	2301      	movs	r3, #1
 8005f66:	4652      	mov	r2, sl
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	47c8      	blx	r9
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d103      	bne.n	8005f7a <_printf_common+0xb6>
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7a:	3501      	adds	r5, #1
 8005f7c:	e7c1      	b.n	8005f02 <_printf_common+0x3e>
 8005f7e:	2030      	movs	r0, #48	@ 0x30
 8005f80:	18e1      	adds	r1, r4, r3
 8005f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f8c:	4422      	add	r2, r4
 8005f8e:	3302      	adds	r3, #2
 8005f90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f94:	e7c2      	b.n	8005f1c <_printf_common+0x58>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4622      	mov	r2, r4
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	47c8      	blx	r9
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d0e6      	beq.n	8005f72 <_printf_common+0xae>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7d9      	b.n	8005f5c <_printf_common+0x98>

08005fa8 <_printf_i>:
 8005fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	7e0f      	ldrb	r7, [r1, #24]
 8005fae:	4691      	mov	r9, r2
 8005fb0:	2f78      	cmp	r7, #120	@ 0x78
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	469a      	mov	sl, r3
 8005fb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fbe:	d807      	bhi.n	8005fd0 <_printf_i+0x28>
 8005fc0:	2f62      	cmp	r7, #98	@ 0x62
 8005fc2:	d80a      	bhi.n	8005fda <_printf_i+0x32>
 8005fc4:	2f00      	cmp	r7, #0
 8005fc6:	f000 80d3 	beq.w	8006170 <_printf_i+0x1c8>
 8005fca:	2f58      	cmp	r7, #88	@ 0x58
 8005fcc:	f000 80ba 	beq.w	8006144 <_printf_i+0x19c>
 8005fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fd8:	e03a      	b.n	8006050 <_printf_i+0xa8>
 8005fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fde:	2b15      	cmp	r3, #21
 8005fe0:	d8f6      	bhi.n	8005fd0 <_printf_i+0x28>
 8005fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8005fe8 <_printf_i+0x40>)
 8005fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	08006055 	.word	0x08006055
 8005ff0:	08005fd1 	.word	0x08005fd1
 8005ff4:	08005fd1 	.word	0x08005fd1
 8005ff8:	08005fd1 	.word	0x08005fd1
 8005ffc:	08005fd1 	.word	0x08005fd1
 8006000:	08006055 	.word	0x08006055
 8006004:	08005fd1 	.word	0x08005fd1
 8006008:	08005fd1 	.word	0x08005fd1
 800600c:	08005fd1 	.word	0x08005fd1
 8006010:	08005fd1 	.word	0x08005fd1
 8006014:	08006157 	.word	0x08006157
 8006018:	0800607f 	.word	0x0800607f
 800601c:	08006111 	.word	0x08006111
 8006020:	08005fd1 	.word	0x08005fd1
 8006024:	08005fd1 	.word	0x08005fd1
 8006028:	08006179 	.word	0x08006179
 800602c:	08005fd1 	.word	0x08005fd1
 8006030:	0800607f 	.word	0x0800607f
 8006034:	08005fd1 	.word	0x08005fd1
 8006038:	08005fd1 	.word	0x08005fd1
 800603c:	08006119 	.word	0x08006119
 8006040:	6833      	ldr	r3, [r6, #0]
 8006042:	1d1a      	adds	r2, r3, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6032      	str	r2, [r6, #0]
 8006048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800604c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006050:	2301      	movs	r3, #1
 8006052:	e09e      	b.n	8006192 <_printf_i+0x1ea>
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	1d19      	adds	r1, r3, #4
 800605a:	6031      	str	r1, [r6, #0]
 800605c:	0606      	lsls	r6, r0, #24
 800605e:	d501      	bpl.n	8006064 <_printf_i+0xbc>
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	e003      	b.n	800606c <_printf_i+0xc4>
 8006064:	0645      	lsls	r5, r0, #25
 8006066:	d5fb      	bpl.n	8006060 <_printf_i+0xb8>
 8006068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800606c:	2d00      	cmp	r5, #0
 800606e:	da03      	bge.n	8006078 <_printf_i+0xd0>
 8006070:	232d      	movs	r3, #45	@ 0x2d
 8006072:	426d      	negs	r5, r5
 8006074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006078:	230a      	movs	r3, #10
 800607a:	4859      	ldr	r0, [pc, #356]	@ (80061e0 <_printf_i+0x238>)
 800607c:	e011      	b.n	80060a2 <_printf_i+0xfa>
 800607e:	6821      	ldr	r1, [r4, #0]
 8006080:	6833      	ldr	r3, [r6, #0]
 8006082:	0608      	lsls	r0, r1, #24
 8006084:	f853 5b04 	ldr.w	r5, [r3], #4
 8006088:	d402      	bmi.n	8006090 <_printf_i+0xe8>
 800608a:	0649      	lsls	r1, r1, #25
 800608c:	bf48      	it	mi
 800608e:	b2ad      	uxthmi	r5, r5
 8006090:	2f6f      	cmp	r7, #111	@ 0x6f
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	bf14      	ite	ne
 8006096:	230a      	movne	r3, #10
 8006098:	2308      	moveq	r3, #8
 800609a:	4851      	ldr	r0, [pc, #324]	@ (80061e0 <_printf_i+0x238>)
 800609c:	2100      	movs	r1, #0
 800609e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060a2:	6866      	ldr	r6, [r4, #4]
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	bfa8      	it	ge
 80060a8:	6821      	ldrge	r1, [r4, #0]
 80060aa:	60a6      	str	r6, [r4, #8]
 80060ac:	bfa4      	itt	ge
 80060ae:	f021 0104 	bicge.w	r1, r1, #4
 80060b2:	6021      	strge	r1, [r4, #0]
 80060b4:	b90d      	cbnz	r5, 80060ba <_printf_i+0x112>
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	d04b      	beq.n	8006152 <_printf_i+0x1aa>
 80060ba:	4616      	mov	r6, r2
 80060bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80060c0:	fb03 5711 	mls	r7, r3, r1, r5
 80060c4:	5dc7      	ldrb	r7, [r0, r7]
 80060c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ca:	462f      	mov	r7, r5
 80060cc:	42bb      	cmp	r3, r7
 80060ce:	460d      	mov	r5, r1
 80060d0:	d9f4      	bls.n	80060bc <_printf_i+0x114>
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d10b      	bne.n	80060ee <_printf_i+0x146>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	07df      	lsls	r7, r3, #31
 80060da:	d508      	bpl.n	80060ee <_printf_i+0x146>
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	6861      	ldr	r1, [r4, #4]
 80060e0:	4299      	cmp	r1, r3
 80060e2:	bfde      	ittt	le
 80060e4:	2330      	movle	r3, #48	@ 0x30
 80060e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060ee:	1b92      	subs	r2, r2, r6
 80060f0:	6122      	str	r2, [r4, #16]
 80060f2:	464b      	mov	r3, r9
 80060f4:	4621      	mov	r1, r4
 80060f6:	4640      	mov	r0, r8
 80060f8:	f8cd a000 	str.w	sl, [sp]
 80060fc:	aa03      	add	r2, sp, #12
 80060fe:	f7ff fee1 	bl	8005ec4 <_printf_common>
 8006102:	3001      	adds	r0, #1
 8006104:	d14a      	bne.n	800619c <_printf_i+0x1f4>
 8006106:	f04f 30ff 	mov.w	r0, #4294967295
 800610a:	b004      	add	sp, #16
 800610c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	f043 0320 	orr.w	r3, r3, #32
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2778      	movs	r7, #120	@ 0x78
 800611a:	4832      	ldr	r0, [pc, #200]	@ (80061e4 <_printf_i+0x23c>)
 800611c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	6831      	ldr	r1, [r6, #0]
 8006124:	061f      	lsls	r7, r3, #24
 8006126:	f851 5b04 	ldr.w	r5, [r1], #4
 800612a:	d402      	bmi.n	8006132 <_printf_i+0x18a>
 800612c:	065f      	lsls	r7, r3, #25
 800612e:	bf48      	it	mi
 8006130:	b2ad      	uxthmi	r5, r5
 8006132:	6031      	str	r1, [r6, #0]
 8006134:	07d9      	lsls	r1, r3, #31
 8006136:	bf44      	itt	mi
 8006138:	f043 0320 	orrmi.w	r3, r3, #32
 800613c:	6023      	strmi	r3, [r4, #0]
 800613e:	b11d      	cbz	r5, 8006148 <_printf_i+0x1a0>
 8006140:	2310      	movs	r3, #16
 8006142:	e7ab      	b.n	800609c <_printf_i+0xf4>
 8006144:	4826      	ldr	r0, [pc, #152]	@ (80061e0 <_printf_i+0x238>)
 8006146:	e7e9      	b.n	800611c <_printf_i+0x174>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	f023 0320 	bic.w	r3, r3, #32
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	e7f6      	b.n	8006140 <_printf_i+0x198>
 8006152:	4616      	mov	r6, r2
 8006154:	e7bd      	b.n	80060d2 <_printf_i+0x12a>
 8006156:	6833      	ldr	r3, [r6, #0]
 8006158:	6825      	ldr	r5, [r4, #0]
 800615a:	1d18      	adds	r0, r3, #4
 800615c:	6961      	ldr	r1, [r4, #20]
 800615e:	6030      	str	r0, [r6, #0]
 8006160:	062e      	lsls	r6, r5, #24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	d501      	bpl.n	800616a <_printf_i+0x1c2>
 8006166:	6019      	str	r1, [r3, #0]
 8006168:	e002      	b.n	8006170 <_printf_i+0x1c8>
 800616a:	0668      	lsls	r0, r5, #25
 800616c:	d5fb      	bpl.n	8006166 <_printf_i+0x1be>
 800616e:	8019      	strh	r1, [r3, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	4616      	mov	r6, r2
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	e7bc      	b.n	80060f2 <_printf_i+0x14a>
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	2100      	movs	r1, #0
 800617c:	1d1a      	adds	r2, r3, #4
 800617e:	6032      	str	r2, [r6, #0]
 8006180:	681e      	ldr	r6, [r3, #0]
 8006182:	6862      	ldr	r2, [r4, #4]
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f859 	bl	800623c <memchr>
 800618a:	b108      	cbz	r0, 8006190 <_printf_i+0x1e8>
 800618c:	1b80      	subs	r0, r0, r6
 800618e:	6060      	str	r0, [r4, #4]
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	2300      	movs	r3, #0
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800619a:	e7aa      	b.n	80060f2 <_printf_i+0x14a>
 800619c:	4632      	mov	r2, r6
 800619e:	4649      	mov	r1, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	47d0      	blx	sl
 80061a6:	3001      	adds	r0, #1
 80061a8:	d0ad      	beq.n	8006106 <_printf_i+0x15e>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	079b      	lsls	r3, r3, #30
 80061ae:	d413      	bmi.n	80061d8 <_printf_i+0x230>
 80061b0:	68e0      	ldr	r0, [r4, #12]
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	4298      	cmp	r0, r3
 80061b6:	bfb8      	it	lt
 80061b8:	4618      	movlt	r0, r3
 80061ba:	e7a6      	b.n	800610a <_printf_i+0x162>
 80061bc:	2301      	movs	r3, #1
 80061be:	4632      	mov	r2, r6
 80061c0:	4649      	mov	r1, r9
 80061c2:	4640      	mov	r0, r8
 80061c4:	47d0      	blx	sl
 80061c6:	3001      	adds	r0, #1
 80061c8:	d09d      	beq.n	8006106 <_printf_i+0x15e>
 80061ca:	3501      	adds	r5, #1
 80061cc:	68e3      	ldr	r3, [r4, #12]
 80061ce:	9903      	ldr	r1, [sp, #12]
 80061d0:	1a5b      	subs	r3, r3, r1
 80061d2:	42ab      	cmp	r3, r5
 80061d4:	dcf2      	bgt.n	80061bc <_printf_i+0x214>
 80061d6:	e7eb      	b.n	80061b0 <_printf_i+0x208>
 80061d8:	2500      	movs	r5, #0
 80061da:	f104 0619 	add.w	r6, r4, #25
 80061de:	e7f5      	b.n	80061cc <_printf_i+0x224>
 80061e0:	08006373 	.word	0x08006373
 80061e4:	08006384 	.word	0x08006384

080061e8 <memmove>:
 80061e8:	4288      	cmp	r0, r1
 80061ea:	b510      	push	{r4, lr}
 80061ec:	eb01 0402 	add.w	r4, r1, r2
 80061f0:	d902      	bls.n	80061f8 <memmove+0x10>
 80061f2:	4284      	cmp	r4, r0
 80061f4:	4623      	mov	r3, r4
 80061f6:	d807      	bhi.n	8006208 <memmove+0x20>
 80061f8:	1e43      	subs	r3, r0, #1
 80061fa:	42a1      	cmp	r1, r4
 80061fc:	d008      	beq.n	8006210 <memmove+0x28>
 80061fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006206:	e7f8      	b.n	80061fa <memmove+0x12>
 8006208:	4601      	mov	r1, r0
 800620a:	4402      	add	r2, r0
 800620c:	428a      	cmp	r2, r1
 800620e:	d100      	bne.n	8006212 <memmove+0x2a>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800621a:	e7f7      	b.n	800620c <memmove+0x24>

0800621c <_sbrk_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	2300      	movs	r3, #0
 8006220:	4d05      	ldr	r5, [pc, #20]	@ (8006238 <_sbrk_r+0x1c>)
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	f7fc fc14 	bl	8002a54 <_sbrk>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_sbrk_r+0x1a>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_sbrk_r+0x1a>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	2000038c 	.word	0x2000038c

0800623c <memchr>:
 800623c:	4603      	mov	r3, r0
 800623e:	b510      	push	{r4, lr}
 8006240:	b2c9      	uxtb	r1, r1
 8006242:	4402      	add	r2, r0
 8006244:	4293      	cmp	r3, r2
 8006246:	4618      	mov	r0, r3
 8006248:	d101      	bne.n	800624e <memchr+0x12>
 800624a:	2000      	movs	r0, #0
 800624c:	e003      	b.n	8006256 <memchr+0x1a>
 800624e:	7804      	ldrb	r4, [r0, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	428c      	cmp	r4, r1
 8006254:	d1f6      	bne.n	8006244 <memchr+0x8>
 8006256:	bd10      	pop	{r4, pc}

08006258 <memcpy>:
 8006258:	440a      	add	r2, r1
 800625a:	4291      	cmp	r1, r2
 800625c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006260:	d100      	bne.n	8006264 <memcpy+0xc>
 8006262:	4770      	bx	lr
 8006264:	b510      	push	{r4, lr}
 8006266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800626a:	4291      	cmp	r1, r2
 800626c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006270:	d1f9      	bne.n	8006266 <memcpy+0xe>
 8006272:	bd10      	pop	{r4, pc}

08006274 <_realloc_r>:
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	4680      	mov	r8, r0
 800627a:	4615      	mov	r5, r2
 800627c:	460c      	mov	r4, r1
 800627e:	b921      	cbnz	r1, 800628a <_realloc_r+0x16>
 8006280:	4611      	mov	r1, r2
 8006282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006286:	f7ff bc39 	b.w	8005afc <_malloc_r>
 800628a:	b92a      	cbnz	r2, 8006298 <_realloc_r+0x24>
 800628c:	f7ff fbcc 	bl	8005a28 <_free_r>
 8006290:	2400      	movs	r4, #0
 8006292:	4620      	mov	r0, r4
 8006294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006298:	f000 f81a 	bl	80062d0 <_malloc_usable_size_r>
 800629c:	4285      	cmp	r5, r0
 800629e:	4606      	mov	r6, r0
 80062a0:	d802      	bhi.n	80062a8 <_realloc_r+0x34>
 80062a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062a6:	d8f4      	bhi.n	8006292 <_realloc_r+0x1e>
 80062a8:	4629      	mov	r1, r5
 80062aa:	4640      	mov	r0, r8
 80062ac:	f7ff fc26 	bl	8005afc <_malloc_r>
 80062b0:	4607      	mov	r7, r0
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0ec      	beq.n	8006290 <_realloc_r+0x1c>
 80062b6:	42b5      	cmp	r5, r6
 80062b8:	462a      	mov	r2, r5
 80062ba:	4621      	mov	r1, r4
 80062bc:	bf28      	it	cs
 80062be:	4632      	movcs	r2, r6
 80062c0:	f7ff ffca 	bl	8006258 <memcpy>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fbae 	bl	8005a28 <_free_r>
 80062cc:	463c      	mov	r4, r7
 80062ce:	e7e0      	b.n	8006292 <_realloc_r+0x1e>

080062d0 <_malloc_usable_size_r>:
 80062d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d4:	1f18      	subs	r0, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfbc      	itt	lt
 80062da:	580b      	ldrlt	r3, [r1, r0]
 80062dc:	18c0      	addlt	r0, r0, r3
 80062de:	4770      	bx	lr

080062e0 <_init>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

080062ec <_fini>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr
